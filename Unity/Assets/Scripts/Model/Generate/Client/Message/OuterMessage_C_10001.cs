using MemoryPack;
using System.Collections.Generic;

namespace ET
{
    [MemoryPackable]
    [Message(OuterMessage.HttpGetRouterResponse)]
    public partial class HttpGetRouterResponse : MessageObject
    {
        public static HttpGetRouterResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(HttpGetRouterResponse), isFromPool) as HttpGetRouterResponse;
        }

        [MemoryPackOrder(0)]
        public List<string> Realms { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<string> Routers { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Realms.Clear();
            this.Routers.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RouterSync)]
    public partial class RouterSync : MessageObject
    {
        public static RouterSync Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RouterSync), isFromPool) as RouterSync;
        }

        [MemoryPackOrder(0)]
        public uint ConnectId { get; set; }

        [MemoryPackOrder(1)]
        public string Address { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ConnectId = default;
            this.Address = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TestRequest)]
    [ResponseType(nameof(M2C_TestResponse))]
    public partial class C2M_TestRequest : MessageObject, ILocationRequest
    {
        public static C2M_TestRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TestRequest), isFromPool) as C2M_TestRequest;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public string request { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.request = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TestResponse)]
    public partial class M2C_TestResponse : MessageObject, IResponse
    {
        public static M2C_TestResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TestResponse), isFromPool) as M2C_TestResponse;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public string response { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.response = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_SendBroadcastRequest)]
    [ResponseType(nameof(C2C_SendBroadcastResponse))]
    public partial class C2C_SendBroadcastRequest : MessageObject, IChatActorRequest
    {
        public static C2C_SendBroadcastRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_SendBroadcastRequest), isFromPool) as C2C_SendBroadcastRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public ChatInfo ChatInfo { get; set; }

        /// <summary>
        /// 0 全部区服 1当前服
        /// </summary>
        [MemoryPackOrder(1)]
        public int ZoneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChatInfo = default;
            this.ZoneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_SendBroadcastResponse)]
    public partial class C2C_SendBroadcastResponse : MessageObject, IChatActorResponse
    {
        public static C2C_SendBroadcastResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_SendBroadcastResponse), isFromPool) as C2C_SendBroadcastResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // GM邮件
    [MemoryPackable]
    [Message(OuterMessage.C2E_GMEMailRequest)]
    [ResponseType(nameof(E2C_GMEMailResponse))]
    public partial class C2E_GMEMailRequest : MessageObject, IMailActorRequest
    {
        public static C2E_GMEMailRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2E_GMEMailRequest), isFromPool) as C2E_GMEMailRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public string MailInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MailInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.E2C_GMEMailResponse)]
    public partial class E2C_GMEMailResponse : MessageObject, IMailActorResponse
    {
        public static E2C_GMEMailResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(E2C_GMEMailResponse), isFromPool) as E2C_GMEMailResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_GMCommand)]
    public partial class C2M_GMCommand : MessageObject, ILocationMessage
    {
        public static C2M_GMCommand Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GMCommand), isFromPool) as C2M_GMCommand;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public string GMMsg { get; set; }

        [MemoryPackOrder(2)]
        public string Account { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.GMMsg = default;
            this.Account = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // GM数据
    [MemoryPackable]
    [Message(OuterMessage.C2M_GM2InfoRequest)]
    [ResponseType(nameof(M2C_GM2InfoResponse))]
    public partial class C2M_GM2InfoRequest : MessageObject, ILocationRequest
    {
        public static C2M_GM2InfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GM2InfoRequest), isFromPool) as C2M_GM2InfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public string Account { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Account = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GM2InfoResponse)]
    public partial class M2C_GM2InfoResponse : MessageObject, ILocationResponse
    {
        public static M2C_GM2InfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GM2InfoResponse), isFromPool) as M2C_GM2InfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int OnLineNumber { get; set; }

        [MemoryPackOrder(1)]
        public int OnLineRobot { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.OnLineNumber = default;
            this.OnLineRobot = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // GM后台指令
    [MemoryPackable]
    [Message(OuterMessage.C2M_GM2CommonRequest)]
    [ResponseType(nameof(M2C_GM2CommonResponse))]
    public partial class C2M_GM2CommonRequest : MessageObject, ILocationRequest
    {
        public static C2M_GM2CommonRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GM2CommonRequest), isFromPool) as C2M_GM2CommonRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public string Account { get; set; }

        [MemoryPackOrder(1)]
        public string Context { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Account = default;
            this.Context = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GM2CommonResponse)]
    public partial class M2C_GM2CommonResponse : MessageObject, ILocationResponse
    {
        public static M2C_GM2CommonResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GM2CommonResponse), isFromPool) as M2C_GM2CommonResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2G_EnterGame)]
    [ResponseType(nameof(G2C_EnterGame))]
    public partial class C2G_EnterGame : MessageObject, ISessionRequest
    {
        public static C2G_EnterGame Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2G_EnterGame), isFromPool) as C2G_EnterGame;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public long AccountId { get; set; }

        [MemoryPackOrder(3)]
        public int ReLink { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.UnitId = default;
            this.AccountId = default;
            this.ReLink = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_EnterGame)]
    public partial class G2C_EnterGame : MessageObject, ISessionResponse
    {
        public static G2C_EnterGame Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_EnterGame), isFromPool) as G2C_EnterGame;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        /// <summary>
        /// 自己unitId
        /// </summary>
        [MemoryPackOrder(3)]
        public long MyId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MyId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.MoveInfo)]
    public partial class MoveInfo : MessageObject
    {
        public static MoveInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(MoveInfo), isFromPool) as MoveInfo;
        }

        [MemoryPackOrder(0)]
        public List<Unity.Mathematics.float3> Points { get; set; } = new();

        [MemoryPackOrder(1)]
        public Unity.Mathematics.quaternion Rotation { get; set; }

        [MemoryPackOrder(2)]
        public int TurnSpeed { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Points.Clear();
            this.Rotation = default;
            this.TurnSpeed = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.UnitInfo)]
    public partial class UnitInfo : MessageObject
    {
        public static UnitInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(UnitInfo), isFromPool) as UnitInfo;
        }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(2)]
        public int Type { get; set; }

        [MemoryPackOrder(3)]
        public Unity.Mathematics.float3 Position { get; set; }

        [MemoryPackOrder(4)]
        public Unity.Mathematics.float3 Forward { get; set; }

        [MongoDB.Bson.Serialization.Attributes.BsonDictionaryOptions(MongoDB.Bson.Serialization.Options.DictionaryRepresentation.ArrayOfArrays)]
        [MemoryPackOrder(5)]
        public Dictionary<int, long> KV { get; set; } = new();
        [MemoryPackOrder(6)]
        public MoveInfo MoveInfo { get; set; }

        [MemoryPackOrder(18)]
        public List<KeyValuePair> Buffs { get; set; } = new();

        [MemoryPackOrder(19)]
        public List<SkillInfo> Skills { get; set; } = new();

        /// <summary>
        /// 自身名字
        /// </summary>
        [MemoryPackOrder(20)]
        public string UnitName { get; set; }

        /// <summary>
        /// 主人名字
        /// </summary>
        [MemoryPackOrder(21)]
        public string MasterName { get; set; }

        [MemoryPackOrder(23)]
        public string UnionName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(24)]
        public string DemonName { get; set; }

        [MemoryPackOrder(25)]
        public List<int> FashionEquipList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId = default;
            this.ConfigId = default;
            this.Type = default;
            this.Position = default;
            this.Forward = default;
            this.KV.Clear();
            this.MoveInfo = default;
            this.Buffs.Clear();
            this.Skills.Clear();
            this.UnitName = default;
            this.MasterName = default;
            this.UnionName = default;
            this.DemonName = default;
            this.FashionEquipList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CreateUnits)]
    public partial class M2C_CreateUnits : MessageObject, IMessage
    {
        public static M2C_CreateUnits Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CreateUnits), isFromPool) as M2C_CreateUnits;
        }

        [MemoryPackOrder(0)]
        public List<UnitInfo> Units { get; set; } = new();

        [MemoryPackOrder(7)]
        public int UpdateAll { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Units.Clear();
            this.UpdateAll = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CreateMyUnit)]
    public partial class M2C_CreateMyUnit : MessageObject, IMessage
    {
        public static M2C_CreateMyUnit Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CreateMyUnit), isFromPool) as M2C_CreateMyUnit;
        }

        [MemoryPackOrder(0)]
        public UnitInfo Unit { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Unit = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StartSceneChange)]
    public partial class M2C_StartSceneChange : MessageObject, IMessage
    {
        public static M2C_StartSceneChange Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StartSceneChange), isFromPool) as M2C_StartSceneChange;
        }

        [MemoryPackOrder(0)]
        public long SceneInstanceId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        [MemoryPackOrder(2)]
        public int SceneId { get; set; }

        [MemoryPackOrder(3)]
        public int Difficulty { get; set; }

        [MemoryPackOrder(4)]
        public string ParamInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SceneInstanceId = default;
            this.SceneType = default;
            this.SceneId = default;
            this.Difficulty = default;
            this.ParamInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CellDungeonInfo)]
    public partial class M2C_CellDungeonInfo : MessageObject, IMessage
    {
        public static M2C_CellDungeonInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CellDungeonInfo), isFromPool) as M2C_CellDungeonInfo;
        }

        [MemoryPackOrder(0)]
        public FubenInfo FubenInfo { get; set; }

        [MemoryPackOrder(1)]
        public SonFubenInfo SonFubenInfo { get; set; }

        [MemoryPackOrder(2)]
        public int SceneId { get; set; }

        [MemoryPackOrder(3)]
        public int Difficulty { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.FubenInfo = default;
            this.SonFubenInfo = default;
            this.SceneId = default;
            this.Difficulty = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CellSonDungeonInfo)]
    public partial class M2C_CellSonDungeonInfo : MessageObject, IMessage
    {
        public static M2C_CellSonDungeonInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CellSonDungeonInfo), isFromPool) as M2C_CellSonDungeonInfo;
        }

        [MemoryPackOrder(1)]
        public SonFubenInfo SonFubenInfo { get; set; }

        [MemoryPackOrder(2)]
        public List<Unity.Mathematics.float3> Positions { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<long> UnitIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SonFubenInfo = default;
            this.Positions.Clear();
            this.UnitIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RemoveUnits)]
    public partial class M2C_RemoveUnits : MessageObject, IMessage
    {
        public static M2C_RemoveUnits Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RemoveUnits), isFromPool) as M2C_RemoveUnits;
        }

        [MemoryPackOrder(0)]
        public List<long> Units { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Units.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PathfindingRequest)]
    public partial class C2M_PathfindingRequest : MessageObject, ILocationMessage
    {
        public static C2M_PathfindingRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PathfindingRequest), isFromPool) as C2M_PathfindingRequest;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public Unity.Mathematics.float3 Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    /// <summary>
    /// 客户端寻路
    /// </summary>
    [MemoryPackable]
    [Message(OuterMessage.C2M_PathfindingResult)]
    public partial class C2M_PathfindingResult : MessageObject, ILocationMessage
    {
        public static C2M_PathfindingResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PathfindingResult), isFromPool) as C2M_PathfindingResult;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(2)]
        public int SpeedRate { get; set; }

        /// <summary>
        /// 服务器时间戳
        /// </summary>
        [MemoryPackOrder(3)]
        public long ServerTime { get; set; }

        [MemoryPackOrder(4)]
        public List<Unity.Mathematics.float3> Position { get; set; } = new();

        /// <summary>
        /// 当前位置
        /// </summary>
        [MemoryPackOrder(5)]
        public Unity.Mathematics.float3 Current { get; set; }

        /// <summary>
        /// 当前帧
        /// </summary>
        [MemoryPackOrder(6)]
        public int Frame { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SpeedRate = default;
            this.ServerTime = default;
            this.Position.Clear();
            this.Current = default;
            this.Frame = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_Stop)]
    public partial class C2M_Stop : MessageObject, ILocationMessage
    {
        public static C2M_Stop Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_Stop), isFromPool) as C2M_Stop;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(3)]
        public bool YaoGan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.YaoGan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_Stop)]
    public partial class M2C_Stop : MessageObject, IMessage
    {
        public static M2C_Stop Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_Stop), isFromPool) as M2C_Stop;
        }

        [MemoryPackOrder(0)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public long Id { get; set; }

        [MemoryPackOrder(2)]
        public Unity.Mathematics.float3 Position { get; set; }

        [MemoryPackOrder(3)]
        public Unity.Mathematics.quaternion Rotation { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Error = default;
            this.Id = default;
            this.Position = default;
            this.Rotation = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_StopResult)]
    public partial class C2M_StopResult : MessageObject, ILocationMessage
    {
        public static C2M_StopResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StopResult), isFromPool) as C2M_StopResult;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(2)]
        public Unity.Mathematics.float3 Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StopResult)]
    public partial class M2C_StopResult : MessageObject, IMessage
    {
        public static M2C_StopResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StopResult), isFromPool) as M2C_StopResult;
        }

        [MemoryPackOrder(0)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public long Id { get; set; }

        [MemoryPackOrder(2)]
        public Unity.Mathematics.float3 Position { get; set; }

        [MemoryPackOrder(3)]
        public Unity.Mathematics.quaternion Rotation { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Error = default;
            this.Id = default;
            this.Position = default;
            this.Rotation = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PathfindingResult)]
    public partial class M2C_PathfindingResult : MessageObject, IMessage
    {
        public static M2C_PathfindingResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PathfindingResult), isFromPool) as M2C_PathfindingResult;
        }

        [MemoryPackOrder(0)]
        public long Id { get; set; }

        [MemoryPackOrder(1)]
        public Unity.Mathematics.float3 Position { get; set; }

        [MemoryPackOrder(2)]
        public List<Unity.Mathematics.float3> Points { get; set; } = new();

        [MemoryPackOrder(3)]
        public bool YaoGan { get; set; }

        [MemoryPackOrder(4)]
        public int SpeedRate { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.Position = default;
            this.Points.Clear();
            this.YaoGan = default;
            this.SpeedRate = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2G_Ping)]
    [ResponseType(nameof(G2C_Ping))]
    public partial class C2G_Ping : MessageObject, ISessionRequest
    {
        public static C2G_Ping Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2G_Ping), isFromPool) as C2G_Ping;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_Ping)]
    public partial class G2C_Ping : MessageObject, ISessionResponse
    {
        public static G2C_Ping Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_Ping), isFromPool) as G2C_Ping;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public long Time { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Time = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_Ping)]
    [ResponseType(nameof(R2C_Ping))]
    public partial class C2R_Ping : MessageObject, ISessionRequest
    {
        public static C2R_Ping Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_Ping), isFromPool) as C2R_Ping;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_Ping)]
    public partial class R2C_Ping : MessageObject, ISessionResponse
    {
        public static R2C_Ping Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_Ping), isFromPool) as R2C_Ping;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public long Time { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Time = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_Test)]
    public partial class G2C_Test : MessageObject, ISessionMessage
    {
        public static G2C_Test Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_Test), isFromPool) as G2C_Test;
        }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            
            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_Reload)]
    [ResponseType(nameof(M2C_Reload))]
    public partial class C2M_Reload : MessageObject, ISessionRequest
    {
        public static C2M_Reload Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_Reload), isFromPool) as C2M_Reload;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public string Account { get; set; }

        [MemoryPackOrder(2)]
        public string Password { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Account = default;
            this.Password = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_Reload)]
    public partial class M2C_Reload : MessageObject, ISessionResponse
    {
        public static M2C_Reload Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_Reload), isFromPool) as M2C_Reload;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ServerItem)]
    public partial class ServerItem : MessageObject
    {
        public static ServerItem Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ServerItem), isFromPool) as ServerItem;
        }

        [MemoryPackOrder(0)]
        public int ServerId { get; set; }

        [MemoryPackOrder(1)]
        public string ServerIp { get; set; }

        [MemoryPackOrder(2)]
        public string ServerName { get; set; }

        [MemoryPackOrder(3)]
        public long ServerOpenTime { get; set; }

        [MemoryPackOrder(4)]
        public int Show { get; set; }

        [MemoryPackOrder(5)]
        public int New { get; set; }

        /// <summary>
        /// 不配置或者-1全部显示
        /// </summary>
        [MemoryPackOrder(6)]
        public List<int> PlatformList { get; set; } = new();

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(7)]
        public List<long> OldServerIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ServerId = default;
            this.ServerIp = default;
            this.ServerName = default;
            this.ServerOpenTime = default;
            this.Show = default;
            this.New = default;
            this.PlatformList.Clear();
            this.OldServerIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_DeleteAccountRequest)]
    [ResponseType(nameof(R2C_DeleteAccountResponse))]
    public partial class C2R_DeleteAccountRequest : MessageObject, ISessionRequest
    {
        public static C2R_DeleteAccountRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_DeleteAccountRequest), isFromPool) as C2R_DeleteAccountRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string Account { get; set; }

        [MemoryPackOrder(1)]
        public string Password { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Account = default;
            this.Password = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_DeleteAccountResponse)]
    public partial class R2C_DeleteAccountResponse : MessageObject, ISessionResponse
    {
        public static R2C_DeleteAccountResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_DeleteAccountResponse), isFromPool) as R2C_DeleteAccountResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_ServerList)]
    [ResponseType(nameof(R2C_ServerList))]
    public partial class C2R_ServerList : MessageObject, ISessionRequest
    {
        public static C2R_ServerList Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_ServerList), isFromPool) as C2R_ServerList;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int VersionMode { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.VersionMode = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_ServerList)]
    public partial class R2C_ServerList : MessageObject, ISessionResponse
    {
        public static R2C_ServerList Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_ServerList), isFromPool) as R2C_ServerList;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public string Message { get; set; }

        [MemoryPackOrder(2)]
        public int Error { get; set; }

        /// <summary>
        /// 服务器列表
        /// </summary>
        [MemoryPackOrder(3)]
        public List<ServerItem> ServerItems { get; set; } = new();

        [MemoryPackOrder(4)]
        public string NoticeVersion { get; set; }

        [MemoryPackOrder(5)]
        public string NoticeText { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.ServerItems.Clear();
            this.NoticeVersion = default;
            this.NoticeText = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_LoginAccount)]
    [ResponseType(nameof(R2C_LoginAccount))]
    public partial class C2R_LoginAccount : MessageObject, ISessionRequest
    {
        public static C2R_LoginAccount Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_LoginAccount), isFromPool) as C2R_LoginAccount;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        /// <summary>
        /// 帐号
        /// </summary>
        [MemoryPackOrder(1)]
        public string Account { get; set; }

        /// <summary>
        /// 密码
        /// </summary>
        [MemoryPackOrder(2)]
        public string Password { get; set; }

        [MemoryPackOrder(3)]
        public string Token { get; set; }

        [MemoryPackOrder(4)]
        public string ThirdLogin { get; set; }

        [MemoryPackOrder(5)]
        public int Relink { get; set; }

        [MemoryPackOrder(6)]
        public int age_type { get; set; }

        [MemoryPackOrder(7)]
        public int ServerId { get; set; }

        [MemoryPackOrder(8)]
        public bool CheckRealName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Account = default;
            this.Password = default;
            this.Token = default;
            this.ThirdLogin = default;
            this.Relink = default;
            this.age_type = default;
            this.ServerId = default;
            this.CheckRealName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_LoginAccount)]
    public partial class R2C_LoginAccount : MessageObject, ISessionResponse
    {
        public static R2C_LoginAccount Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_LoginAccount), isFromPool) as R2C_LoginAccount;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public string Address { get; set; }

        [MemoryPackOrder(5)]
        public long GateId { get; set; }

        [MemoryPackOrder(6)]
        public string Token { get; set; }

        [MemoryPackOrder(7)]
        public long AccountId { get; set; }

        [MemoryPackOrder(8)]
        public int QueueNumber { get; set; }

        [MemoryPackOrder(9)]
        public string QueueAddres { get; set; }

        [MemoryPackOrder(10)]
        public PlayerInfo PlayerInfo { get; set; }

        [MemoryPackOrder(11)]
        public List<CreateRoleInfo> RoleLists { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Address = default;
            this.GateId = default;
            this.Token = default;
            this.AccountId = default;
            this.QueueNumber = default;
            this.QueueAddres = default;
            this.PlayerInfo = default;
            this.RoleLists.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RealNameRequest)]
    [ResponseType(nameof(R2C_RealNameResponse))]
    public partial class C2R_RealNameRequest : MessageObject, ISessionRequest
    {
        public static C2R_RealNameRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RealNameRequest), isFromPool) as C2R_RealNameRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 姓名
        /// </summary>
        [MemoryPackOrder(0)]
        public string Name { get; set; }

        /// <summary>
        /// 身份证号码
        /// </summary>
        [MemoryPackOrder(1)]
        public string IdCardNO { get; set; }

        /// <summary>
        /// 1认证 2查询 3上报
        /// </summary>
        [MemoryPackOrder(2)]
        public int AiType { get; set; }

        /// <summary>
        /// 帐号Id
        /// </summary>
        [MemoryPackOrder(3)]
        public long AccountId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Name = default;
            this.IdCardNO = default;
            this.AiType = default;
            this.AccountId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RealNameResponse)]
    public partial class R2C_RealNameResponse : MessageObject, ISessionResponse
    {
        public static R2C_RealNameResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RealNameResponse), isFromPool) as R2C_RealNameResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 实名认证返回
        /// </summary>
        [MemoryPackOrder(0)]
        public int ErrorCode { get; set; }

        [MemoryPackOrder(10)]
        public PlayerInfo PlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ErrorCode = default;
            this.PlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RealNameRequest)]
    [ResponseType(nameof(M2C_RealNameResponse))]
    public partial class C2M_RealNameRequest : MessageObject, ILocationRequest
    {
        public static C2M_RealNameRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RealNameRequest), isFromPool) as C2M_RealNameRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 姓名
        /// </summary>
        [MemoryPackOrder(0)]
        public string Name { get; set; }

        /// <summary>
        /// 身份证号码
        /// </summary>
        [MemoryPackOrder(1)]
        public string IdCardNO { get; set; }

        /// <summary>
        /// 1认证 2查询 3上报
        /// </summary>
        [MemoryPackOrder(2)]
        public int AiType { get; set; }

        /// <summary>
        /// 帐号Id
        /// </summary>
        [MemoryPackOrder(3)]
        public long AccountId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Name = default;
            this.IdCardNO = default;
            this.AiType = default;
            this.AccountId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RealNameResponse)]
    public partial class M2C_RealNameResponse : MessageObject, ILocationResponse
    {
        public static M2C_RealNameResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RealNameResponse), isFromPool) as M2C_RealNameResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 实名认证返回
        /// </summary>
        [MemoryPackOrder(0)]
        public int ErrorCode { get; set; }

        [MemoryPackOrder(10)]
        public PlayerInfo PlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ErrorCode = default;
            this.PlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RechargeInfo)]
    public partial class RechargeInfo : MessageObject
    {
        public static RechargeInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RechargeInfo), isFromPool) as RechargeInfo;
        }

        [MemoryPackOrder(0)]
        public int Amount { get; set; }

        [MemoryPackOrder(1)]
        public long Time { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        [MemoryPackOrder(3)]
        public string OrderInfo { get; set; }

        [MemoryPackOrder(4)]
        public int PhysicsZone { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Amount = default;
            this.Time = default;
            this.UnitId = default;
            this.OrderInfo = default;
            this.PhysicsZone = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PlayerInfo)]
    public partial class PlayerInfo : MessageObject
    {
        public static PlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PlayerInfo), isFromPool) as PlayerInfo;
        }

        [MemoryPackOrder(0)]
        public int RealName { get; set; }

        [MemoryPackOrder(1)]
        public string Name { get; set; }

        [MemoryPackOrder(2)]
        public string IdCardNo { get; set; }

        [MemoryPackOrder(3)]
        public int RealNameReward { get; set; }

        [MemoryPackOrder(4)]
        public List<RechargeInfo> RechargeInfos { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<KeyValuePair> DeleteUserList { get; set; } = new();

        [MemoryPackOrder(6)]
        public List<int> BuChangZone { get; set; } = new();

        [MemoryPackOrder(7)]
        public string PhoneNumber { get; set; }

        [MemoryPackOrder(8)]
        public List<long> ShareTimes { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RealName = default;
            this.Name = default;
            this.IdCardNo = default;
            this.RealNameReward = default;
            this.RechargeInfos.Clear();
            this.DeleteUserList.Clear();
            this.BuChangZone.Clear();
            this.PhoneNumber = default;
            this.ShareTimes.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.CreateRoleInfo)]
    public partial class CreateRoleInfo : MessageObject
    {
        public static CreateRoleInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(CreateRoleInfo), isFromPool) as CreateRoleInfo;
        }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int PlayerLv { get; set; }

        [MemoryPackOrder(2)]
        public int PlayerOcc { get; set; }

        [MemoryPackOrder(3)]
        public int WeaponId { get; set; }

        [MemoryPackOrder(4)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(5)]
        public int OccTwo { get; set; }

        [MemoryPackOrder(6)]
        public int EquipIndex { get; set; }

        [MemoryPackOrder(7)]
        public int RobotId { get; set; }

        [MemoryPackOrder(8)]
        public int ServerId { get; set; }

        [MemoryPackOrder(9)]
        public int State { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId = default;
            this.PlayerLv = default;
            this.PlayerOcc = default;
            this.WeaponId = default;
            this.PlayerName = default;
            this.OccTwo = default;
            this.EquipIndex = default;
            this.RobotId = default;
            this.ServerId = default;
            this.State = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2G_LoginGameGate)]
    [ResponseType(nameof(G2C_LoginGameGate))]
    public partial class C2G_LoginGameGate : MessageObject, ISessionRequest
    {
        public static C2G_LoginGameGate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2G_LoginGameGate), isFromPool) as C2G_LoginGameGate;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public long Key { get; set; }

        [MemoryPackOrder(2)]
        public long GateId { get; set; }

        [MemoryPackOrder(3)]
        public string AccountName { get; set; }

        [MemoryPackOrder(4)]
        public long RoleId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Key = default;
            this.GateId = default;
            this.AccountName = default;
            this.RoleId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_LoginGameGate)]
    public partial class G2C_LoginGameGate : MessageObject, ISessionResponse
    {
        public static G2C_LoginGameGate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_LoginGameGate), isFromPool) as G2C_LoginGameGate;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public long PlayerId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PlayerId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_CreateRoleData)]
    [ResponseType(nameof(R2C_CreateRoleData))]
    public partial class C2R_CreateRoleData : MessageObject, ISessionRequest
    {
        public static C2R_CreateRoleData Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_CreateRoleData), isFromPool) as C2R_CreateRoleData;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int CreateOcc { get; set; }

        [MemoryPackOrder(2)]
        public string CreateName { get; set; }

        [MemoryPackOrder(3)]
        public long AccountId { get; set; }

        [MemoryPackOrder(4)]
        public int ServerId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CreateOcc = default;
            this.CreateName = default;
            this.AccountId = default;
            this.ServerId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_CreateRoleData)]
    public partial class R2C_CreateRoleData : MessageObject, ISessionResponse
    {
        public static R2C_CreateRoleData Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_CreateRoleData), isFromPool) as R2C_CreateRoleData;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public CreateRoleInfo createRoleInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.createRoleInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_DeleteRoleData)]
    [ResponseType(nameof(R2C_DeleteRoleData))]
    public partial class C2R_DeleteRoleData : MessageObject, ISessionRequest
    {
        public static C2R_DeleteRoleData Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_DeleteRoleData), isFromPool) as C2R_DeleteRoleData;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long AccountId { get; set; }

        [MemoryPackOrder(1)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.AccountId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_DeleteRoleData)]
    public partial class R2C_DeleteRoleData : MessageObject, ISessionResponse
    {
        public static R2C_DeleteRoleData Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_DeleteRoleData), isFromPool) as R2C_DeleteRoleData;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2Q_EnterQueue)]
    [ResponseType(nameof(Q2C_EnterQueue))]
    public partial class C2Q_EnterQueue : MessageObject, ISessionRequest
    {
        public static C2Q_EnterQueue Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Q_EnterQueue), isFromPool) as C2Q_EnterQueue;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string Token { get; set; }

        [MemoryPackOrder(1)]
        public string Account { get; set; }

        [MemoryPackOrder(2)]
        public long AccountId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Token = default;
            this.Account = default;
            this.AccountId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Q2C_EnterQueue)]
    public partial class Q2C_EnterQueue : MessageObject, ISessionResponse
    {
        public static Q2C_EnterQueue Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Q2C_EnterQueue), isFromPool) as Q2C_EnterQueue;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_GetRealmKey)]
    [ResponseType(nameof(R2C_GetRealmKey))]
    public partial class C2R_GetRealmKey : MessageObject, ISessionRequest
    {
        public static C2R_GetRealmKey Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_GetRealmKey), isFromPool) as C2R_GetRealmKey;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public string Token { get; set; }

        [MemoryPackOrder(2)]
        public string Account { get; set; }

        [MemoryPackOrder(3)]
        public int ServerId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Token = default;
            this.Account = default;
            this.ServerId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_GetRealmKey)]
    public partial class R2C_GetRealmKey : MessageObject, ISessionResponse
    {
        public static R2C_GetRealmKey Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_GetRealmKey), isFromPool) as R2C_GetRealmKey;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public string Address { get; set; }

        [MemoryPackOrder(4)]
        public long Key { get; set; }

        [MemoryPackOrder(5)]
        public long GateId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Address = default;
            this.Key = default;
            this.GateId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_TestHotfixMessage)]
    public partial class G2C_TestHotfixMessage : MessageObject, ISessionMessage
    {
        public static G2C_TestHotfixMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_TestHotfixMessage), isFromPool) as G2C_TestHotfixMessage;
        }

        [MemoryPackOrder(0)]
        public string Info { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Info = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TestRobotCase)]
    [ResponseType(nameof(M2C_TestRobotCase))]
    public partial class C2M_TestRobotCase : MessageObject, ILocationRequest
    {
        public static C2M_TestRobotCase Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TestRobotCase), isFromPool) as C2M_TestRobotCase;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int N { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.N = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TestRobotCase)]
    public partial class M2C_TestRobotCase : MessageObject, ILocationResponse
    {
        public static M2C_TestRobotCase Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TestRobotCase), isFromPool) as M2C_TestRobotCase;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public int N { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.N = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TestRobotCase2)]
    public partial class C2M_TestRobotCase2 : MessageObject, ILocationMessage
    {
        public static C2M_TestRobotCase2 Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TestRobotCase2), isFromPool) as C2M_TestRobotCase2;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int N { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.N = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TestRobotCase2)]
    public partial class M2C_TestRobotCase2 : MessageObject, ILocationMessage
    {
        public static M2C_TestRobotCase2 Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TestRobotCase2), isFromPool) as M2C_TestRobotCase2;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int N { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.N = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TransferMap)]
    [ResponseType(nameof(M2C_TransferMap))]
    public partial class C2M_TransferMap : MessageObject, ILocationRequest
    {
        public static C2M_TransferMap Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TransferMap), isFromPool) as C2M_TransferMap;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneId { get; set; }

        [MemoryPackOrder(2)]
        public int SceneType { get; set; }

        [MemoryPackOrder(4)]
        public int Difficulty { get; set; }

        [MemoryPackOrder(5)]
        public string paramInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SceneId = default;
            this.SceneType = default;
            this.Difficulty = default;
            this.paramInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TransferMap)]
    public partial class M2C_TransferMap : MessageObject, ILocationResponse
    {
        public static M2C_TransferMap Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TransferMap), isFromPool) as M2C_TransferMap;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FlyToPosition)]
    [ResponseType(nameof(M2C_FlyToPosition))]
    public partial class C2M_FlyToPosition : MessageObject, ILocationRequest
    {
        public static C2M_FlyToPosition Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FlyToPosition), isFromPool) as C2M_FlyToPosition;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneId { get; set; }

        [MemoryPackOrder(2)]
        public int SceneType { get; set; }

        [MemoryPackOrder(4)]
        public int UnitType { get; set; }

        [MemoryPackOrder(5)]
        public int ConfigId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SceneId = default;
            this.SceneType = default;
            this.UnitType = default;
            this.ConfigId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FlyToPosition)]
    public partial class M2C_FlyToPosition : MessageObject, ILocationResponse
    {
        public static M2C_FlyToPosition Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FlyToPosition), isFromPool) as M2C_FlyToPosition;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2G_Benchmark)]
    [ResponseType(nameof(G2C_Benchmark))]
    public partial class C2G_Benchmark : MessageObject, ISessionRequest
    {
        public static C2G_Benchmark Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2G_Benchmark), isFromPool) as C2G_Benchmark;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_Benchmark)]
    public partial class G2C_Benchmark : MessageObject, ISessionResponse
    {
        public static G2C_Benchmark Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_Benchmark), isFromPool) as G2C_Benchmark;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.BagInfo)]
    public partial class BagInfo : MessageObject
    {
        public static BagInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(BagInfo), isFromPool) as BagInfo;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Name { get; set; }

        [MemoryPackOrder(0)]
        public long BagInfoID { get; set; }

        [MemoryPackOrder(1)]
        public int ItemID { get; set; }

        [MemoryPackOrder(2)]
        public int ItemNum { get; set; }

        [MemoryPackOrder(3)]
        public string ItemPar { get; set; }

        [MemoryPackOrder(4)]
        public int HideID { get; set; }

        /// <summary>
        /// 对应的孔位颜色
        /// </summary>
        [MemoryPackOrder(5)]
        public string GemHole { get; set; }

        /// <summary>
        /// 0背包 1装备
        /// </summary>
        [MemoryPackOrder(7)]
        public int Loc { get; set; }

        [MemoryPackOrder(8)]
        public bool IfJianDing { get; set; }

        /// <summary>
        /// 鉴定属性
        /// </summary>
        [MemoryPackOrder(9)]
        public List<HideProList> HideProLists { get; set; } = new();

        /// <summary>
        /// 洗练属性
        /// </summary>
        [MemoryPackOrder(10)]
        public List<HideProList> XiLianHideProLists { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<int> HideSkillLists { get; set; } = new();

        [MemoryPackOrder(12)]
        public bool isBinging { get; set; }

        /// <summary>
        /// 洗练特殊属性
        /// </summary>
        [MemoryPackOrder(13)]
        public List<HideProList> XiLianHideTeShuProLists { get; set; } = new();

        /// <summary>
        /// 来源方式
        /// </summary>
        [MemoryPackOrder(15)]
        public string GetWay { get; set; }

        /// <summary>
        /// 对应的宝石ID
        /// </summary>
        [MemoryPackOrder(16)]
        public string GemIDNew { get; set; }

        /// <summary>
        /// 制作玩家名字
        /// </summary>
        [MemoryPackOrder(17)]
        public string MakePlayer { get; set; }

        /// <summary>
        /// 附魔属性
        /// </summary>
        [MemoryPackOrder(19)]
        public List<HideProList> FumoProLists { get; set; } = new();

        [MemoryPackOrder(20)]
        public int InheritTimes { get; set; }

        [MemoryPackOrder(21)]
        public List<int> InheritSkills { get; set; } = new();

        /// <summary>
        /// /装备锁 宠物锁 功能 npc打开
        /// </summary>
        [MemoryPackOrder(22)]
        public bool IsProtect { get; set; }

        /// <summary>
        /// 增幅属性
        /// </summary>
        [MemoryPackOrder(23)]
        public List<HideProList> IncreaseProLists { get; set; } = new();

        /// <summary>
        /// 增幅技能
        /// </summary>
        [MemoryPackOrder(24)]
        public List<int> IncreaseSkillLists { get; set; } = new();

        [MemoryPackOrder(25)]
        public int EquipPlan { get; set; }

        [MemoryPackOrder(26)]
        public int EquipIndex { get; set; }

        /// <summary>
        /// 0未附灵 1附灵
        /// </summary>
        [MemoryPackOrder(27)]
        public int FuLing { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Name = default;
            this.BagInfoID = default;
            this.ItemID = default;
            this.ItemNum = default;
            this.ItemPar = default;
            this.HideID = default;
            this.GemHole = default;
            this.Loc = default;
            this.IfJianDing = default;
            this.HideProLists.Clear();
            this.XiLianHideProLists.Clear();
            this.HideSkillLists.Clear();
            this.isBinging = default;
            this.XiLianHideTeShuProLists.Clear();
            this.GetWay = default;
            this.GemIDNew = default;
            this.MakePlayer = default;
            this.FumoProLists.Clear();
            this.InheritTimes = default;
            this.InheritSkills.Clear();
            this.IsProtect = default;
            this.IncreaseProLists.Clear();
            this.IncreaseSkillLists.Clear();
            this.EquipPlan = default;
            this.EquipIndex = default;
            this.FuLing = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.MysteryItemInfo)]
    public partial class MysteryItemInfo : MessageObject
    {
        public static MysteryItemInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(MysteryItemInfo), isFromPool) as MysteryItemInfo;
        }

        [MemoryPackOrder(0)]
        public int MysteryId { get; set; }

        [MemoryPackOrder(2)]
        public int ItemID { get; set; }

        [MemoryPackOrder(3)]
        public int ItemNumber { get; set; }

        [MemoryPackOrder(4)]
        public int ProductId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MysteryId = default;
            this.ItemID = default;
            this.ItemNumber = default;
            this.ProductId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 战区领取记录
    [MemoryPackable]
    [Message(OuterMessage.ZhanQuReceiveNumber)]
    public partial class ZhanQuReceiveNumber : MessageObject
    {
        public static ZhanQuReceiveNumber Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ZhanQuReceiveNumber), isFromPool) as ZhanQuReceiveNumber;
        }

        [MemoryPackOrder(0)]
        public int ActivityId { get; set; }

        [MemoryPackOrder(1)]
        public int ReceiveNum { get; set; }

        [MemoryPackOrder(2)]
        public List<long> ReceiveUnitIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActivityId = default;
            this.ReceiveNum = default;
            this.ReceiveUnitIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.FirstWinInfo)]
    public partial class FirstWinInfo : MessageObject
    {
        public static FirstWinInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(FirstWinInfo), isFromPool) as FirstWinInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public int FirstWinId { get; set; }

        [MemoryPackOrder(2)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(3)]
        public long KillTime { get; set; }

        [MemoryPackOrder(4)]
        public int Difficulty { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.FirstWinId = default;
            this.PlayerName = default;
            this.KillTime = default;
            this.Difficulty = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMingPlayerInfo)]
    public partial class PetMingPlayerInfo : MessageObject
    {
        public static PetMingPlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMingPlayerInfo), isFromPool) as PetMingPlayerInfo;
        }

        [MemoryPackOrder(0)]
        public int MineType { get; set; }

        [MemoryPackOrder(1)]
        public int Postion { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        [MemoryPackOrder(3)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(4)]
        public List<int> PetConfig { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<long> PetIdList { get; set; } = new();

        [MemoryPackOrder(6)]
        public int TeamId { get; set; }

        [MemoryPackOrder(7)]
        public long OccupyTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MineType = default;
            this.Postion = default;
            this.UnitId = default;
            this.PlayerName = default;
            this.PetConfig.Clear();
            this.PetIdList.Clear();
            this.TeamId = default;
            this.OccupyTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ChatInfo)]
    public partial class ChatInfo : MessageObject
    {
        public static ChatInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ChatInfo), isFromPool) as ChatInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(2)]
        public string ChatMsg { get; set; }

        [MemoryPackOrder(3)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(1)]
        public int ChannelId { get; set; }

        [MemoryPackOrder(4)]
        public long ParamId { get; set; }

        [MemoryPackOrder(5)]
        public long Time { get; set; }

        [MemoryPackOrder(6)]
        public int Occ { get; set; }

        [MemoryPackOrder(7)]
        public int PlayerLevel { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.ChatMsg = default;
            this.PlayerName = default;
            this.ChannelId = default;
            this.ParamId = default;
            this.Time = default;
            this.Occ = default;
            this.PlayerLevel = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.MailInfo)]
    public partial class MailInfo : MessageObject
    {
        public static MailInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(MailInfo), isFromPool) as MailInfo;
        }

        /// <summary>
        /// 新增 更新 删除
        /// </summary>
        [MemoryPackOrder(0)]
        public int Status { get; set; }

        [MemoryPackOrder(2)]
        public string Context { get; set; }

        [MemoryPackOrder(4)]
        public long MailId { get; set; }

        [MemoryPackOrder(5)]
        public string Title { get; set; }

        [MemoryPackOrder(6)]
        public List<ItemInfoProto> ItemList { get; set; } = new();

        [MemoryPackOrder(7)]
        public ItemInfoProto ItemSell { get; set; }

        [MemoryPackOrder(8)]
        public long BuyPlayerId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Status = default;
            this.Context = default;
            this.MailId = default;
            this.Title = default;
            this.ItemList.Clear();
            this.ItemSell = default;
            this.BuyPlayerId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PaiMaiItemInfo)]
    public partial class PaiMaiItemInfo : MessageObject
    {
        public static PaiMaiItemInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PaiMaiItemInfo), isFromPool) as PaiMaiItemInfo;
        }

        [MemoryPackOrder(0)]
        public long Id { get; set; }

        [MemoryPackOrder(1)]
        public long UserId { get; set; }

        [MemoryPackOrder(2)]
        public ItemInfoProto BagInfo { get; set; }

        [MemoryPackOrder(4)]
        public int Price { get; set; }

        [MemoryPackOrder(5)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(6)]
        public long SellTime { get; set; }

        [MemoryPackOrder(7)]
        public string Account { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.UserId = default;
            this.BagInfo = default;
            this.Price = default;
            this.PlayerName = default;
            this.SellTime = default;
            this.Account = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PaiMaiShopItemInfo)]
    public partial class PaiMaiShopItemInfo : MessageObject
    {
        public static PaiMaiShopItemInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PaiMaiShopItemInfo), isFromPool) as PaiMaiShopItemInfo;
        }

        [MemoryPackOrder(0)]
        public long Id { get; set; }

        [MemoryPackOrder(1)]
        public int ItemNumber { get; set; }

        [MemoryPackOrder(2)]
        public int PriceType { get; set; }

        [MemoryPackOrder(3)]
        public int Price { get; set; }

        [MemoryPackOrder(4)]
        public float PricePro { get; set; }

        [MemoryPackOrder(5)]
        public int BuyNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.ItemNumber = default;
            this.PriceType = default;
            this.Price = default;
            this.PricePro = default;
            this.BuyNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PopularizeInfo)]
    public partial class PopularizeInfo : MessageObject
    {
        public static PopularizeInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PopularizeInfo), isFromPool) as PopularizeInfo;
        }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public string Nmae { get; set; }

        [MemoryPackOrder(2)]
        public int Level { get; set; }

        [MemoryPackOrder(3)]
        public List<int> Rewards { get; set; } = new();

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(5)]
        public int OccTwo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId = default;
            this.Nmae = default;
            this.Level = default;
            this.Rewards.Clear();
            this.Occ = default;
            this.OccTwo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RankingInfo)]
    public partial class RankingInfo : MessageObject
    {
        public static RankingInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RankingInfo), isFromPool) as RankingInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(2)]
        public int PlayerLv { get; set; }

        [MemoryPackOrder(3)]
        public long Combat { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.PlayerName = default;
            this.PlayerLv = default;
            this.Combat = default;
            this.Occ = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RankShouLieInfo)]
    public partial class RankShouLieInfo : MessageObject
    {
        public static RankShouLieInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RankShouLieInfo), isFromPool) as RankShouLieInfo;
        }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        /// <summary>
        /// 狩猎数量
        /// </summary>
        [MemoryPackOrder(2)]
        public long KillNumber { get; set; }

        /// <summary>
        /// 显示头像
        /// </summary>
        [MemoryPackOrder(3)]
        public int Occ { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitID = default;
            this.PlayerName = default;
            this.KillNumber = default;
            this.Occ = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RankPetInfo)]
    public partial class RankPetInfo : MessageObject
    {
        public static RankPetInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RankPetInfo), isFromPool) as RankPetInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(2)]
        public string TeamName { get; set; }

        [MemoryPackOrder(3)]
        public int RankId { get; set; }

        [MemoryPackOrder(4)]
        public List<int> PetConfigId { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<long> PetUId { get; set; } = new();

        [MemoryPackOrder(6)]
        public int Combat { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.PlayerName = default;
            this.TeamName = default;
            this.RankId = default;
            this.PetConfigId.Clear();
            this.PetUId.Clear();
            this.Combat = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ServerInfo)]
    public partial class ServerInfo : MessageObject
    {
        public static ServerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ServerInfo), isFromPool) as ServerInfo;
        }

        [MemoryPackOrder(0)]
        public int WorldLv { get; set; }

        [MemoryPackOrder(1)]
        public long ExChangeGold { get; set; }

        [MemoryPackOrder(3)]
        public RankingInfo RankingInfo { get; set; }

        [MemoryPackOrder(4)]
        public int TianQi { get; set; }

        [MemoryPackOrder(5)]
        public bool ShouLieOpen { get; set; }

        /// <summary>
        /// 每天随机
        /// </summary>
        [MemoryPackOrder(6)]
        public int ChouKaDropId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.WorldLv = default;
            this.ExChangeGold = default;
            this.RankingInfo = default;
            this.TianQi = default;
            this.ShouLieOpen = default;
            this.ChouKaDropId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ServerMailItem)]
    public partial class ServerMailItem : MessageObject
    {
        public static ServerMailItem Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ServerMailItem), isFromPool) as ServerMailItem;
        }

        /// <summary>
        /// 1全服邮件     2充值邮件   3等级邮件   4开启格子   5充值区间
        /// </summary>
        [MemoryPackOrder(0)]
        public int MailType { get; set; }

        /// <summary>
        /// (Title == mailInfo[5])
        /// </summary>
        [MemoryPackOrder(1)]
        public string ParasmNew { get; set; }

        [MemoryPackOrder(2)]
        public List<ItemInfoProto> ItemList { get; set; } = new();

        [MemoryPackOrder(3)]
        public long EndTime { get; set; }

        [MemoryPackOrder(4)]
        public int ServerMailIId { get; set; }

        /// <summary>
        /// (作废)
        /// </summary>
        [MemoryPackOrder(5)]
        public int Parasm { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MailType = default;
            this.ParasmNew = default;
            this.ItemList.Clear();
            this.EndTime = default;
            this.ServerMailIId = default;
            this.Parasm = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.UnionInfo)]
    public partial class UnionInfo : MessageObject
    {
        public static UnionInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(UnionInfo), isFromPool) as UnionInfo;
        }

        [MemoryPackOrder(0)]
        public string UnionName { get; set; }

        [MemoryPackOrder(1)]
        public long LeaderId { get; set; }

        [MemoryPackOrder(2)]
        public string LeaderName { get; set; }

        [MemoryPackOrder(3)]
        public int LevelLimit { get; set; }

        [MemoryPackOrder(4)]
        public string UnionPurpose { get; set; }

        [MemoryPackOrder(5)]
        public List<long> ApplyList { get; set; } = new();

        [MemoryPackOrder(6)]
        public long UnionId { get; set; }

        [MemoryPackOrder(7)]
        public int Level { get; set; }

        [MemoryPackOrder(8)]
        public int Exp { get; set; }

        [MemoryPackOrder(9)]
        public List<UnionPlayerInfo> UnionPlayerList { get; set; } = new();

        [MemoryPackOrder(10)]
        public List<DonationRecord> DonationRecords { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<long> JingXuanList { get; set; } = new();

        [MemoryPackOrder(12)]
        public long JingXuanEndTime { get; set; }

        [MemoryPackOrder(13)]
        public List<int> UnionKeJiList { get; set; } = new();

        /// <summary>
        /// 当前升级的科技， 当前只能升级一个
        /// </summary>
        [MemoryPackOrder(14)]
        public int KeJiActitePos { get; set; }

        /// <summary>
        /// 当前升级时间
        /// </summary>
        [MemoryPackOrder(15)]
        public long KeJiActiteTime { get; set; }

        /// <summary>
        /// 公会金币
        /// </summary>
        [MemoryPackOrder(16)]
        public long UnionGold { get; set; }

        /// <summary>
        /// 记录 $"{playerName}_{getWay}_{dataType}_{dataValue}
        /// </summary>
        [MemoryPackOrder(17)]
        public List<string> ActiveRecord { get; set; } = new();

        [MemoryPackOrder(18)]
        public long UnionWishTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnionName = default;
            this.LeaderId = default;
            this.LeaderName = default;
            this.LevelLimit = default;
            this.UnionPurpose = default;
            this.ApplyList.Clear();
            this.UnionId = default;
            this.Level = default;
            this.Exp = default;
            this.UnionPlayerList.Clear();
            this.DonationRecords.Clear();
            this.JingXuanList.Clear();
            this.JingXuanEndTime = default;
            this.UnionKeJiList.Clear();
            this.KeJiActitePos = default;
            this.KeJiActiteTime = default;
            this.UnionGold = default;
            this.ActiveRecord.Clear();
            this.UnionWishTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.UnionPlayerInfo)]
    public partial class UnionPlayerInfo : MessageObject
    {
        public static UnionPlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(UnionPlayerInfo), isFromPool) as UnionPlayerInfo;
        }

        [MemoryPackOrder(0)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(1)]
        public int PlayerLevel { get; set; }

        /// <summary>
        /// /1族长 2副族长
        /// </summary>
        [MemoryPackOrder(2)]
        public int Position { get; set; }

        [MemoryPackOrder(3)]
        public long UserID { get; set; }

        [MemoryPackOrder(4)]
        public int Combat { get; set; }

        [MemoryPackOrder(5)]
        public int Occ { get; set; }

        [MemoryPackOrder(6)]
        public int OccTwo { get; set; }

        [MemoryPackOrder(7)]
        public long LastLoginTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PlayerName = default;
            this.PlayerLevel = default;
            this.Position = default;
            this.UserID = default;
            this.Combat = default;
            this.Occ = default;
            this.OccTwo = default;
            this.LastLoginTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.DonationRecord)]
    public partial class DonationRecord : MessageObject
    {
        public static DonationRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(DonationRecord), isFromPool) as DonationRecord;
        }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long Time { get; set; }

        [MemoryPackOrder(2)]
        public int Gold { get; set; }

        [MemoryPackOrder(3)]
        public string Name { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(5)]
        public int Diamond { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId = default;
            this.Time = default;
            this.Gold = default;
            this.Name = default;
            this.Occ = default;
            this.Diamond = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_Disconnect)]
    public partial class A2C_Disconnect : MessageObject, IMessage
    {
        public static A2C_Disconnect Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_Disconnect), isFromPool) as A2C_Disconnect;
        }

        [MemoryPackOrder(0)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.G2C_SecondLogin)]
    public partial class G2C_SecondLogin : MessageObject, IMessage
    {
        public static G2C_SecondLogin Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(G2C_SecondLogin), isFromPool) as G2C_SecondLogin;
        }

        [MemoryPackOrder(0)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        [MemoryPackOrder(2)]
        public int SceneId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Error = default;
            this.SceneType = default;
            this.SceneId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 等级 经验 货币 或者不变的数值都放在这。
    [MemoryPackable]
    [Message(OuterMessage.UserInfoProto)]
    public partial class UserInfoProto : MessageObject
    {
        public static UserInfoProto Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(UserInfoProto), isFromPool) as UserInfoProto;
        }

        [MemoryPackOrder(0)]
        public long AccInfoID { get; set; }

        [MemoryPackOrder(1)]
        public string Name { get; set; }

        [MemoryPackOrder(2)]
        public long Gold { get; set; }

        /// <summary>
        /// 钻石
        /// </summary>
        [MemoryPackOrder(3)]
        public long Diamond { get; set; }

        /// <summary>
        /// 等级
        /// </summary>
        [MemoryPackOrder(4)]
        public int Lv { get; set; }

        /// <summary>
        /// 经验
        /// </summary>
        [MemoryPackOrder(5)]
        public long Exp { get; set; }

        /// <summary>
        /// 疲劳
        /// </summary>
        [MemoryPackOrder(6)]
        public long PiLao { get; set; }

        /// <summary>
        /// 职业
        /// </summary>
        [MemoryPackOrder(7)]
        public int Occ { get; set; }

        /// <summary>
        /// 职业
        /// </summary>
        [MemoryPackOrder(8)]
        public int OccTwo { get; set; }

        [MemoryPackOrder(9)]
        public int Combat { get; set; }

        [MemoryPackOrder(10)]
        public int RobotId { get; set; }

        [MemoryPackOrder(12)]
        public int Sp { get; set; }

        /// <summary>
        /// 活力
        /// </summary>
        [MemoryPackOrder(13)]
        public int Vitality { get; set; }

        [MemoryPackOrder(15)]
        public long RongYu { get; set; }

        [MemoryPackOrder(16)]
        public string UnionName { get; set; }

        [MemoryPackOrder(17)]
        public long UserId { get; set; }

        [MemoryPackOrder(18)]
        public List<KeyValuePair> GameSettingInfos { get; set; } = new();

        [MemoryPackOrder(19)]
        public List<int> MakeList { get; set; } = new();

        [MemoryPackOrder(20)]
        public List<int> CompleteGuideIds { get; set; } = new();

        [MemoryPackOrder(21)]
        public List<KeyValuePairInt> DayFubenTimes { get; set; } = new();

        [MemoryPackOrder(22)]
        public List<KeyValuePair> MonsterRevives { get; set; } = new();

        [MemoryPackOrder(23)]
        public List<int> TowerRewardIds { get; set; } = new();

        [MemoryPackOrder(24)]
        public List<int> ChouKaRewardIds { get; set; } = new();

        [MemoryPackOrder(25)]
        public List<int> XiuLianRewardIds { get; set; } = new();

        /// <summary>
        /// 购买过的神秘商品
        /// </summary>
        [MemoryPackOrder(26)]
        public List<KeyValuePairInt> MysteryItems { get; set; } = new();

        /// <summary>
        /// 已开启的宝箱记录
        /// </summary>
        [MemoryPackOrder(27)]
        public List<KeyValuePair> OpenChestList { get; set; } = new();

        [MemoryPackOrder(28)]
        public List<KeyValuePairInt> MakeIdList { get; set; } = new();

        /// <summary>
        /// 已通关的副本列表
        /// </summary>
        [MemoryPackOrder(29)]
        public List<FubenPassInfo> FubenPassList { get; set; } = new();

        /// <summary>
        /// 每日道具使用限制
        /// </summary>
        [MemoryPackOrder(30)]
        public List<KeyValuePairInt> DayItemUse { get; set; } = new();

        [MemoryPackOrder(31)]
        public List<int> HorseIds { get; set; } = new();

        /// <summary>
        /// 剧情副本每日刷新 global79
        /// </summary>
        [MemoryPackOrder(32)]
        public List<KeyValuePairInt> DayMonsters { get; set; } = new();

        /// <summary>
        /// 随机精灵每日刷新 global80
        /// </summary>
        [MemoryPackOrder(33)]
        public List<int> DayJingLing { get; set; } = new();

        [MemoryPackOrder(34)]
        public long JiaYuanFund { get; set; }

        [MemoryPackOrder(35)]
        public long JiaYuanExp { get; set; }

        [MemoryPackOrder(36)]
        public int JiaYuanLv { get; set; }

        [MemoryPackOrder(37)]
        public int BaoShiDu { get; set; }

        [MemoryPackOrder(38)]
        public List<KeyValuePair> FirstWinSelf { get; set; } = new();

        [MemoryPackOrder(39)]
        public long UnionZiJin { get; set; }

        /// <summary>
        /// 已领取的全服邮件
        /// </summary>
        [MemoryPackOrder(40)]
        public int ServerMailIdCur { get; set; }

        [MemoryPackOrder(41)]
        public List<int> DiamondGetWay { get; set; } = new();

        [MemoryPackOrder(42)]
        public string DemonName { get; set; }

        /// <summary>
        /// ini long都放在数值组件
        /// </summary>
        [MemoryPackOrder(43)]
        public List<int> PetMingRewards { get; set; } = new();

        [MemoryPackOrder(44)]
        public List<int> OpenJingHeIds { get; set; } = new();

        /// <summary>
        /// 赛季等级
        /// </summary>
        [MemoryPackOrder(45)]
        public int SeasonLevel { get; set; }

        /// <summary>
        /// 赛季经验
        /// </summary>
        [MemoryPackOrder(46)]
        public int SeasonExp { get; set; }

        /// <summary>
        /// 赛季币
        /// </summary>
        [MemoryPackOrder(47)]
        public long SeasonCoin { get; set; }

        [MemoryPackOrder(48)]
        public List<int> WelfareTaskRewards { get; set; } = new();

        [MemoryPackOrder(49)]
        public long CreateTime { get; set; }

        /// <summary>
        /// 投资
        /// </summary>
        [MemoryPackOrder(50)]
        public List<int> WelfareInvestList { get; set; } = new();

        [MemoryPackOrder(51)]
        public List<int> RechargeReward { get; set; } = new();

        /// <summary>
        /// 当前的能力id,客户端根据这个显示即可
        /// </summary>
        [MemoryPackOrder(52)]
        public List<int> UnionKeJiList { get; set; } = new();

        [MemoryPackOrder(53)]
        public List<int> PetExploreRewardIds { get; set; } = new();

        [MemoryPackOrder(54)]
        public List<int> PetHeXinExploreRewardIds { get; set; } = new();

        [MemoryPackOrder(55)]
        public string StallName { get; set; }

        [MemoryPackOrder(56)]
        public List<int> SingleRechargeIds { get; set; } = new();

        [MemoryPackOrder(57)]
        public List<int> SingleRewardIds { get; set; } = new();

        [MemoryPackOrder(58)]
        public List<int> ItemXiLianNumRewardIds { get; set; } = new();

        [MemoryPackOrder(59)]
        public List<int> DefeatedBossIds { get; set; } = new();

        [MemoryPackOrder(60)]
        public List<KeyValuePairInt> BuyStoreItems { get; set; } = new();

        [MemoryPackOrder(61)]
        public int TalentPoints { get; set; }

        [MemoryPackOrder(62)]
        public List<int> SeasonDonateRewardIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.AccInfoID = default;
            this.Name = default;
            this.Gold = default;
            this.Diamond = default;
            this.Lv = default;
            this.Exp = default;
            this.PiLao = default;
            this.Occ = default;
            this.OccTwo = default;
            this.Combat = default;
            this.RobotId = default;
            this.Sp = default;
            this.Vitality = default;
            this.RongYu = default;
            this.UnionName = default;
            this.UserId = default;
            this.GameSettingInfos.Clear();
            this.MakeList.Clear();
            this.CompleteGuideIds.Clear();
            this.DayFubenTimes.Clear();
            this.MonsterRevives.Clear();
            this.TowerRewardIds.Clear();
            this.ChouKaRewardIds.Clear();
            this.XiuLianRewardIds.Clear();
            this.MysteryItems.Clear();
            this.OpenChestList.Clear();
            this.MakeIdList.Clear();
            this.FubenPassList.Clear();
            this.DayItemUse.Clear();
            this.HorseIds.Clear();
            this.DayMonsters.Clear();
            this.DayJingLing.Clear();
            this.JiaYuanFund = default;
            this.JiaYuanExp = default;
            this.JiaYuanLv = default;
            this.BaoShiDu = default;
            this.FirstWinSelf.Clear();
            this.UnionZiJin = default;
            this.ServerMailIdCur = default;
            this.DiamondGetWay.Clear();
            this.DemonName = default;
            this.PetMingRewards.Clear();
            this.OpenJingHeIds.Clear();
            this.SeasonLevel = default;
            this.SeasonExp = default;
            this.SeasonCoin = default;
            this.WelfareTaskRewards.Clear();
            this.CreateTime = default;
            this.WelfareInvestList.Clear();
            this.RechargeReward.Clear();
            this.UnionKeJiList.Clear();
            this.PetExploreRewardIds.Clear();
            this.PetHeXinExploreRewardIds.Clear();
            this.StallName = default;
            this.SingleRechargeIds.Clear();
            this.SingleRewardIds.Clear();
            this.ItemXiLianNumRewardIds.Clear();
            this.DefeatedBossIds.Clear();
            this.BuyStoreItems.Clear();
            this.TalentPoints = default;
            this.SeasonDonateRewardIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RoleDataUpdate)]
    public partial class M2C_RoleDataUpdate : MessageObject, IMessage
    {
        public static M2C_RoleDataUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RoleDataUpdate), isFromPool) as M2C_RoleDataUpdate;
        }

        /// <summary>
        /// UserDataType
        /// </summary>
        [MemoryPackOrder(0)]
        public int UpdateType { get; set; }

        [MemoryPackOrder(1)]
        public string UpdateTypeValue { get; set; }

        [MemoryPackOrder(2)]
        public long UpdateValueLong { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UpdateType = default;
            this.UpdateTypeValue = default;
            this.UpdateValueLong = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RoleDataBroadcast)]
    public partial class M2C_RoleDataBroadcast : MessageObject, IMessage
    {
        public static M2C_RoleDataBroadcast Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RoleDataBroadcast), isFromPool) as M2C_RoleDataBroadcast;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// UserDataType
        /// </summary>
        [MemoryPackOrder(0)]
        public int UpdateType { get; set; }

        [MemoryPackOrder(1)]
        public string UpdateTypeValue { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UpdateType = default;
            this.UpdateTypeValue = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能列表
    [MemoryPackable]
    [Message(OuterMessage.SkillPro)]
    public partial class SkillPro : MessageObject
    {
        public static SkillPro Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SkillPro), isFromPool) as SkillPro;
        }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        [MemoryPackOrder(1)]
        public int SkillPosition { get; set; }

        /// <summary>
        /// 1技能 2道具
        /// </summary>
        [MemoryPackOrder(2)]
        public int SkillSetType { get; set; }

        /// <summary>
        /// 0 未学习  1已学习
        /// </summary>
        [MemoryPackOrder(3)]
        public int Actived { get; set; }

        /// <summary>
        /// 1职业技能 2装备技能 3天赋技能 4 精灵技能 5 套装技能
        /// </summary>
        [MemoryPackOrder(4)]
        public int SkillSource { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SkillID = default;
            this.SkillPosition = default;
            this.SkillSetType = default;
            this.Actived = default;
            this.SkillSource = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.FubenPassInfo)]
    public partial class FubenPassInfo : MessageObject
    {
        public static FubenPassInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(FubenPassInfo), isFromPool) as FubenPassInfo;
        }

        [MemoryPackOrder(0)]
        public int FubenId { get; set; }

        /// <summary>
        /// 1 difficulty普通 2 挑战  3困难
        /// </summary>
        [MemoryPackOrder(1)]
        public int Difficulty { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.FubenId = default;
            this.Difficulty = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_ActivityInfoRequest)]
    [ResponseType(nameof(A2C_ActivityInfoResponse))]
    public partial class C2A_ActivityInfoRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_ActivityInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_ActivityInfoRequest), isFromPool) as C2A_ActivityInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_ActivityInfoResponse)]
    public partial class A2C_ActivityInfoResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_ActivityInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_ActivityInfoResponse), isFromPool) as A2C_ActivityInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string ActivityContent { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ActivityContent = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_CommonSeasonBossInfoRequest)]
    [ResponseType(nameof(A2C_CommonSeasonBossInfoResponse))]
    public partial class C2A_CommonSeasonBossInfoRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_CommonSeasonBossInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_CommonSeasonBossInfoRequest), isFromPool) as C2A_CommonSeasonBossInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_CommonSeasonBossInfoResponse)]
    public partial class A2C_CommonSeasonBossInfoResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_CommonSeasonBossInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_CommonSeasonBossInfoResponse), isFromPool) as A2C_CommonSeasonBossInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string ActivityContent { get; set; }

        [MemoryPackOrder(1)]
        public int CommonSeasonBossLevel { get; set; }

        [MemoryPackOrder(2)]
        public int CommonSeasonBossExp { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ActivityContent = default;
            this.CommonSeasonBossLevel = default;
            this.CommonSeasonBossExp = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_FirstWinInfoRequest)]
    [ResponseType(nameof(A2C_FirstWinInfoResponse))]
    public partial class C2A_FirstWinInfoRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_FirstWinInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_FirstWinInfoRequest), isFromPool) as C2A_FirstWinInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_FirstWinInfoResponse)]
    public partial class A2C_FirstWinInfoResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_FirstWinInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_FirstWinInfoResponse), isFromPool) as A2C_FirstWinInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<FirstWinInfo> FirstWinInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FirstWinInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_MysteryListRequest)]
    [ResponseType(nameof(A2C_MysteryListResponse))]
    public partial class C2A_MysteryListRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_MysteryListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_MysteryListRequest), isFromPool) as C2A_MysteryListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_MysteryListResponse)]
    public partial class A2C_MysteryListResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_MysteryListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_MysteryListResponse), isFromPool) as A2C_MysteryListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_PetMingChanChuRequest)]
    [ResponseType(nameof(A2C_PetMingChanChuResponse))]
    public partial class C2A_PetMingChanChuRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_PetMingChanChuRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_PetMingChanChuRequest), isFromPool) as C2A_PetMingChanChuRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_PetMingChanChuResponse)]
    public partial class A2C_PetMingChanChuResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_PetMingChanChuResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_PetMingChanChuResponse), isFromPool) as A2C_PetMingChanChuResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2A_PetMingListRequest)]
    [ResponseType(nameof(A2C_PetMingListResponse))]
    public partial class C2A_PetMingListRequest : MessageObject, IActivityActorRequest
    {
        public static C2A_PetMingListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2A_PetMingListRequest), isFromPool) as C2A_PetMingListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.A2C_PetMingListResponse)]
    public partial class A2C_PetMingListResponse : MessageObject, IActivityActorResponse
    {
        public static A2C_PetMingListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(A2C_PetMingListResponse), isFromPool) as A2C_PetMingListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long ChanChu { get; set; }

        [MemoryPackOrder(1)]
        public List<KeyValuePairInt> PetMineExtend { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<PetMingPlayerInfo> PetMingPlayerInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ChanChu = default;
            this.PetMineExtend.Clear();
            this.PetMingPlayerInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RolePetInfo)]
    public partial class RolePetInfo : MessageObject
    {
        public static RolePetInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RolePetInfo), isFromPool) as RolePetInfo;
        }

        [MemoryPackOrder(0)]
        public long Id { get; set; }

        /// <summary>
        /// /0休息 1出战 2散步 3仓库
        /// </summary>
        [MemoryPackOrder(1)]
        public int PetStatus { get; set; }

        [MemoryPackOrder(2)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(3)]
        public int PetLv { get; set; }

        [MemoryPackOrder(4)]
        public int Star { get; set; }

        [MemoryPackOrder(6)]
        public int PetExp { get; set; }

        [MemoryPackOrder(7)]
        public string PetName { get; set; }

        [MemoryPackOrder(8)]
        public int BabyType { get; set; }

        [MemoryPackOrder(9)]
        public int AddPropretyNum { get; set; }

        [MemoryPackOrder(10)]
        public string AddPropretyValue { get; set; }

        [MemoryPackOrder(11)]
        public int PetPingFen { get; set; }

        [MemoryPackOrder(12)]
        public int ZiZhi_Hp { get; set; }

        [MemoryPackOrder(13)]
        public int ZiZhi_Act { get; set; }

        [MemoryPackOrder(14)]
        public int ZiZhi_MageAct { get; set; }

        [MemoryPackOrder(15)]
        public int ZiZhi_Def { get; set; }

        [MemoryPackOrder(16)]
        public int ZiZhi_Adf { get; set; }

        [MemoryPackOrder(17)]
        public int ZiZhi_ActSpeed { get; set; }

        [MemoryPackOrder(18)]
        public float ZiZhi_ChengZhang { get; set; }

        [MemoryPackOrder(19)]
        public List<int> PetSkill { get; set; } = new();

        [MemoryPackOrder(20)]
        public int EquipID_1 { get; set; }

        [MemoryPackOrder(21)]
        public string EquipIDHide_1 { get; set; }

        [MemoryPackOrder(22)]
        public int EquipID_2 { get; set; }

        [MemoryPackOrder(23)]
        public string EquipIDHide_2 { get; set; }

        [MemoryPackOrder(24)]
        public int EquipID_3 { get; set; }

        [MemoryPackOrder(25)]
        public string EquipIDHide_3 { get; set; }

        [MemoryPackOrder(29)]
        public List<int> Ks { get; set; } = new();

        [MemoryPackOrder(30)]
        public List<long> Vs { get; set; } = new();

        [MemoryPackOrder(31)]
        public int RoleCamp { get; set; }

        [MemoryPackOrder(32)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(33)]
        public int SkinId { get; set; }

        [MemoryPackOrder(34)]
        public List<long> PetHeXinList { get; set; } = new();

        /// <summary>
        /// 0 未进化  1 可进化  2 已进化
        /// </summary>
        [MemoryPackOrder(37)]
        public int UpStageStatus { get; set; }

        /// <summary>
        /// 0-3
        /// </summary>
        [MemoryPackOrder(38)]
        public int ShouHuPos { get; set; }

        /// <summary>
        /// /装备锁 宠物锁 功能 npc打开
        /// </summary>
        [MemoryPackOrder(39)]
        public bool IsProtect { get; set; }

        /// <summary>
        /// 宠物装备
        /// </summary>
        [MemoryPackOrder(40)]
        public List<long> PetEquipList { get; set; } = new();

        /// <summary>
        /// 只能锁定一个技能
        /// </summary>
        [MemoryPackOrder(41)]
        public List<int> LockSkill { get; set; } = new();

        [MemoryPackOrder(42)]
        public int Luckly { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.PetStatus = default;
            this.ConfigId = default;
            this.PetLv = default;
            this.Star = default;
            this.PetExp = default;
            this.PetName = default;
            this.BabyType = default;
            this.AddPropretyNum = default;
            this.AddPropretyValue = default;
            this.PetPingFen = default;
            this.ZiZhi_Hp = default;
            this.ZiZhi_Act = default;
            this.ZiZhi_MageAct = default;
            this.ZiZhi_Def = default;
            this.ZiZhi_Adf = default;
            this.ZiZhi_ActSpeed = default;
            this.ZiZhi_ChengZhang = default;
            this.PetSkill.Clear();
            this.EquipID_1 = default;
            this.EquipIDHide_1 = default;
            this.EquipID_2 = default;
            this.EquipIDHide_2 = default;
            this.EquipID_3 = default;
            this.EquipIDHide_3 = default;
            this.Ks.Clear();
            this.Vs.Clear();
            this.RoleCamp = default;
            this.PlayerName = default;
            this.SkinId = default;
            this.PetHeXinList.Clear();
            this.UpStageStatus = default;
            this.ShouHuPos = default;
            this.IsProtect = default;
            this.PetEquipList.Clear();
            this.LockSkill.Clear();
            this.Luckly = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetFubenInfo)]
    public partial class PetFubenInfo : MessageObject
    {
        public static PetFubenInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetFubenInfo), isFromPool) as PetFubenInfo;
        }

        [MemoryPackOrder(0)]
        public int PetFubenId { get; set; }

        [MemoryPackOrder(1)]
        public int Star { get; set; }

        [MemoryPackOrder(2)]
        public int Reward { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetFubenId = default;
            this.Star = default;
            this.Reward = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMingRecord)]
    public partial class PetMingRecord : MessageObject
    {
        public static PetMingRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMingRecord), isFromPool) as PetMingRecord;
        }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        [MemoryPackOrder(1)]
        public long Time { get; set; }

        [MemoryPackOrder(2)]
        public int MineType { get; set; }

        [MemoryPackOrder(3)]
        public int Position { get; set; }

        [MemoryPackOrder(4)]
        public string WinPlayer { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitID = default;
            this.Time = default;
            this.MineType = default;
            this.Position = default;
            this.WinPlayer = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物更新
    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetBagUpdate)]
    public partial class M2C_RolePetBagUpdate : MessageObject, IMessage
    {
        public static M2C_RolePetBagUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetBagUpdate), isFromPool) as M2C_RolePetBagUpdate;
        }

        [MemoryPackOrder(0)]
        public List<RolePetInfo> RolePetBag { get; set; } = new();

        /// <summary>
        /// 1新增  2删除
        /// </summary>
        [MemoryPackOrder(1)]
        public int UpdateMode { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RolePetBag.Clear();
            this.UpdateMode = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物更新
    [MemoryPackable]
    [Message(OuterMessage.M2C_PetListMessage)]
    public partial class M2C_PetListMessage : MessageObject, IMessage
    {
        public static M2C_PetListMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetListMessage), isFromPool) as M2C_PetListMessage;
        }

        [MemoryPackOrder(0)]
        public List<RolePetInfo> PetList { get; set; } = new();

        [MemoryPackOrder(1)]
        public long RemovePetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetList.Clear();
            this.RemovePetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物更新
    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetUpdate)]
    public partial class M2C_RolePetUpdate : MessageObject, IMessage
    {
        public static M2C_RolePetUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetUpdate), isFromPool) as M2C_RolePetUpdate;
        }

        [MemoryPackOrder(0)]
        public List<RolePetInfo> PetInfoAdd { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<RolePetInfo> PetInfoUpdate { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<RolePetInfo> PetInfoDelete { get; set; } = new();

        /// <summary>
        /// 1新增 2从背包取出
        /// </summary>
        [MemoryPackOrder(3)]
        public int GetWay { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetInfoAdd.Clear();
            this.PetInfoUpdate.Clear();
            this.PetInfoDelete.Clear();
            this.GetWay = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetDataUpdate)]
    public partial class M2C_PetDataUpdate : MessageObject, IMessage
    {
        public static M2C_PetDataUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetDataUpdate), isFromPool) as M2C_PetDataUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long PetId { get; set; }

        /// <summary>
        /// 1表示名称  2表示经验 3表示等级 4表示金币
        /// </summary>
        [MemoryPackOrder(1)]
        public int UpdateType { get; set; }

        [MemoryPackOrder(2)]
        public string UpdateTypeValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetId = default;
            this.UpdateType = default;
            this.UpdateTypeValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetDataBroadcast)]
    public partial class M2C_PetDataBroadcast : MessageObject, IMessage
    {
        public static M2C_PetDataBroadcast Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetDataBroadcast), isFromPool) as M2C_PetDataBroadcast;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long PetId { get; set; }

        /// <summary>
        /// 1表示名称  2表示经验 3表示等级 4表示金币
        /// </summary>
        [MemoryPackOrder(1)]
        public int UpdateType { get; set; }

        [MemoryPackOrder(2)]
        public string UpdateTypeValue { get; set; }

        [MemoryPackOrder(3)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetId = default;
            this.UpdateType = default;
            this.UpdateTypeValue = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 道具[装备]更新
    [MemoryPackable]
    [Message(OuterMessage.M2C_RoleBagUpdate)]
    public partial class M2C_RoleBagUpdate : MessageObject, IMessage
    {
        public static M2C_RoleBagUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RoleBagUpdate), isFromPool) as M2C_RoleBagUpdate;
        }

        [MemoryPackOrder(0)]
        public List<ItemInfoProto> BagInfoAdd { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<ItemInfoProto> BagInfoUpdate { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<ItemInfoProto> BagInfoDelete { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.BagInfoAdd.Clear();
            this.BagInfoUpdate.Clear();
            this.BagInfoDelete.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_BagInitRequest)]
    [ResponseType(nameof(M2C_BagInitResponse))]
    public partial class C2M_BagInitRequest : MessageObject, ILocationRequest
    {
        public static C2M_BagInitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BagInitRequest), isFromPool) as C2M_BagInitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BagInitResponse)]
    public partial class M2C_BagInitResponse : MessageObject, ILocationResponse
    {
        public static M2C_BagInitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BagInitResponse), isFromPool) as M2C_BagInitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<ItemInfoProto> BagInfos { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<int> QiangHuaLevel { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<int> QiangHuaFails { get; set; } = new();

        /// <summary>
        /// int32 BagAddedCell = 4;
        /// </summary>
        [MemoryPackOrder(4)]
        public List<int> WarehouseAddedCell { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<int> FashionActiveIds { get; set; } = new();

        [MemoryPackOrder(6)]
        public List<int> FashionEquipList { get; set; } = new();

        [MemoryPackOrder(7)]
        public int SeasonJingHePlan { get; set; }

        [MemoryPackOrder(8)]
        public List<int> AdditionalCellNum { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.BagInfos.Clear();
            this.QiangHuaLevel.Clear();
            this.QiangHuaFails.Clear();
            this.WarehouseAddedCell.Clear();
            this.FashionActiveIds.Clear();
            this.FashionEquipList.Clear();
            this.SeasonJingHePlan = default;
            this.AdditionalCellNum.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 开启宝箱
    [MemoryPackable]
    [Message(OuterMessage.C2M_OpenBoxRequest)]
    [ResponseType(nameof(M2C_OpenBoxResponse))]
    public partial class C2M_OpenBoxRequest : MessageObject, ILocationRequest
    {
        public static C2M_OpenBoxRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_OpenBoxRequest), isFromPool) as C2M_OpenBoxRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_OpenBoxResponse)]
    public partial class M2C_OpenBoxResponse : MessageObject, ILocationResponse
    {
        public static M2C_OpenBoxResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_OpenBoxResponse), isFromPool) as M2C_OpenBoxResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 拾取道具
    [MemoryPackable]
    [Message(OuterMessage.C2M_PickItemRequest)]
    [ResponseType(nameof(M2C_PickItemResponse))]
    public partial class C2M_PickItemRequest : MessageObject, ILocationRequest
    {
        public static C2M_PickItemRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PickItemRequest), isFromPool) as C2M_PickItemRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public List<long> ItemIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ItemIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PickItemResponse)]
    public partial class M2C_PickItemResponse : MessageObject, ILocationResponse
    {
        public static M2C_PickItemResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PickItemResponse), isFromPool) as M2C_PickItemResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 不存在的掉落
        /// </summary>
        [MemoryPackOrder(0)]
        public List<long> RemoveIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RemoveIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 装备增幅
    [MemoryPackable]
    [Message(OuterMessage.C2M_EquipmentIncreaseRequest)]
    [ResponseType(nameof(M2C_EquipmentIncreaseResponse))]
    public partial class C2M_EquipmentIncreaseRequest : MessageObject, ILocationRequest
    {
        public static C2M_EquipmentIncreaseRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_EquipmentIncreaseRequest), isFromPool) as C2M_EquipmentIncreaseRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 待增幅的装备
        /// </summary>
        [MemoryPackOrder(0)]
        public ItemInfoProto EquipmentBagInfo { get; set; }

        /// <summary>
        /// 所使用的卷轴
        /// </summary>
        [MemoryPackOrder(1)]
        public ItemInfoProto ReelBagInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.EquipmentBagInfo = default;
            this.ReelBagInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_EquipmentIncreaseResponse)]
    public partial class M2C_EquipmentIncreaseResponse : MessageObject, ILocationResponse
    {
        public static M2C_EquipmentIncreaseResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_EquipmentIncreaseResponse), isFromPool) as M2C_EquipmentIncreaseResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FashionActiveRequest)]
    [ResponseType(nameof(M2C_FashionActiveResponse))]
    public partial class C2M_FashionActiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_FashionActiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FashionActiveRequest), isFromPool) as C2M_FashionActiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int FashionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.FashionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FashionActiveResponse)]
    public partial class M2C_FashionActiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_FashionActiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FashionActiveResponse), isFromPool) as M2C_FashionActiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FashionWearRequest)]
    [ResponseType(nameof(M2C_FashionWearResponse))]
    public partial class C2M_FashionWearRequest : MessageObject, ILocationRequest
    {
        public static C2M_FashionWearRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FashionWearRequest), isFromPool) as C2M_FashionWearRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int FashionId { get; set; }

        /// <summary>
        /// 1穿戴 2卸下
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperatateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.FashionId = default;
            this.OperatateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FashionWearResponse)]
    public partial class M2C_FashionWearResponse : MessageObject, ILocationResponse
    {
        public static M2C_FashionWearResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FashionWearResponse), isFromPool) as M2C_FashionWearResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宝石一键合成
    [MemoryPackable]
    [Message(OuterMessage.C2M_GemHeChengQuickRequest)]
    [ResponseType(nameof(M2C_GemHeChengQuickResponse))]
    public partial class C2M_GemHeChengQuickRequest : MessageObject, ILocationRequest
    {
        public static C2M_GemHeChengQuickRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GemHeChengQuickRequest), isFromPool) as C2M_GemHeChengQuickRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int LocType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.LocType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GemHeChengQuickResponse)]
    public partial class M2C_GemHeChengQuickResponse : MessageObject, ILocationResponse
    {
        public static M2C_GemHeChengQuickResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GemHeChengQuickResponse), isFromPool) as M2C_GemHeChengQuickResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemBuyCellRequest)]
    [ResponseType(nameof(M2C_ItemBuyCellResponse))]
    public partial class C2M_ItemBuyCellRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemBuyCellRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemBuyCellRequest), isFromPool) as C2M_ItemBuyCellRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// ItemLocType
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemBuyCellResponse)]
    public partial class M2C_ItemBuyCellResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemBuyCellResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemBuyCellResponse), isFromPool) as M2C_ItemBuyCellResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// int32 BagAddedCell = 1;
        /// </summary>
        [MemoryPackOrder(1)]
        public List<int> WarehouseAddedCell { get; set; } = new();

        [MemoryPackOrder(2)]
        public string GetItem { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.WarehouseAddedCell.Clear();
            this.GetItem = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RoleOpenCangKuRequest)]
    [ResponseType(nameof(M2C_RoleOpenCangKuResponse))]
    public partial class C2M_RoleOpenCangKuRequest : MessageObject, ILocationRequest
    {
        public static C2M_RoleOpenCangKuRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RoleOpenCangKuRequest), isFromPool) as C2M_RoleOpenCangKuRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RoleOpenCangKuResponse)]
    public partial class M2C_RoleOpenCangKuResponse : MessageObject, ILocationResponse
    {
        public static M2C_RoleOpenCangKuResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RoleOpenCangKuResponse), isFromPool) as M2C_RoleOpenCangKuResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 销毁装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemDestoryRequest)]
    [ResponseType(nameof(M2C_ItemDestoryResponse))]
    public partial class C2M_ItemDestoryRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemDestoryRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemDestoryRequest), isFromPool) as C2M_ItemDestoryRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;
            this.OperateBagID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemDestoryResponse)]
    public partial class M2C_ItemDestoryResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemDestoryResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemDestoryResponse), isFromPool) as M2C_ItemDestoryResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 猎人穿戴装备特殊处理
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemEquipIndexRequest)]
    [ResponseType(nameof(M2C_ItemEquipIndexResponse))]
    public partial class C2M_ItemEquipIndexRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemEquipIndexRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemEquipIndexRequest), isFromPool) as C2M_ItemEquipIndexRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int EquipIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.EquipIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemEquipIndexResponse)]
    public partial class M2C_ItemEquipIndexResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemEquipIndexResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemEquipIndexResponse), isFromPool) as M2C_ItemEquipIndexResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 附魔属性
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemFumoProRequest)]
    [ResponseType(nameof(M2C_ItemFumoProResponse))]
    public partial class C2M_ItemFumoProRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemFumoProRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemFumoProRequest), isFromPool) as C2M_ItemFumoProRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemFumoProResponse)]
    public partial class M2C_ItemFumoProResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemFumoProResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemFumoProResponse), isFromPool) as M2C_ItemFumoProResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 附魔使用
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemFumoUseRequest)]
    [ResponseType(nameof(M2C_ItemFumoUseResponse))]
    public partial class C2M_ItemFumoUseRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemFumoUseRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemFumoUseRequest), isFromPool) as C2M_ItemFumoUseRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(2)]
        public List<HideProList> FuMoProList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.FuMoProList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemFumoUseResponse)]
    public partial class M2C_ItemFumoUseResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemFumoUseResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemFumoUseResponse), isFromPool) as M2C_ItemFumoUseResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 回收装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemHuiShouRequest)]
    [ResponseType(nameof(M2C_ItemHuiShouResponse))]
    public partial class C2M_ItemHuiShouRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemHuiShouRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemHuiShouRequest), isFromPool) as C2M_ItemHuiShouRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public List<long> OperateBagID { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemHuiShouResponse)]
    public partial class M2C_ItemHuiShouResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemHuiShouResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemHuiShouResponse), isFromPool) as M2C_ItemHuiShouResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 增幅转移
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemIncreaseTransferRequest)]
    [ResponseType(nameof(M2C_ItemIncreaseTransferResponse))]
    public partial class C2M_ItemIncreaseTransferRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemIncreaseTransferRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemIncreaseTransferRequest), isFromPool) as C2M_ItemIncreaseTransferRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OperateBagID_1 { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID_2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID_1 = default;
            this.OperateBagID_2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemIncreaseTransferResponse)]
    public partial class M2C_ItemIncreaseTransferResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemIncreaseTransferResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemIncreaseTransferResponse), isFromPool) as M2C_ItemIncreaseTransferResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 装备传承
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemInheritRequest)]
    [ResponseType(nameof(M2C_ItemInheritResponse))]
    public partial class C2M_ItemInheritRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemInheritRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemInheritRequest), isFromPool) as C2M_ItemInheritRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OperateBagID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemInheritResponse)]
    public partial class M2C_ItemInheritResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemInheritResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemInheritResponse), isFromPool) as M2C_ItemInheritResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public List<int> InheritSkills { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.InheritSkills.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 传承确认
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemInheritSelectRequest)]
    [ResponseType(nameof(M2C_ItemInheritSelectResponse))]
    public partial class C2M_ItemInheritSelectRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemInheritSelectRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemInheritSelectRequest), isFromPool) as C2M_ItemInheritSelectRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(1)]
        public List<int> InheritSkills { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID = default;
            this.InheritSkills.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemInheritSelectResponse)]
    public partial class M2C_ItemInheritSelectResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemInheritSelectResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemInheritSelectResponse), isFromPool) as M2C_ItemInheritSelectResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 装备熔炼
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemMeltingRequest)]
    [ResponseType(nameof(M2C_ItemMeltingResponse))]
    public partial class C2M_ItemMeltingRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemMeltingRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemMeltingRequest), isFromPool) as C2M_ItemMeltingRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public List<long> OperateBagID { get; set; } = new();

        [MemoryPackOrder(2)]
        public int MakeType { get; set; }

        [MemoryPackOrder(3)]
        public int Plan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID.Clear();
            this.MakeType = default;
            this.Plan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemMeltingResponse)]
    public partial class M2C_ItemMeltingResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemMeltingResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemMeltingResponse), isFromPool) as M2C_ItemMeltingResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 一键盘出售
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemOneSellRequest)]
    [ResponseType(nameof(M2C_ItemOneSellResponse))]
    public partial class C2M_ItemOneSellRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemOneSellRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemOneSellRequest), isFromPool) as C2M_ItemOneSellRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 操作类型 1
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public List<long> BagInfoIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.BagInfoIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemOneSellResponse)]
    public partial class M2C_ItemOneSellResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemOneSellResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemOneSellResponse), isFromPool) as M2C_ItemOneSellResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemOperateGemRequest)]
    [ResponseType(nameof(M2C_ItemOperateGemResponse))]
    public partial class C2M_ItemOperateGemRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemOperateGemRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemOperateGemRequest), isFromPool) as C2M_ItemOperateGemRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 操作类型 9 装备宝石 10卸下宝石
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        /// <summary>
        /// 类型参数[穿戴饰品需要传位置]
        /// </summary>
        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemOperateGemResponse)]
    public partial class M2C_ItemOperateGemResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemOperateGemResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemOperateGemResponse), isFromPool) as M2C_ItemOperateGemResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 穿戴装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemOperateRequest)]
    [ResponseType(nameof(M2C_ItemOperateResponse))]
    public partial class C2M_ItemOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemOperateRequest), isFromPool) as C2M_ItemOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 操作类型 1 背包使用  2 背包丢弃  3装备穿戴
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        /// <summary>
        /// 类型参数[穿戴饰品需要传位置]
        /// </summary>
        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemOperateResponse)]
    public partial class M2C_ItemOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemOperateResponse), isFromPool) as M2C_ItemOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public string OperatePar { get; set; }

        [MemoryPackOrder(1)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OperatePar = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 猎人穿戴装备特殊处理
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemOperateWearRequest)]
    [ResponseType(nameof(M2C_ItemOperateWearResponse))]
    public partial class C2M_ItemOperateWearRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemOperateWearRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemOperateWearRequest), isFromPool) as C2M_ItemOperateWearRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 操作类型  3装备穿戴  4
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        /// <summary>
        /// 类型参数[穿戴饰品需要传位置]
        /// </summary>
        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemOperateWearResponse)]
    public partial class M2C_ItemOperateWearResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemOperateWearResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemOperateWearResponse), isFromPool) as M2C_ItemOperateWearResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 装备锁定
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemProtectRequest)]
    [ResponseType(nameof(M2C_ItemProtectResponse))]
    public partial class C2M_ItemProtectRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemProtectRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemProtectRequest), isFromPool) as C2M_ItemProtectRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(1)]
        public bool IsProtect { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID = default;
            this.IsProtect = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemProtectResponse)]
    public partial class M2C_ItemProtectResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemProtectResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemProtectResponse), isFromPool) as M2C_ItemProtectResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 强化槽位
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemQiangHuaRequest)]
    [ResponseType(nameof(M2C_ItemQiangHuaResponse))]
    public partial class C2M_ItemQiangHuaRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemQiangHuaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemQiangHuaRequest), isFromPool) as C2M_ItemQiangHuaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int WeiZhi { get; set; }

        [MemoryPackOrder(1)]
        public bool UseLucky { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.WeiZhi = default;
            this.UseLucky = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemQiangHuaResponse)]
    public partial class M2C_ItemQiangHuaResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemQiangHuaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemQiangHuaResponse), isFromPool) as M2C_ItemQiangHuaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int QiangHuaLevel { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.QiangHuaLevel = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 一键存放
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemQuickPutRequest)]
    [ResponseType(nameof(M2C_ItemQuickPutResponse))]
    public partial class C2M_ItemQuickPutRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemQuickPutRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemQuickPutRequest), isFromPool) as C2M_ItemQuickPutRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HorseId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HorseId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemQuickPutResponse)]
    public partial class M2C_ItemQuickPutResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemQuickPutResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemQuickPutResponse), isFromPool) as M2C_ItemQuickPutResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 物品排序[通知服务器排序，暂时不需要返回]
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemSortRequest)]
    public partial class C2M_ItemSortRequest : MessageObject, ILocationMessage
    {
        public static C2M_ItemSortRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemSortRequest), isFromPool) as C2M_ItemSortRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemSplitRequest)]
    [ResponseType(nameof(M2C_ItemSplitResponse))]
    public partial class C2M_ItemSplitRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemSplitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemSplitRequest), isFromPool) as C2M_ItemSplitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        /// <summary>
        /// 拆分数量
        /// </summary>
        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemSplitResponse)]
    public partial class M2C_ItemSplitResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemSplitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemSplitResponse), isFromPool) as M2C_ItemSplitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 藏宝图开启
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemTreasureOpenRequest)]
    [ResponseType(nameof(M2C_ItemTreasureOpenResponse))]
    public partial class C2M_ItemTreasureOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemTreasureOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemTreasureOpenRequest), isFromPool) as C2M_ItemTreasureOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemTreasureOpenResponse)]
    public partial class M2C_ItemTreasureOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemTreasureOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemTreasureOpenResponse), isFromPool) as M2C_ItemTreasureOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public string OperatePar { get; set; }

        [MemoryPackOrder(4)]
        public RewardItem ReardItem { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OperatePar = default;
            this.ReardItem = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SkillInfo)]
    public partial class SkillInfo : MessageObject
    {
        public static SkillInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SkillInfo), isFromPool) as SkillInfo;
        }

        [MemoryPackOrder(1)]
        public long TargetID { get; set; }

        [MemoryPackOrder(2)]
        public int TargetAngle { get; set; }

        /// <summary>
        /// 真实技能
        /// </summary>
        [MemoryPackOrder(4)]
        public int WeaponSkillID { get; set; }

        [MemoryPackOrder(5)]
        public float PosX { get; set; }

        [MemoryPackOrder(6)]
        public float PosY { get; set; }

        [MemoryPackOrder(7)]
        public float PosZ { get; set; }

        [MemoryPackOrder(10)]
        public long SkillBeginTime { get; set; }

        [MemoryPackOrder(11)]
        public long SkillEndTime { get; set; }

        [MemoryPackOrder(12)]
        public float SingValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.TargetID = default;
            this.TargetAngle = default;
            this.WeaponSkillID = default;
            this.PosX = default;
            this.PosY = default;
            this.PosZ = default;
            this.SkillBeginTime = default;
            this.SkillEndTime = default;
            this.SingValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitNumericListUpdate)]
    public partial class M2C_UnitNumericListUpdate : MessageObject, IMessage
    {
        public static M2C_UnitNumericListUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitNumericListUpdate), isFromPool) as M2C_UnitNumericListUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        [MemoryPackOrder(1)]
        public List<int> Ks { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<long> Vs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.UnitID = default;
            this.Ks.Clear();
            this.Vs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_UserInfoInitRequest)]
    [ResponseType(nameof(M2C_UserInfoInitResponse))]
    public partial class C2M_UserInfoInitRequest : MessageObject, ILocationRequest
    {
        public static C2M_UserInfoInitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UserInfoInitRequest), isFromPool) as C2M_UserInfoInitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UserInfoInitResponse)]
    public partial class M2C_UserInfoInitResponse : MessageObject, ILocationResponse
    {
        public static M2C_UserInfoInitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UserInfoInitResponse), isFromPool) as M2C_UserInfoInitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public UserInfoProto UserInfoProto { get; set; }

        [MemoryPackOrder(2)]
        public List<KeyValuePair> ReddontList { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<KeyValuePairInt> TreasureInfo { get; set; } = new();

        [MemoryPackOrder(4)]
        public List<ShouJiChapterInfo> ShouJiChapterInfos { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<KeyValuePairInt> TitleList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.UserInfoProto = default;
            this.ReddontList.Clear();
            this.TreasureInfo.Clear();
            this.ShouJiChapterInfos.Clear();
            this.TitleList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.FriendInfo)]
    public partial class FriendInfo : MessageObject
    {
        public static FriendInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(FriendInfo), isFromPool) as FriendInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public int PlayerLevel { get; set; }

        [MemoryPackOrder(2)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(3)]
        public long OnLineTime { get; set; }

        /// <summary>
        /// 离线聊天
        /// </summary>
        [MemoryPackOrder(4)]
        public List<string> ChatMsgList { get; set; } = new();

        [MemoryPackOrder(5)]
        public int Occ { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.PlayerLevel = default;
            this.PlayerName = default;
            this.OnLineTime = default;
            this.ChatMsgList.Clear();
            this.Occ = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 好友申请回复
    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendApplyReplyRequest)]
    [ResponseType(nameof(F2C_FriendApplyReplyResponse))]
    public partial class C2F_FriendApplyReplyRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendApplyReplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendApplyReplyRequest), isFromPool) as C2F_FriendApplyReplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long FriendID { get; set; }

        [MemoryPackOrder(2)]
        public int ReplyCode { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.FriendID = default;
            this.ReplyCode = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendApplyReplyResponse)]
    public partial class F2C_FriendApplyReplyResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendApplyReplyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendApplyReplyResponse), isFromPool) as F2C_FriendApplyReplyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 黑名单
    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendBlacklistRequest)]
    [ResponseType(nameof(F2C_FriendBlacklistResponse))]
    public partial class C2F_FriendBlacklistRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendBlacklistRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendBlacklistRequest), isFromPool) as C2F_FriendBlacklistRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 添加  2移除
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public long FriendId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;
            this.UnitId = default;
            this.FriendId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendBlacklistResponse)]
    public partial class F2C_FriendBlacklistResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendBlacklistResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendBlacklistResponse), isFromPool) as F2C_FriendBlacklistResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 好友申请
    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendApplyRequest)]
    [ResponseType(nameof(F2C_FriendApplyResponse))]
    public partial class C2F_FriendApplyRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendApplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendApplyRequest), isFromPool) as C2F_FriendApplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(0)]
        public FriendInfo FriendInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.FriendInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendApplyResponse)]
    public partial class F2C_FriendApplyResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendApplyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendApplyResponse), isFromPool) as F2C_FriendApplyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendChatRead)]
    [ResponseType(nameof(F2C_FriendChatRead))]
    public partial class C2F_FriendChatRead : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendChatRead Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendChatRead), isFromPool) as C2F_FriendChatRead;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long FriendID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.FriendID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendChatRead)]
    public partial class F2C_FriendChatRead : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendChatRead Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendChatRead), isFromPool) as F2C_FriendChatRead;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 好友删除
    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendDeleteRequest)]
    [ResponseType(nameof(F2C_FriendDeleteResponse))]
    public partial class C2F_FriendDeleteRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendDeleteRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendDeleteRequest), isFromPool) as C2F_FriendDeleteRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long FriendID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.FriendID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendDeleteResponse)]
    public partial class F2C_FriendDeleteResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendDeleteResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendDeleteResponse), isFromPool) as F2C_FriendDeleteResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 好友列表
    [MemoryPackable]
    [Message(OuterMessage.C2F_FriendInfoRequest)]
    [ResponseType(nameof(F2C_FriendInfoResponse))]
    public partial class C2F_FriendInfoRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_FriendInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_FriendInfoRequest), isFromPool) as C2F_FriendInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_FriendInfoResponse)]
    public partial class F2C_FriendInfoResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_FriendInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_FriendInfoResponse), isFromPool) as F2C_FriendInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(1)]
        public List<FriendInfo> FriendList { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<FriendInfo> ApplyList { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<FriendInfo> Blacklist { get; set; } = new();

        [MemoryPackOrder(4)]
        public List<ChatInfo> FriendChats { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FriendList.Clear();
            this.ApplyList.Clear();
            this.Blacklist.Clear();
            this.FriendChats.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2F_WatchPlayerRequest)]
    [ResponseType(nameof(F2C_WatchPlayerResponse))]
    public partial class C2F_WatchPlayerRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_WatchPlayerRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_WatchPlayerRequest), isFromPool) as C2F_WatchPlayerRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        /// <summary>
        /// 0 表示全部  1 表示只请求名字显示 2 队伍Id
        /// </summary>
        [MemoryPackOrder(1)]
        public int WatchType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;
            this.WatchType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_WatchPlayerResponse)]
    public partial class F2C_WatchPlayerResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_WatchPlayerResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_WatchPlayerResponse), isFromPool) as F2C_WatchPlayerResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string Name { get; set; }

        [MemoryPackOrder(1)]
        public int Lv { get; set; }

        /// <summary>
        /// 装备
        /// </summary>
        [MemoryPackOrder(2)]
        public List<ItemInfoProto> EquipList { get; set; } = new();

        [MemoryPackOrder(3)]
        public long TeamId { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(6)]
        public List<RolePetInfo> RolePetInfos { get; set; } = new();

        [MemoryPackOrder(7)]
        public List<KeyValuePair> PetSkinList { get; set; } = new();

        [MemoryPackOrder(8)]
        public List<ItemInfoProto> PetHeXinList { get; set; } = new();

        [MemoryPackOrder(10)]
        public List<int> Ks { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<long> Vs { get; set; } = new();

        [MemoryPackOrder(12)]
        public List<int> FashionIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Name = default;
            this.Lv = default;
            this.EquipList.Clear();
            this.TeamId = default;
            this.Occ = default;
            this.RolePetInfos.Clear();
            this.PetSkinList.Clear();
            this.PetHeXinList.Clear();
            this.Ks.Clear();
            this.Vs.Clear();
            this.FashionIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ItemXiLianResult)]
    public partial class ItemXiLianResult : MessageObject
    {
        public static ItemXiLianResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ItemXiLianResult), isFromPool) as ItemXiLianResult;
        }

        [MemoryPackOrder(0)]
        public List<HideProList> XiLianHideProLists { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<int> HideSkillLists { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<HideProList> XiLianHideTeShuProLists { get; set; } = new();

        [MemoryPackOrder(3)]
        public long ChangeCombat { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.XiLianHideProLists.Clear();
            this.HideSkillLists.Clear();
            this.XiLianHideTeShuProLists.Clear();
            this.ChangeCombat = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FashionUpdate)]
    public partial class M2C_FashionUpdate : MessageObject, IMessage
    {
        public static M2C_FashionUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FashionUpdate), isFromPool) as M2C_FashionUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        [MemoryPackOrder(1)]
        public List<int> FashionEquipList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitID = default;
            this.FashionEquipList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillCmd)]
    [ResponseType(nameof(M2C_SkillCmd))]
    public partial class C2M_SkillCmd : MessageObject, ILocationRequest
    {
        public static C2M_SkillCmd Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillCmd), isFromPool) as C2M_SkillCmd;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        [MemoryPackOrder(1)]
        public long TargetID { get; set; }

        [MemoryPackOrder(2)]
        public int TargetAngle { get; set; }

        [MemoryPackOrder(3)]
        public float TargetDistance { get; set; }

        [MemoryPackOrder(4)]
        public int WeaponSkillID { get; set; }

        [MemoryPackOrder(5)]
        public int ItemId { get; set; }

        [MemoryPackOrder(6)]
        public float SingValue { get; set; }

        [MemoryPackOrder(9)]
        public long PetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SkillID = default;
            this.TargetID = default;
            this.TargetAngle = default;
            this.TargetDistance = default;
            this.WeaponSkillID = default;
            this.ItemId = default;
            this.SingValue = default;
            this.PetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillCmd)]
    public partial class M2C_SkillCmd : MessageObject, ILocationResponse
    {
        public static M2C_SkillCmd Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillCmd), isFromPool) as M2C_SkillCmd;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long CDEndTime { get; set; }

        [MemoryPackOrder(1)]
        public long PublicCDTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.CDEndTime = default;
            this.PublicCDTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitUseSkill)]
    public partial class M2C_UnitUseSkill : MessageObject, IMessage
    {
        public static M2C_UnitUseSkill Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitUseSkill), isFromPool) as M2C_UnitUseSkill;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(93)]
        public long UnitId { get; set; }

        /// <summary>
        /// 表现用
        /// </summary>
        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        /// <summary>
        /// 用来角色转向
        /// </summary>
        [MemoryPackOrder(2)]
        public int TargetAngle { get; set; }

        /// <summary>
        /// 技能列表[一个技能可以同时触发多个技能]
        /// </summary>
        [MemoryPackOrder(3)]
        public List<SkillInfo> SkillInfos { get; set; } = new();

        [MemoryPackOrder(5)]
        public int ItemId { get; set; }

        [MemoryPackOrder(6)]
        public long CDEndTime { get; set; }

        [MemoryPackOrder(7)]
        public long PublicCDTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.SkillID = default;
            this.TargetAngle = default;
            this.SkillInfos.Clear();
            this.ItemId = default;
            this.CDEndTime = default;
            this.PublicCDTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.LifeShieldInfo)]
    public partial class LifeShieldInfo : MessageObject
    {
        public static LifeShieldInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(LifeShieldInfo), isFromPool) as LifeShieldInfo;
        }

        [MemoryPackOrder(0)]
        public int ShieldType { get; set; }

        [MemoryPackOrder(1)]
        public int Level { get; set; }

        [MemoryPackOrder(2)]
        public int Exp { get; set; }

        [MemoryPackOrder(3)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ShieldType = default;
            this.Level = default;
            this.Exp = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SkillSetInfo)]
    public partial class SkillSetInfo : MessageObject
    {
        public static SkillSetInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SkillSetInfo), isFromPool) as SkillSetInfo;
        }

        [MemoryPackOrder(0)]
        public List<SkillPro> SkillList { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<KeyValuePairInt> TianFuList1 { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<KeyValuePairInt> TianFuList2 { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<LifeShieldInfo> LifeShieldList { get; set; } = new();

        [MemoryPackOrder(4)]
        public int TianFuPlan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SkillList.Clear();
            this.TianFuList1.Clear();
            this.TianFuList2.Clear();
            this.LifeShieldList.Clear();
            this.TianFuPlan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能天赋更新
    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillSetMessage)]
    public partial class M2C_SkillSetMessage : MessageObject, IMessage
    {
        public static M2C_SkillSetMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillSetMessage), isFromPool) as M2C_SkillSetMessage;
        }

        [MemoryPackOrder(0)]
        public SkillSetInfo SkillSetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SkillSetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 转换职业
    [MemoryPackable]
    [Message(OuterMessage.C2M_ChangeOccTwoRequest)]
    [ResponseType(nameof(M2C_ChangeOccTwoResponse))]
    public partial class C2M_ChangeOccTwoRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChangeOccTwoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChangeOccTwoRequest), isFromPool) as C2M_ChangeOccTwoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OccTwoID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OccTwoID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChangeOccTwoResponse)]
    public partial class M2C_ChangeOccTwoResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChangeOccTwoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChangeOccTwoResponse), isFromPool) as M2C_ChangeOccTwoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2Chat_GetChatRequest)]
    [ResponseType(nameof(Chat2C_GetChatResponse))]
    public partial class C2Chat_GetChatRequest : MessageObject, IChatActorRequest
    {
        public static C2Chat_GetChatRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Chat_GetChatRequest), isFromPool) as C2Chat_GetChatRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Chat2C_GetChatResponse)]
    public partial class Chat2C_GetChatResponse : MessageObject, IChatActorResponse
    {
        public static Chat2C_GetChatResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Chat2C_GetChatResponse), isFromPool) as Chat2C_GetChatResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<ChatInfo> ChatInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ChatInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_SendChatRequest)]
    [ResponseType(nameof(C2C_SendChatResponse))]
    public partial class C2C_SendChatRequest : MessageObject, IChatActorRequest
    {
        public static C2C_SendChatRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_SendChatRequest), isFromPool) as C2C_SendChatRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public ChatInfo ChatInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChatInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_SendChatResponse)]
    public partial class C2C_SendChatResponse : MessageObject, IChatActorResponse
    {
        public static C2C_SendChatResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_SendChatResponse), isFromPool) as C2C_SendChatResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string ChatMsg { get; set; }

        /// <summary>
        /// 0世界 1帮派 2队伍
        /// </summary>
        [MemoryPackOrder(1)]
        public int ChannelId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ChatMsg = default;
            this.ChannelId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SyncChatInfo)]
    public partial class M2C_SyncChatInfo : MessageObject, IMessage
    {
        public static M2C_SyncChatInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SyncChatInfo), isFromPool) as M2C_SyncChatInfo;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public ChatInfo ChatInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChatInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 精灵进度
    [MemoryPackable]
    [Message(OuterMessage.JingLingInfo)]
    public partial class JingLingInfo : MessageObject
    {
        public static JingLingInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JingLingInfo), isFromPool) as JingLingInfo;
        }

        [MemoryPackOrder(0)]
        public int JingLingID { get; set; }

        /// <summary>
        /// 对比JingLingConfig.NeedPoint判断是否激活。
        /// </summary>
        [MemoryPackOrder(1)]
        public int Progess { get; set; }

        /// <summary>
        /// 0休息 1出战
        /// </summary>
        [MemoryPackOrder(2)]
        public int State { get; set; }

        /// <summary>
        /// 是否激活
        /// </summary>
        [MemoryPackOrder(3)]
        public int IsActive { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.JingLingID = default;
            this.Progess = default;
            this.State = default;
            this.IsActive = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 成就进度
    [MemoryPackable]
    [Message(OuterMessage.ChengJiuInfo)]
    public partial class ChengJiuInfo : MessageObject
    {
        public static ChengJiuInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ChengJiuInfo), isFromPool) as ChengJiuInfo;
        }

        [MemoryPackOrder(0)]
        public int ChengJiuID { get; set; }

        [MemoryPackOrder(1)]
        public int ChengJiuProgess { get; set; }

        [MemoryPackOrder(2)]
        public long ChengJiuProgessLong { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ChengJiuID = default;
            this.ChengJiuProgess = default;
            this.ChengJiuProgessLong = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 激活成就
    [MemoryPackable]
    [Message(OuterMessage.M2C_ChengJiuActiveMessage)]
    public partial class M2C_ChengJiuActiveMessage : MessageObject, IMessage
    {
        public static M2C_ChengJiuActiveMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChengJiuActiveMessage), isFromPool) as M2C_ChengJiuActiveMessage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int ChengJiuId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ChengJiuId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JingLingActiveRequest)]
    [ResponseType(nameof(M2C_JingLingActiveResponse))]
    public partial class C2M_JingLingActiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingLingActiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingLingActiveRequest), isFromPool) as C2M_JingLingActiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int JingLingId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.JingLingId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingLingActiveResponse)]
    public partial class M2C_JingLingActiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingLingActiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingLingActiveResponse), isFromPool) as M2C_JingLingActiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 激活成就
    [MemoryPackable]
    [Message(OuterMessage.M2C_JingLingActiveMessage)]
    public partial class M2C_JingLingActiveMessage : MessageObject, IMessage
    {
        public static M2C_JingLingActiveMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingLingActiveMessage), isFromPool) as M2C_JingLingActiveMessage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(4)]
        public List<JingLingInfo> JingLingList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.JingLingList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 激活宠物图鉴
    [MemoryPackable]
    [Message(OuterMessage.M2C_PetTuJianActiveMessage)]
    public partial class M2C_PetTuJianActiveMessage : MessageObject, IMessage
    {
        public static M2C_PetTuJianActiveMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetTuJianActiveMessage), isFromPool) as M2C_PetTuJianActiveMessage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(4)]
        public List<int> PetTuJianActives { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetTuJianActives.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 任务列表
    [MemoryPackable]
    [Message(OuterMessage.TaskPro)]
    public partial class TaskPro : MessageObject
    {
        public static TaskPro Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(TaskPro), isFromPool) as TaskPro;
        }

        [MemoryPackOrder(0)]
        public int taskID { get; set; }

        [MemoryPackOrder(1)]
        public int taskTargetNum_1 { get; set; }

        [MemoryPackOrder(4)]
        public int taskTargetNum_2 { get; set; }

        [MemoryPackOrder(5)]
        public int taskTargetNum_3 { get; set; }

        /// <summary>
        /// 0未激活 1已接取 2已完成 3已领取
        /// </summary>
        [MemoryPackOrder(2)]
        public int taskStatus { get; set; }

        /// <summary>
        /// 0未追踪 1追踪
        /// </summary>
        [MemoryPackOrder(3)]
        public int TrackStatus { get; set; }

        [MemoryPackOrder(6)]
        public int FubenId { get; set; }

        [MemoryPackOrder(7)]
        public int WaveId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.taskID = default;
            this.taskTargetNum_1 = default;
            this.taskTargetNum_2 = default;
            this.taskTargetNum_3 = default;
            this.taskStatus = default;
            this.TrackStatus = default;
            this.FubenId = default;
            this.WaveId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskUpdate)]
    public partial class M2C_TaskUpdate : MessageObject, IMessage
    {
        public static M2C_TaskUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskUpdate), isFromPool) as M2C_TaskUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 全量  2增量
        /// </summary>
        [MemoryPackOrder(0)]
        public int UpdateMode { get; set; }

        [MemoryPackOrder(1)]
        public List<TaskPro> RoleTaskList { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<int> RoleComoleteTaskList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.ActorId = default;
            this.UpdateMode = default;
            this.RoleTaskList.Clear();
            this.RoleComoleteTaskList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TalentActiveRequest)]
    [ResponseType(nameof(M2C_TalentActiveResponse))]
    public partial class C2M_TalentActiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_TalentActiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TalentActiveRequest), isFromPool) as C2M_TalentActiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TalentActiveResponse)]
    public partial class M2C_TalentActiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_TalentActiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TalentActiveResponse), isFromPool) as M2C_TalentActiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TalentReSetRequest)]
    [ResponseType(nameof(M2C_TalentReSetResponse))]
    public partial class C2M_TalentReSetRequest : MessageObject, ILocationRequest
    {
        public static C2M_TalentReSetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TalentReSetRequest), isFromPool) as C2M_TalentReSetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TalentReSetResponse)]
    public partial class M2C_TalentReSetResponse : MessageObject, ILocationResponse
    {
        public static M2C_TalentReSetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TalentReSetResponse), isFromPool) as M2C_TalentReSetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TianFuActiveRequest)]
    [ResponseType(nameof(M2C_TianFuActiveResponse))]
    public partial class C2M_TianFuActiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_TianFuActiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TianFuActiveRequest), isFromPool) as C2M_TianFuActiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int TianFuId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TianFuId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TianFuActiveResponse)]
    public partial class M2C_TianFuActiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_TianFuActiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TianFuActiveResponse), isFromPool) as M2C_TianFuActiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能设置
    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillSet)]
    [ResponseType(nameof(M2C_SkillSet))]
    public partial class C2M_SkillSet : MessageObject, ILocationRequest
    {
        public static C2M_SkillSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillSet), isFromPool) as C2M_SkillSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        [MemoryPackOrder(1)]
        public int Position { get; set; }

        [MemoryPackOrder(2)]
        public int SkillType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SkillID = default;
            this.Position = default;
            this.SkillType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillSet)]
    public partial class M2C_SkillSet : MessageObject, ILocationResponse
    {
        public static M2C_SkillSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillSet), isFromPool) as M2C_SkillSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 提交任务
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskCommitRequest)]
    [ResponseType(nameof(M2C_TaskCommitResponse))]
    public partial class C2M_TaskCommitRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskCommitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskCommitRequest), isFromPool) as C2M_TaskCommitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TaskId { get; set; }

        /// <summary>
        /// 给予任务道具ID
        /// </summary>
        [MemoryPackOrder(1)]
        public long BagInfoID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TaskId = default;
            this.BagInfoID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskCommitResponse)]
    public partial class M2C_TaskCommitResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskCommitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskCommitResponse), isFromPool) as M2C_TaskCommitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> RoleComoleteTaskList { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<TaskPro> RoleTaskList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RoleComoleteTaskList.Clear();
            this.RoleTaskList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 接取任务
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskGetRequest)]
    [ResponseType(nameof(M2C_TaskGetResponse))]
    public partial class C2M_TaskGetRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskGetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskGetRequest), isFromPool) as C2M_TaskGetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TaskId { get; set; }

        /// <summary>
        /// 0未激活 1已接取 2已完成 3已领取
        /// </summary>
        [MemoryPackOrder(1)]
        public int TaskStatus { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TaskId = default;
            this.TaskStatus = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskGetResponse)]
    public partial class M2C_TaskGetResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskGetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskGetResponse), isFromPool) as M2C_TaskGetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public TaskPro TaskPro { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.TaskPro = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 放弃任务
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskGiveUpRequest)]
    [ResponseType(nameof(M2C_TaskGiveUpResponse))]
    public partial class C2M_TaskGiveUpRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskGiveUpRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskGiveUpRequest), isFromPool) as C2M_TaskGiveUpRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TaskId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TaskId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskGiveUpResponse)]
    public partial class M2C_TaskGiveUpResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskGiveUpResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskGiveUpResponse), isFromPool) as M2C_TaskGiveUpResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 活跃宝箱
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskHuoYueRewardRequest)]
    [ResponseType(nameof(M2C_TaskHuoYueRewardResponse))]
    public partial class C2M_TaskHuoYueRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskHuoYueRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskHuoYueRewardRequest), isFromPool) as C2M_TaskHuoYueRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HuoYueId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HuoYueId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskHuoYueRewardResponse)]
    public partial class M2C_TaskHuoYueRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskHuoYueRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskHuoYueRewardResponse), isFromPool) as M2C_TaskHuoYueRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 成长奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskGrowUpRewardRequest)]
    [ResponseType(nameof(M2C_TaskGrowUpRewardResponse))]
    public partial class C2M_TaskGrowUpRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskGrowUpRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskGrowUpRewardRequest), isFromPool) as C2M_TaskGrowUpRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int GrowUpRewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.GrowUpRewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskGrowUpRewardResponse)]
    public partial class M2C_TaskGrowUpRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskGrowUpRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskGrowUpRewardResponse), isFromPool) as M2C_TaskGrowUpRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 任务列表
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskInitRequest)]
    [ResponseType(nameof(M2C_TaskInitResponse))]
    public partial class C2M_TaskInitRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskInitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskInitRequest), isFromPool) as C2M_TaskInitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskInitResponse)]
    public partial class M2C_TaskInitResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskInitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskInitResponse), isFromPool) as M2C_TaskInitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<TaskPro> RoleTaskList { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<int> RoleComoleteTaskList { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<int> ReceiveHuoYueIds { get; set; } = new();

        [MemoryPackOrder(4)]
        public List<int> ReceiveGrowUpRewardIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RoleTaskList.Clear();
            this.RoleComoleteTaskList.Clear();
            this.ReceiveHuoYueIds.Clear();
            this.ReceiveGrowUpRewardIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 任务通知【目前用于对话完成】
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskNoticeRequest)]
    [ResponseType(nameof(M2C_TaskNoticeResponse))]
    public partial class C2M_TaskNoticeRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskNoticeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskNoticeRequest), isFromPool) as C2M_TaskNoticeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TaskId { get; set; }

        /// <summary>
        /// 0未激活 1已接取 2已完成 3已领取
        /// </summary>
        [MemoryPackOrder(1)]
        public int TaskStatus { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TaskId = default;
            this.TaskStatus = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskNoticeResponse)]
    public partial class M2C_TaskNoticeResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskNoticeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskNoticeResponse), isFromPool) as M2C_TaskNoticeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskOnLoginRequest)]
    [ResponseType(nameof(M2C_TaskOnLoginResponse))]
    public partial class C2M_TaskOnLoginRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskOnLoginRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskOnLoginRequest), isFromPool) as C2M_TaskOnLoginRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskOnLoginResponse)]
    public partial class M2C_TaskOnLoginResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskOnLoginResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskOnLoginResponse), isFromPool) as M2C_TaskOnLoginResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 任务追踪
    [MemoryPackable]
    [Message(OuterMessage.C2M_TaskTrackRequest)]
    [ResponseType(nameof(M2C_TaskTrackResponse))]
    public partial class C2M_TaskTrackRequest : MessageObject, ILocationRequest
    {
        public static C2M_TaskTrackRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TaskTrackRequest), isFromPool) as C2M_TaskTrackRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TaskId { get; set; }

        /// <summary>
        /// 0未追踪 1已追踪
        /// </summary>
        [MemoryPackOrder(1)]
        public int TrackStatus { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TaskId = default;
            this.TrackStatus = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TaskTrackResponse)]
    public partial class M2C_TaskTrackResponse : MessageObject, ILocationResponse
    {
        public static M2C_TaskTrackResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TaskTrackResponse), isFromPool) as M2C_TaskTrackResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能升级
    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillInitRequest)]
    [ResponseType(nameof(M2C_SkillInitResponse))]
    public partial class C2M_SkillInitRequest : MessageObject, ILocationRequest
    {
        public static C2M_SkillInitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillInitRequest), isFromPool) as C2M_SkillInitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillInitResponse)]
    public partial class M2C_SkillInitResponse : MessageObject, ILocationResponse
    {
        public static M2C_SkillInitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillInitResponse), isFromPool) as M2C_SkillInitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public SkillSetInfo SkillSetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.SkillSetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能打断
    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillInterruptRequest)]
    public partial class C2M_SkillInterruptRequest : MessageObject, ILocationMessage
    {
        public static C2M_SkillInterruptRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillInterruptRequest), isFromPool) as C2M_SkillInterruptRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SkillID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillInterruptResult)]
    public partial class M2C_SkillInterruptResult : MessageObject, IMessage
    {
        public static M2C_SkillInterruptResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillInterruptResult), isFromPool) as M2C_SkillInterruptResult;
        }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int SkillId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.SkillId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillJueXingRequest)]
    [ResponseType(nameof(M2C_SkillJueXingResponse))]
    public partial class C2M_SkillJueXingRequest : MessageObject, ILocationRequest
    {
        public static C2M_SkillJueXingRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillJueXingRequest), isFromPool) as C2M_SkillJueXingRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int JueXingId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.JueXingId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillJueXingResponse)]
    public partial class M2C_SkillJueXingResponse : MessageObject, ILocationResponse
    {
        public static M2C_SkillJueXingResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillJueXingResponse), isFromPool) as M2C_SkillJueXingResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillXuanZhuanRequest)]
    [ResponseType(nameof(M2C_SkillXuanZhuanResponse))]
    public partial class C2M_SkillXuanZhuanRequest : MessageObject, ILocationRequest
    {
        public static C2M_SkillXuanZhuanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillXuanZhuanRequest), isFromPool) as C2M_SkillXuanZhuanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Angle { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Angle = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillXuanZhuanResponse)]
    public partial class M2C_SkillXuanZhuanResponse : MessageObject, ILocationResponse
    {
        public static M2C_SkillXuanZhuanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillXuanZhuanResponse), isFromPool) as M2C_SkillXuanZhuanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillXuanZhuanMessage)]
    public partial class M2C_SkillXuanZhuanMessage : MessageObject, IMessage
    {
        public static M2C_SkillXuanZhuanMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillXuanZhuanMessage), isFromPool) as M2C_SkillXuanZhuanMessage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Angle { get; set; }

        [MemoryPackOrder(1)]
        public long UnitID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Angle = default;
            this.UnitID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能操作
    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillOperation)]
    [ResponseType(nameof(M2C_SkillOperation))]
    public partial class C2M_SkillOperation : MessageObject, ILocationRequest
    {
        public static C2M_SkillOperation Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillOperation), isFromPool) as C2M_SkillOperation;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        /// <summary>
        /// 1技能点重置
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperationType { get; set; }

        [MemoryPackOrder(3)]
        public string OperationValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SkillID = default;
            this.OperationType = default;
            this.OperationValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillOperation)]
    public partial class M2C_SkillOperation : MessageObject, ILocationResponse
    {
        public static M2C_SkillOperation Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillOperation), isFromPool) as M2C_SkillOperation;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 技能升级
    [MemoryPackable]
    [Message(OuterMessage.C2M_SkillUp)]
    [ResponseType(nameof(M2C_SkillUp))]
    public partial class C2M_SkillUp : MessageObject, ILocationRequest
    {
        public static C2M_SkillUp Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SkillUp), isFromPool) as C2M_SkillUp;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SkillID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillUp)]
    public partial class M2C_SkillUp : MessageObject, ILocationResponse
    {
        public static M2C_SkillUp Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillUp), isFromPool) as M2C_SkillUp;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int NewSkillID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.NewSkillID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_LifeShieldCostRequest)]
    [ResponseType(nameof(M2C_LifeShieldCostResponse))]
    public partial class C2M_LifeShieldCostRequest : MessageObject, ILocationRequest
    {
        public static C2M_LifeShieldCostRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_LifeShieldCostRequest), isFromPool) as C2M_LifeShieldCostRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public List<long> OperateBagID { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_LifeShieldCostResponse)]
    public partial class M2C_LifeShieldCostResponse : MessageObject, ILocationResponse
    {
        public static M2C_LifeShieldCostResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_LifeShieldCostResponse), isFromPool) as M2C_LifeShieldCostResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<LifeShieldInfo> ShieldList { get; set; } = new();

        [MemoryPackOrder(1)]
        public int AddExp { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ShieldList.Clear();
            this.AddExp = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TianFuPlanRequest)]
    [ResponseType(nameof(M2C_TianFuPlanResponse))]
    public partial class C2M_TianFuPlanRequest : MessageObject, ILocationRequest
    {
        public static C2M_TianFuPlanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TianFuPlanRequest), isFromPool) as C2M_TianFuPlanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int TianFuPlan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TianFuPlan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TianFuPlanResponse)]
    public partial class M2C_TianFuPlanResponse : MessageObject, ILocationResponse
    {
        public static M2C_TianFuPlanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TianFuPlanResponse), isFromPool) as M2C_TianFuPlanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 终止技能
    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitFinishSkill)]
    public partial class M2C_UnitFinishSkill : MessageObject, IMessage
    {
        public static M2C_UnitFinishSkill Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitFinishSkill), isFromPool) as M2C_UnitFinishSkill;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RoleAddPointRequest)]
    [ResponseType(nameof(M2C_RoleAddPointResponse))]
    public partial class C2M_RoleAddPointRequest : MessageObject, ILocationRequest
    {
        public static C2M_RoleAddPointRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RoleAddPointRequest), isFromPool) as C2M_RoleAddPointRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(5)]
        public List<int> PointList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PointList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RoleAddPointResponse)]
    public partial class M2C_RoleAddPointResponse : MessageObject, ILocationResponse
    {
        public static M2C_RoleAddPointResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RoleAddPointResponse), isFromPool) as M2C_RoleAddPointResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitNumericUpdate)]
    public partial class M2C_UnitNumericUpdate : MessageObject, IMessage
    {
        public static M2C_UnitNumericUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitNumericUpdate), isFromPool) as M2C_UnitNumericUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(93)]
        public long UnitId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillId { get; set; }

        [MemoryPackOrder(1)]
        public int NumericType { get; set; }

        [MemoryPackOrder(2)]
        public long OldValue { get; set; }

        [MemoryPackOrder(3)]
        public long NewValue { get; set; }

        [MemoryPackOrder(4)]
        public int DamgeType { get; set; }

        [MemoryPackOrder(5)]
        public long AttackId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.SkillId = default;
            this.NumericType = default;
            this.OldValue = default;
            this.NewValue = default;
            this.DamgeType = default;
            this.AttackId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.ShouJiChapterInfo)]
    public partial class ShouJiChapterInfo : MessageObject
    {
        public static ShouJiChapterInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ShouJiChapterInfo), isFromPool) as ShouJiChapterInfo;
        }

        [MemoryPackOrder(0)]
        public int ChapterId { get; set; }

        [MemoryPackOrder(1)]
        public int StarNum { get; set; }

        [MemoryPackOrder(2)]
        public int RewardInfo { get; set; }

        [MemoryPackOrder(3)]
        public List<int> ShouJiItemList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ChapterId = default;
            this.StarNum = default;
            this.RewardInfo = default;
            this.ShouJiItemList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanRecord)]
    public partial class JiaYuanRecord : MessageObject
    {
        public static JiaYuanRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanRecord), isFromPool) as JiaYuanRecord;
        }

        [MemoryPackOrder(0)]
        public long Time { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        /// <summary>
        /// 1进入家园 2收获植物 3收获动物  4清理
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        [MemoryPackOrder(3)]
        public int OperateId { get; set; }

        /// <summary>
        /// 玩家id
        /// </summary>
        [MemoryPackOrder(6)]
        public long PlayerId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Time = default;
            this.PlayerName = default;
            this.OperateType = default;
            this.OperateId = default;
            this.PlayerId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanOperate)]
    public partial class JiaYuanOperate : MessageObject
    {
        public static JiaYuanOperate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanOperate), isFromPool) as JiaYuanOperate;
        }

        [MemoryPackOrder(0)]
        public long Time { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        /// <summary>
        /// 1进入家园 2收获植物 3收获动物  4清理
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        /// <summary>
        /// 行为id
        /// </summary>
        [MemoryPackOrder(3)]
        public int OperateId { get; set; }

        [MemoryPackOrder(4)]
        public string OperatePar { get; set; }

        [MemoryPackOrder(5)]
        public long UnitId { get; set; }

        [MemoryPackOrder(6)]
        public long MasterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Time = default;
            this.PlayerName = default;
            this.OperateType = default;
            this.OperateId = default;
            this.OperatePar = default;
            this.UnitId = default;
            this.MasterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanPurchaseItem)]
    public partial class JiaYuanPurchaseItem : MessageObject
    {
        public static JiaYuanPurchaseItem Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanPurchaseItem), isFromPool) as JiaYuanPurchaseItem;
        }

        [MemoryPackOrder(0)]
        public int ItemID { get; set; }

        [MemoryPackOrder(1)]
        public int BuyZiJin { get; set; }

        [MemoryPackOrder(2)]
        public long MakeTime { get; set; }

        [MemoryPackOrder(3)]
        public int LeftNum { get; set; }

        [MemoryPackOrder(4)]
        public int PurchaseId { get; set; }

        [MemoryPackOrder(5)]
        public long EndTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ItemID = default;
            this.BuyZiJin = default;
            this.MakeTime = default;
            this.LeftNum = default;
            this.PurchaseId = default;
            this.EndTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanPlant)]
    public partial class JiaYuanPlant : MessageObject
    {
        public static JiaYuanPlant Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanPlant), isFromPool) as JiaYuanPlant;
        }

        [MemoryPackOrder(0)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(2)]
        public long StartTime { get; set; }

        [MemoryPackOrder(3)]
        public int GatherNumber { get; set; }

        [MemoryPackOrder(4)]
        public long GatherLastTime { get; set; }

        [MemoryPackOrder(5)]
        public long UnitId { get; set; }

        [MemoryPackOrder(6)]
        public int StealNumber { get; set; }

        [MemoryPackOrder(7)]
        public List<JiaYuanRecord> GatherRecord { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.CellIndex = default;
            this.ItemId = default;
            this.StartTime = default;
            this.GatherNumber = default;
            this.GatherLastTime = default;
            this.UnitId = default;
            this.StealNumber = default;
            this.GatherRecord.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanPastures)]
    public partial class JiaYuanPastures : MessageObject
    {
        public static JiaYuanPastures Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanPastures), isFromPool) as JiaYuanPastures;
        }

        [MemoryPackOrder(1)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(2)]
        public long StartTime { get; set; }

        [MemoryPackOrder(3)]
        public int GatherNumber { get; set; }

        [MemoryPackOrder(4)]
        public long GatherLastTime { get; set; }

        [MemoryPackOrder(5)]
        public long UnitId { get; set; }

        [MemoryPackOrder(6)]
        public int StealNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ConfigId = default;
            this.StartTime = default;
            this.GatherNumber = default;
            this.GatherLastTime = default;
            this.UnitId = default;
            this.StealNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanMonster)]
    public partial class JiaYuanMonster : MessageObject
    {
        public static JiaYuanMonster Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanMonster), isFromPool) as JiaYuanMonster;
        }

        [MemoryPackOrder(0)]
        public long unitId { get; set; }

        [MemoryPackOrder(1)]
        public float x { get; set; }

        [MemoryPackOrder(2)]
        public float y { get; set; }

        [MemoryPackOrder(3)]
        public float z { get; set; }

        [MemoryPackOrder(4)]
        public long BornTime { get; set; }

        [MemoryPackOrder(5)]
        public int ConfigId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.unitId = default;
            this.x = default;
            this.y = default;
            this.z = default;
            this.BornTime = default;
            this.ConfigId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanPet)]
    public partial class JiaYuanPet : MessageObject
    {
        public static JiaYuanPet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanPet), isFromPool) as JiaYuanPet;
        }

        [MemoryPackOrder(0)]
        public long unitId { get; set; }

        [MemoryPackOrder(1)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(2)]
        public long TotalExp { get; set; }

        [MemoryPackOrder(3)]
        public long CurExp { get; set; }

        [MemoryPackOrder(4)]
        public long StartTime { get; set; }

        [MemoryPackOrder(5)]
        public int MoodValue { get; set; }

        [MemoryPackOrder(6)]
        public int PetLv { get; set; }

        [MemoryPackOrder(7)]
        public long LastExpTime { get; set; }

        [MemoryPackOrder(8)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(9)]
        public string PetName { get; set; }

        [MemoryPackOrder(10)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.unitId = default;
            this.ConfigId = default;
            this.TotalExp = default;
            this.CurExp = default;
            this.StartTime = default;
            this.MoodValue = default;
            this.PetLv = default;
            this.LastExpTime = default;
            this.PlayerName = default;
            this.PetName = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物栏
    [MemoryPackable]
    [Message(OuterMessage.PetBarInfo)]
    public partial class PetBarInfo : MessageObject
    {
        public static PetBarInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetBarInfo), isFromPool) as PetBarInfo;
        }

        [MemoryPackOrder(0)]
        public long PetId { get; set; }

        /// <summary>
        /// PetBarConfig.Id
        /// </summary>
        [MemoryPackOrder(1)]
        public int PetBarId { get; set; }

        /// <summary>
        /// 出场技，切换到宠物的时候释放。
        /// </summary>
        [MemoryPackOrder(2)]
        public int AppearSkill { get; set; }

        /// <summary>
        /// 有四个，目前只需要做第一个。
        /// </summary>
        [MemoryPackOrder(3)]
        public List<int> ActiveSkill { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetId = default;
            this.PetBarId = default;
            this.AppearSkill = default;
            this.ActiveSkill.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetList)]
    [ResponseType(nameof(M2C_RolePetList))]
    public partial class C2M_RolePetList : MessageObject, ILocationRequest
    {
        public static C2M_RolePetList Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetList), isFromPool) as C2M_RolePetList;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetList)]
    public partial class M2C_RolePetList : MessageObject, ILocationResponse
    {
        public static M2C_RolePetList Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetList), isFromPool) as M2C_RolePetList;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<RolePetInfo> RolePetInfos { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<long> TeamPetList { get; set; } = new();

        /// <summary>
        /// 正在孵化的宠物蛋
        /// </summary>
        [MemoryPackOrder(2)]
        public List<KeyValuePairLong4> RolePetEggs { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<long> PetFormations { get; set; } = new();

        [MemoryPackOrder(4)]
        public List<PetFubenInfo> PetFubenInfos { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<KeyValuePair> PetSkinList { get; set; } = new();

        /// <summary>
        /// 已领取的奖励ID
        /// </summary>
        [MemoryPackOrder(6)]
        public int PetFubeRewardId { get; set; }

        /// <summary>
        /// 宠物守护
        /// </summary>
        [MemoryPackOrder(7)]
        public List<long> PetShouHuList { get; set; } = new();

        [MemoryPackOrder(8)]
        public int PetShouHuActive { get; set; }

        [MemoryPackOrder(9)]
        public List<int> PetCangKuOpen { get; set; } = new();

        [MemoryPackOrder(10)]
        public List<long> PetMingList { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<long> PetMingPosition { get; set; } = new();

        [MemoryPackOrder(12)]
        public List<RolePetInfo> RolePetBag { get; set; } = new();

        [MemoryPackOrder(14)]
        public int PetFightPlan { get; set; }

        [MemoryPackOrder(15)]
        public List<PetBarInfo> PetFightList_1 { get; set; } = new();

        [MemoryPackOrder(16)]
        public List<PetBarInfo> PetFightList_2 { get; set; } = new();

        [MemoryPackOrder(17)]
        public List<PetBarInfo> PetFightList_3 { get; set; } = new();

        [MemoryPackOrder(18)]
        public List<int> PetBarConfigList { get; set; } = new();

        [MemoryPackOrder(19)]
        public int PetMeleePlan { get; set; }

        [MemoryPackOrder(20)]
        public List<PetMeleeInfo> PetMeleeInfoList { get; set; } = new();

        [MemoryPackOrder(21)]
        public List<PetMeleeFubenInfo> PetMeleeFubenInfos { get; set; } = new();

        [MemoryPackOrder(22)]
        public List<int> PetMeleeRewardIds { get; set; } = new();

        [MemoryPackOrder(23)]
        public List<int> PetMeleeFubeRewardIds { get; set; } = new();

        [MemoryPackOrder(24)]
        public List<KeyValuePairInt> PetEchoList { get; set; } = new();

        [MemoryPackOrder(25)]
        public List<int> PetZhuangJiaList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfos.Clear();
            this.TeamPetList.Clear();
            this.RolePetEggs.Clear();
            this.PetFormations.Clear();
            this.PetFubenInfos.Clear();
            this.PetSkinList.Clear();
            this.PetFubeRewardId = default;
            this.PetShouHuList.Clear();
            this.PetShouHuActive = default;
            this.PetCangKuOpen.Clear();
            this.PetMingList.Clear();
            this.PetMingPosition.Clear();
            this.RolePetBag.Clear();
            this.PetFightPlan = default;
            this.PetFightList_1.Clear();
            this.PetFightList_2.Clear();
            this.PetFightList_3.Clear();
            this.PetBarConfigList.Clear();
            this.PetMeleePlan = default;
            this.PetMeleeInfoList.Clear();
            this.PetMeleeFubenInfos.Clear();
            this.PetMeleeRewardIds.Clear();
            this.PetMeleeFubeRewardIds.Clear();
            this.PetEchoList.Clear();
            this.PetZhuangJiaList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物栏切换
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFightPlanRequest)]
    [ResponseType(nameof(M2C_PetFightPlanResponse))]
    public partial class C2M_PetFightPlanRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetFightPlanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFightPlanRequest), isFromPool) as C2M_PetFightPlanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int PetFightPlan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetFightPlan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFightPlanResponse)]
    public partial class M2C_PetFightPlanResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetFightPlanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFightPlanResponse), isFromPool) as M2C_PetFightPlanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物栏设置
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetBarSetRequest)]
    [ResponseType(nameof(M2C_PetBarSetResponse))]
    public partial class C2M_PetBarSetRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetBarSetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetBarSetRequest), isFromPool) as C2M_PetBarSetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 三个栏位的上阵宠物   1选中圆形宠物栏位，左侧为宠物列表。 2选中出场技/主动技栏位，左侧为技能列表.
        /// </summary>
        [MemoryPackOrder(4)]
        public List<PetBarInfo> PetBarList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetBarList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetBarSetResponse)]
    public partial class M2C_PetBarSetResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetBarSetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetBarSetResponse), isFromPool) as M2C_PetBarSetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物栏升级
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetBarUpgradeRequest)]
    [ResponseType(nameof(M2C_PetBarUpgradeResponse))]
    public partial class C2M_PetBarUpgradeRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetBarUpgradeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetBarUpgradeRequest), isFromPool) as C2M_PetBarUpgradeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 1开始
        /// </summary>
        [MemoryPackOrder(0)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetBarUpgradeResponse)]
    public partial class M2C_PetBarUpgradeResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetBarUpgradeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetBarUpgradeResponse), isFromPool) as M2C_PetBarUpgradeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetFormationSet)]
    [ResponseType(nameof(M2C_RolePetFormationSet))]
    public partial class C2M_RolePetFormationSet : MessageObject, ILocationRequest
    {
        public static C2M_RolePetFormationSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetFormationSet), isFromPool) as C2M_RolePetFormationSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Index { get; set; }

        [MemoryPackOrder(1)]
        public long PetId { get; set; }

        /// <summary>
        /// 1上阵  2替换  3下阵
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        [MemoryPackOrder(3)]
        public int SceneType { get; set; }

        [MemoryPackOrder(4)]
        public List<long> PetFormat { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<long> PetPosition { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index = default;
            this.PetId = default;
            this.OperateType = default;
            this.SceneType = default;
            this.PetFormat.Clear();
            this.PetPosition.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetFormationSet)]
    public partial class M2C_RolePetFormationSet : MessageObject, ILocationResponse
    {
        public static M2C_RolePetFormationSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetFormationSet), isFromPool) as M2C_RolePetFormationSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物出战[1出战 0休息]
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetFight)]
    [ResponseType(nameof(M2C_RolePetFight))]
    public partial class C2M_RolePetFight : MessageObject, ILocationRequest
    {
        public static C2M_RolePetFight Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetFight), isFromPool) as C2M_RolePetFight;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int PetStatus { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.PetStatus = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetFight)]
    public partial class M2C_RolePetFight : MessageObject, ILocationResponse
    {
        public static M2C_RolePetFight Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetFight), isFromPool) as M2C_RolePetFight;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物切换出战
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFightSwitch)]
    [ResponseType(nameof(M2C_PetFightSwitch))]
    public partial class C2M_PetFightSwitch : MessageObject, ILocationRequest
    {
        public static C2M_PetFightSwitch Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFightSwitch), isFromPool) as C2M_PetFightSwitch;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 0玩家自身  123对应的宠物
        /// </summary>
        [MemoryPackOrder(0)]
        public int PetFightIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetFightIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFightSwitch)]
    public partial class M2C_PetFightSwitch : MessageObject, ILocationResponse
    {
        public static M2C_PetFightSwitch Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFightSwitch), isFromPool) as M2C_PetFightSwitch;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 广播玩家变身。。
    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFightSwitchMessage)]
    public partial class M2C_PetFightSwitchMessage : MessageObject, IMessage
    {
        public static M2C_PetFightSwitchMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFightSwitchMessage), isFromPool) as M2C_PetFightSwitchMessage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(0)]
        public int PetConfigId { get; set; }

        [MemoryPackOrder(2)]
        public string DemonName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.UnitId = default;
            this.PetConfigId = default;
            this.DemonName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 获取玩家和宠物的技能CD
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetSkillCD)]
    [ResponseType(nameof(M2C_RolePetSkillCD))]
    public partial class C2M_RolePetSkillCD : MessageObject, ILocationRequest
    {
        public static C2M_RolePetSkillCD Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetSkillCD), isFromPool) as C2M_RolePetSkillCD;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 0玩家自身  ID>0对应的宠物
        /// </summary>
        [MemoryPackOrder(0)]
        public long PetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetSkillCD)]
    public partial class M2C_RolePetSkillCD : MessageObject, ILocationResponse
    {
        public static M2C_RolePetSkillCD Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetSkillCD), isFromPool) as M2C_RolePetSkillCD;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<KeyValuePairInt> SkillCDs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.SkillCDs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物合成
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetUpStar)]
    [ResponseType(nameof(M2C_RolePetUpStar))]
    public partial class C2M_RolePetUpStar : MessageObject, ILocationRequest
    {
        public static C2M_RolePetUpStar Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetUpStar), isFromPool) as C2M_RolePetUpStar;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public List<long> CostPetInfoIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.CostPetInfoIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetUpStar)]
    public partial class M2C_RolePetUpStar : MessageObject, ILocationResponse
    {
        public static M2C_RolePetUpStar Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetUpStar), isFromPool) as M2C_RolePetUpStar;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo rolePetInfo { get; set; }

        [MemoryPackOrder(1)]
        public List<long> CostPetInfoIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.rolePetInfo = default;
            this.CostPetInfoIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物分解
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetFenjie)]
    [ResponseType(nameof(M2C_RolePetFenjie))]
    public partial class C2M_RolePetFenjie : MessageObject, ILocationRequest
    {
        public static C2M_RolePetFenjie Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetFenjie), isFromPool) as C2M_RolePetFenjie;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetFenjie)]
    public partial class M2C_RolePetFenjie : MessageObject, ILocationResponse
    {
        public static M2C_RolePetFenjie Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetFenjie), isFromPool) as M2C_RolePetFenjie;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物洗练
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetXiLian)]
    [ResponseType(nameof(M2C_RolePetXiLian))]
    public partial class C2M_RolePetXiLian : MessageObject, ILocationRequest
    {
        public static C2M_RolePetXiLian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetXiLian), isFromPool) as C2M_RolePetXiLian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public long BagInfoID { get; set; }

        [MemoryPackOrder(2)]
        public int CostItemNum { get; set; }

        [MemoryPackOrder(3)]
        public string ParamInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.BagInfoID = default;
            this.CostItemNum = default;
            this.ParamInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetXiLian)]
    public partial class M2C_RolePetXiLian : MessageObject, ILocationResponse
    {
        public static M2C_RolePetXiLian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetXiLian), isFromPool) as M2C_RolePetXiLian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo rolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.rolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物合成
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetHeCheng)]
    [ResponseType(nameof(M2C_RolePetHeCheng))]
    public partial class C2M_RolePetHeCheng : MessageObject, ILocationRequest
    {
        public static C2M_RolePetHeCheng Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetHeCheng), isFromPool) as C2M_RolePetHeCheng;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId1 { get; set; }

        [MemoryPackOrder(1)]
        public long PetInfoId2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId1 = default;
            this.PetInfoId2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetHeCheng)]
    public partial class M2C_RolePetHeCheng : MessageObject, ILocationResponse
    {
        public static M2C_RolePetHeCheng Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetHeCheng), isFromPool) as M2C_RolePetHeCheng;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo rolePetInfo { get; set; }

        [MemoryPackOrder(1)]
        public long DeletePetInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.rolePetInfo = default;
            this.DeletePetInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetChangePosRequest)]
    [ResponseType(nameof(M2C_PetChangePosResponse))]
    public partial class C2M_PetChangePosRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetChangePosRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetChangePosRequest), isFromPool) as C2M_PetChangePosRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Index1 { get; set; }

        [MemoryPackOrder(1)]
        public int Index2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index1 = default;
            this.Index2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetChangePosResponse)]
    public partial class M2C_PetChangePosResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetChangePosResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetChangePosResponse), isFromPool) as M2C_PetChangePosResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetDuiHuanRequest)]
    [ResponseType(nameof(M2C_PetDuiHuanResponse))]
    public partial class C2M_PetDuiHuanRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetDuiHuanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetDuiHuanRequest), isFromPool) as C2M_PetDuiHuanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetDuiHuanResponse)]
    public partial class M2C_PetDuiHuanResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetDuiHuanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetDuiHuanResponse), isFromPool) as M2C_PetDuiHuanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetEggChouKaRequest)]
    [ResponseType(nameof(M2C_PetEggChouKaResponse))]
    public partial class C2M_PetEggChouKaRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetEggChouKaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetEggChouKaRequest), isFromPool) as C2M_PetEggChouKaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ChouKaType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ChouKaType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetEggChouKaResponse)]
    public partial class M2C_PetEggChouKaResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetEggChouKaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetEggChouKaResponse), isFromPool) as M2C_PetEggChouKaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetChouKaStartRequest)]
    [ResponseType(nameof(M2C_PetChouKaStartResponse))]
    public partial class C2M_PetChouKaStartRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetChouKaStartRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetChouKaStartRequest), isFromPool) as C2M_PetChouKaStartRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetChouKaStartResponse)]
    public partial class M2C_PetChouKaStartResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetChouKaStartResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetChouKaStartResponse), isFromPool) as M2C_PetChouKaStartResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetChouKaEndRequest)]
    [ResponseType(nameof(M2C_PetChouKaEndResponse))]
    public partial class C2M_PetChouKaEndRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetChouKaEndRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetChouKaEndRequest), isFromPool) as C2M_PetChouKaEndRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetChouKaEndResponse)]
    public partial class M2C_PetChouKaEndResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetChouKaEndResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetChouKaEndResponse), isFromPool) as M2C_PetChouKaEndResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetEggDuiHuanRequest)]
    [ResponseType(nameof(M2C_PetEggDuiHuanResponse))]
    public partial class C2M_PetEggDuiHuanRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetEggDuiHuanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetEggDuiHuanRequest), isFromPool) as C2M_PetEggDuiHuanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ChouKaId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ChouKaId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetEggDuiHuanResponse)]
    public partial class M2C_PetEggDuiHuanResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetEggDuiHuanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetEggDuiHuanResponse), isFromPool) as M2C_PetEggDuiHuanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetEquipRequest)]
    [ResponseType(nameof(M2C_PetEquipResponse))]
    public partial class C2M_PetEquipRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetEquipRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetEquipRequest), isFromPool) as C2M_PetEquipRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public long BagInfoId { get; set; }

        /// <summary>
        /// 1装备 2卸下
        /// </summary>
        [MemoryPackOrder(3)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.BagInfoId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetEquipResponse)]
    public partial class M2C_PetEquipResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetEquipResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetEquipResponse), isFromPool) as M2C_PetEquipResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetExploreReward)]
    [ResponseType(nameof(M2C_PetExploreReward))]
    public partial class C2M_PetExploreReward : MessageObject, ILocationRequest
    {
        public static C2M_PetExploreReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetExploreReward), isFromPool) as C2M_PetExploreReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// PetExploreReward.ley
        /// </summary>
        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetExploreReward)]
    public partial class M2C_PetExploreReward : MessageObject, ILocationResponse
    {
        public static M2C_PetExploreReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetExploreReward), isFromPool) as M2C_PetExploreReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFragmentDuiHuan)]
    [ResponseType(nameof(M2C_PetFragmentDuiHuan))]
    public partial class C2M_PetFragmentDuiHuan : MessageObject, ILocationRequest
    {
        public static C2M_PetFragmentDuiHuan Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFragmentDuiHuan), isFromPool) as C2M_PetFragmentDuiHuan;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFragmentDuiHuan)]
    public partial class M2C_PetFragmentDuiHuan : MessageObject, ILocationResponse
    {
        public static M2C_PetFragmentDuiHuan Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFragmentDuiHuan), isFromPool) as M2C_PetFragmentDuiHuan;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物副本开始战斗
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFubenBeginRequest)]
    [ResponseType(nameof(M2C_PetFubenBeginResponse))]
    public partial class C2M_PetFubenBeginRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetFubenBeginRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFubenBeginRequest), isFromPool) as C2M_PetFubenBeginRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFubenBeginResponse)]
    public partial class M2C_PetFubenBeginResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetFubenBeginResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFubenBeginResponse), isFromPool) as M2C_PetFubenBeginResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物副本结束战斗
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFubenOverRequest)]
    public partial class C2M_PetFubenOverRequest : MessageObject, ILocationMessage
    {
        public static C2M_PetFubenOverRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFubenOverRequest), isFromPool) as C2M_PetFubenOverRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物副本星级奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetFubenRewardRequest)]
    [ResponseType(nameof(M2C_PetFubenRewardResponse))]
    public partial class C2M_PetFubenRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetFubenRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetFubenRewardRequest), isFromPool) as C2M_PetFubenRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetFubenRewardResponse)]
    public partial class M2C_PetFubenRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetFubenRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetFubenRewardResponse), isFromPool) as M2C_PetFubenRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetHeXinChouKaRequest)]
    [ResponseType(nameof(M2C_PetHeXinChouKaResponse))]
    public partial class C2M_PetHeXinChouKaRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetHeXinChouKaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetHeXinChouKaRequest), isFromPool) as C2M_PetHeXinChouKaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ChouKaType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ChouKaType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetHeXinChouKaResponse)]
    public partial class M2C_PetHeXinChouKaResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetHeXinChouKaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetHeXinChouKaResponse), isFromPool) as M2C_PetHeXinChouKaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetHeXinExploreReward)]
    [ResponseType(nameof(M2C_PetHeXinExploreReward))]
    public partial class C2M_PetHeXinExploreReward : MessageObject, ILocationRequest
    {
        public static C2M_PetHeXinExploreReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetHeXinExploreReward), isFromPool) as C2M_PetHeXinExploreReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// PetExploreReward.ley
        /// </summary>
        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetHeXinExploreReward)]
    public partial class M2C_PetHeXinExploreReward : MessageObject, ILocationResponse
    {
        public static M2C_PetHeXinExploreReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetHeXinExploreReward), isFromPool) as M2C_PetHeXinExploreReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物之核合成
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetHeXinHeChengRequest)]
    [ResponseType(nameof(M2C_PetHeXinHeChengResponse))]
    public partial class C2M_PetHeXinHeChengRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetHeXinHeChengRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetHeXinHeChengRequest), isFromPool) as C2M_PetHeXinHeChengRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long BagInfoID_1 { get; set; }

        [MemoryPackOrder(1)]
        public long BagInfoID_2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BagInfoID_1 = default;
            this.BagInfoID_2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetHeXinHeChengResponse)]
    public partial class M2C_PetHeXinHeChengResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetHeXinHeChengResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetHeXinHeChengResponse), isFromPool) as M2C_PetHeXinHeChengResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物之核一键合成
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetHeXinHeChengQuickRequest)]
    [ResponseType(nameof(M2C_PetHeXinHeChengQuickResponse))]
    public partial class C2M_PetHeXinHeChengQuickRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetHeXinHeChengQuickRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetHeXinHeChengQuickRequest), isFromPool) as C2M_PetHeXinHeChengQuickRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetHeXinHeChengQuickResponse)]
    public partial class M2C_PetHeXinHeChengQuickResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetHeXinHeChengQuickResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetHeXinHeChengQuickResponse), isFromPool) as M2C_PetHeXinHeChengQuickResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMingOccupyRequest)]
    [ResponseType(nameof(M2C_PetMingOccupyResponse))]
    public partial class C2M_PetMingOccupyRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMingOccupyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMingOccupyRequest), isFromPool) as C2M_PetMingOccupyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 0 放弃 1 占领
        /// </summary>
        [MemoryPackOrder(0)]
        public int Operate { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Operate = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMingOccupyResponse)]
    public partial class M2C_PetMingOccupyResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMingOccupyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMingOccupyResponse), isFromPool) as M2C_PetMingOccupyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMingRecordRequest)]
    [ResponseType(nameof(M2C_PetMingRecordResponse))]
    public partial class C2M_PetMingRecordRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMingRecordRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMingRecordRequest), isFromPool) as C2M_PetMingRecordRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMingRecordResponse)]
    public partial class M2C_PetMingRecordResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMingRecordResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMingRecordResponse), isFromPool) as M2C_PetMingRecordResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PetMingRecord> PetMingRecords { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetMingRecords.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMingResetRequest)]
    [ResponseType(nameof(M2C_PetMingResetResponse))]
    public partial class C2M_PetMingResetRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMingResetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMingResetRequest), isFromPool) as C2M_PetMingResetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMingResetResponse)]
    public partial class M2C_PetMingResetResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMingResetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMingResetResponse), isFromPool) as M2C_PetMingResetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMingRewardRequest)]
    [ResponseType(nameof(M2C_PetMingRewardResponse))]
    public partial class C2M_PetMingRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMingRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMingRewardRequest), isFromPool) as C2M_PetMingRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Number { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Number = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMingRewardResponse)]
    public partial class M2C_PetMingRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMingRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMingRewardResponse), isFromPool) as M2C_PetMingRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetOpenCangKu)]
    [ResponseType(nameof(M2C_PetOpenCangKu))]
    public partial class C2M_PetOpenCangKu : MessageObject, ILocationRequest
    {
        public static C2M_PetOpenCangKu Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetOpenCangKu), isFromPool) as C2M_PetOpenCangKu;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OpenIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OpenIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetOpenCangKu)]
    public partial class M2C_PetOpenCangKu : MessageObject, ILocationResponse
    {
        public static M2C_PetOpenCangKu Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetOpenCangKu), isFromPool) as M2C_PetOpenCangKu;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetPutCangKu)]
    [ResponseType(nameof(M2C_PetPutCangKu))]
    public partial class C2M_PetPutCangKu : MessageObject, ILocationRequest
    {
        public static C2M_PetPutCangKu Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetPutCangKu), isFromPool) as C2M_PetPutCangKu;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int PetStatus { get; set; }

        [MemoryPackOrder(2)]
        public int OpenIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.PetStatus = default;
            this.OpenIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetPutCangKu)]
    public partial class M2C_PetPutCangKu : MessageObject, ILocationResponse
    {
        public static M2C_PetPutCangKu Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetPutCangKu), isFromPool) as M2C_PetPutCangKu;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物守护
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetShouHuActiveRequest)]
    [ResponseType(nameof(M2C_PetShouHuActiveResponse))]
    public partial class C2M_PetShouHuActiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetShouHuActiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetShouHuActiveRequest), isFromPool) as C2M_PetShouHuActiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int PetShouHuActive { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PetShouHuActive = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetShouHuActiveResponse)]
    public partial class M2C_PetShouHuActiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetShouHuActiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetShouHuActiveResponse), isFromPool) as M2C_PetShouHuActiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int PetShouHuActive { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetShouHuActive = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物守护
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetShouHuRequest)]
    [ResponseType(nameof(M2C_PetShouHuResponse))]
    public partial class C2M_PetShouHuRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetShouHuRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetShouHuRequest), isFromPool) as C2M_PetShouHuRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PetInfoId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetShouHuResponse)]
    public partial class M2C_PetShouHuResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetShouHuResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetShouHuResponse), isFromPool) as M2C_PetShouHuResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<long> PetShouHuList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetShouHuList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物共鸣
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetEchoOperateRequest)]
    [ResponseType(nameof(M2C_PetEchoOperateResponse))]
    public partial class C2M_PetEchoOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetEchoOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetEchoOperateRequest), isFromPool) as C2M_PetEchoOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Position { get; set; }

        [MemoryPackOrder(1)]
        public int OperateType { get; set; }

        /// <summary>
        /// 操作类型1 开启格子 2 更换宠物
        /// </summary>
        [MemoryPackOrder(2)]
        public long ParamId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Position = default;
            this.OperateType = default;
            this.ParamId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetEchoOperateResponse)]
    public partial class M2C_PetEchoOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetEchoOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetEchoOperateResponse), isFromPool) as M2C_PetEchoOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<KeyValuePairInt> PetEchoList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PetEchoList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetTakeOutBag)]
    [ResponseType(nameof(M2C_PetTakeOutBag))]
    public partial class C2M_PetTakeOutBag : MessageObject, ILocationRequest
    {
        public static C2M_PetTakeOutBag Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetTakeOutBag), isFromPool) as C2M_PetTakeOutBag;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetTakeOutBag)]
    public partial class M2C_PetTakeOutBag : MessageObject, ILocationResponse
    {
        public static M2C_PetTakeOutBag Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetTakeOutBag), isFromPool) as M2C_PetTakeOutBag;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetTargetLockRequest)]
    [ResponseType(nameof(M2C_PetTargetLockResponse))]
    public partial class C2M_PetTargetLockRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetTargetLockRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetTargetLockRequest), isFromPool) as C2M_PetTargetLockRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long TargetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TargetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetTargetLockResponse)]
    public partial class M2C_PetTargetLockResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetTargetLockResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetTargetLockResponse), isFromPool) as M2C_PetTargetLockResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetZhuangJiaUpRequest)]
    [ResponseType(nameof(M2C_PetZhuangJiaUpResponse))]
    public partial class C2M_PetZhuangJiaUpRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetZhuangJiaUpRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetZhuangJiaUpRequest), isFromPool) as C2M_PetZhuangJiaUpRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetZhuangJiaUpResponse)]
    public partial class M2C_PetZhuangJiaUpResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetZhuangJiaUpResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetZhuangJiaUpResponse), isFromPool) as M2C_PetZhuangJiaUpResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物蛋开启新的孵化位置
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetEggOpenSlot)]
    [ResponseType(nameof(M2C_RolePetEggOpenSlot))]
    public partial class C2M_RolePetEggOpenSlot : MessageObject, ILocationRequest
    {
        public static C2M_RolePetEggOpenSlot Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetEggOpenSlot), isFromPool) as C2M_RolePetEggOpenSlot;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetEggOpenSlot)]
    public partial class M2C_RolePetEggOpenSlot : MessageObject, ILocationResponse
    {
        public static M2C_RolePetEggOpenSlot Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetEggOpenSlot), isFromPool) as M2C_RolePetEggOpenSlot;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物蛋孵化
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetEggHatch)]
    [ResponseType(nameof(M2C_RolePetEggHatch))]
    public partial class C2M_RolePetEggHatch : MessageObject, ILocationRequest
    {
        public static C2M_RolePetEggHatch Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetEggHatch), isFromPool) as C2M_RolePetEggHatch;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long BagInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.BagInfoId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetEggHatch)]
    public partial class M2C_RolePetEggHatch : MessageObject, ILocationResponse
    {
        public static M2C_RolePetEggHatch Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetEggHatch), isFromPool) as M2C_RolePetEggHatch;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public KeyValuePairLong4 RolePetEgg { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetEgg = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物蛋开启【时间未到需要扣除钻石】
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetEggOpen)]
    [ResponseType(nameof(M2C_RolePetEggOpen))]
    public partial class C2M_RolePetEggOpen : MessageObject, ILocationRequest
    {
        public static C2M_RolePetEggOpen Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetEggOpen), isFromPool) as C2M_RolePetEggOpen;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetEggOpen)]
    public partial class M2C_RolePetEggOpen : MessageObject, ILocationResponse
    {
        public static M2C_RolePetEggOpen Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetEggOpen), isFromPool) as M2C_RolePetEggOpen;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo PetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物蛋卸下
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetEggPutOut)]
    [ResponseType(nameof(M2C_RolePetEggPutOut))]
    public partial class C2M_RolePetEggPutOut : MessageObject, ILocationRequest
    {
        public static C2M_RolePetEggPutOut Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetEggPutOut), isFromPool) as C2M_RolePetEggPutOut;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetEggPutOut)]
    public partial class M2C_RolePetEggPutOut : MessageObject, ILocationResponse
    {
        public static M2C_RolePetEggPutOut Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetEggPutOut), isFromPool) as M2C_RolePetEggPutOut;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public KeyValuePairLong4 RolePetEgg { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetEgg = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 更改宠物之核
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetHeXin)]
    [ResponseType(nameof(M2C_RolePetHeXin))]
    public partial class C2M_RolePetHeXin : MessageObject, ILocationRequest
    {
        public static C2M_RolePetHeXin Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetHeXin), isFromPool) as C2M_RolePetHeXin;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public long BagInfoId { get; set; }

        [MemoryPackOrder(2)]
        public int Position { get; set; }

        [MemoryPackOrder(3)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.BagInfoId = default;
            this.Position = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetHeXin)]
    public partial class M2C_RolePetHeXin : MessageObject, ILocationResponse
    {
        public static M2C_RolePetHeXin Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetHeXin), isFromPool) as M2C_RolePetHeXin;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物加点
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetJiadian)]
    [ResponseType(nameof(M2C_RolePetJiadian))]
    public partial class C2M_RolePetJiadian : MessageObject, ILocationRequest
    {
        public static C2M_RolePetJiadian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetJiadian), isFromPool) as C2M_RolePetJiadian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public List<int> AddPropretyValue { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.AddPropretyValue.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetJiadian)]
    public partial class M2C_RolePetJiadian : MessageObject, ILocationResponse
    {
        public static M2C_RolePetJiadian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetJiadian), isFromPool) as M2C_RolePetJiadian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetProtect)]
    [ResponseType(nameof(M2C_RolePetProtect))]
    public partial class C2M_RolePetProtect : MessageObject, ILocationRequest
    {
        public static C2M_RolePetProtect Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetProtect), isFromPool) as C2M_RolePetProtect;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public bool IsProtect { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.IsProtect = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetProtect)]
    public partial class M2C_RolePetProtect : MessageObject, ILocationResponse
    {
        public static M2C_RolePetProtect Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetProtect), isFromPool) as M2C_RolePetProtect;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物改名
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetRName)]
    [ResponseType(nameof(M2C_RolePetRName))]
    public partial class C2M_RolePetRName : MessageObject, ILocationRequest
    {
        public static C2M_RolePetRName Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetRName), isFromPool) as C2M_RolePetRName;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public string PetName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.PetName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetRName)]
    public partial class M2C_RolePetRName : MessageObject, ILocationResponse
    {
        public static M2C_RolePetRName Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetRName), isFromPool) as M2C_RolePetRName;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 更改宠物皮肤
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetSkinSet)]
    [ResponseType(nameof(M2C_RolePetSkinSet))]
    public partial class C2M_RolePetSkinSet : MessageObject, ILocationRequest
    {
        public static C2M_RolePetSkinSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetSkinSet), isFromPool) as C2M_RolePetSkinSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int SkinId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.SkinId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetSkinSet)]
    public partial class M2C_RolePetSkinSet : MessageObject, ILocationResponse
    {
        public static M2C_RolePetSkinSet Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetSkinSet), isFromPool) as M2C_RolePetSkinSet;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物进化
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetUpStage)]
    [ResponseType(nameof(M2C_RolePetUpStage))]
    public partial class C2M_RolePetUpStage : MessageObject, ILocationRequest
    {
        public static C2M_RolePetUpStage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetUpStage), isFromPool) as C2M_RolePetUpStage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public long PetInfoXianJiId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.PetInfoXianJiId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetUpStage)]
    public partial class M2C_RolePetUpStage : MessageObject, ILocationResponse
    {
        public static M2C_RolePetUpStage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetUpStage), isFromPool) as M2C_RolePetUpStage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo OldPetInfo { get; set; }

        [MemoryPackOrder(1)]
        public RolePetInfo NewPetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.OldPetInfo = default;
            this.NewPetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物修炼
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetXiuLian)]
    [ResponseType(nameof(M2C_RolePetXiuLian))]
    public partial class C2M_RolePetXiuLian : MessageObject, ILocationRequest
    {
        public static C2M_RolePetXiuLian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetXiuLian), isFromPool) as C2M_RolePetXiuLian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int XiuLianId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.XiuLianId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetXiuLian)]
    public partial class M2C_RolePetXiuLian : MessageObject, ILocationResponse
    {
        public static M2C_RolePetXiuLian Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetXiuLian), isFromPool) as M2C_RolePetXiuLian;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo rolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.rolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物蛋放入
    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetEggPut)]
    [ResponseType(nameof(M2C_RolePetEggPut))]
    public partial class C2M_RolePetEggPut : MessageObject, ILocationRequest
    {
        public static C2M_RolePetEggPut Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetEggPut), isFromPool) as C2M_RolePetEggPut;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long BagInfoId { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.BagInfoId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetEggPut)]
    public partial class M2C_RolePetEggPut : MessageObject, ILocationResponse
    {
        public static M2C_RolePetEggPut Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetEggPut), isFromPool) as M2C_RolePetEggPut;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public KeyValuePairLong4 RolePetEgg { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RolePetEgg = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.BattleSummonInfo)]
    public partial class BattleSummonInfo : MessageObject
    {
        public static BattleSummonInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(BattleSummonInfo), isFromPool) as BattleSummonInfo;
        }

        /// <summary>
        /// BattleSummonConfig
        /// </summary>
        [MemoryPackOrder(0)]
        public int SummonId { get; set; }

        /// <summary>
        /// 最近一次召唤的时间戳
        /// </summary>
        [MemoryPackOrder(1)]
        public long SummonTime { get; set; }

        /// <summary>
        /// 召唤次数
        /// </summary>
        [MemoryPackOrder(2)]
        public int SummonNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SummonId = default;
            this.SummonTime = default;
            this.SummonNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FubenSettlement)]
    public partial class M2C_FubenSettlement : MessageObject, IMessage
    {
        public static M2C_FubenSettlement Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FubenSettlement), isFromPool) as M2C_FubenSettlement;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 0失败 1胜利
        /// </summary>
        [MemoryPackOrder(0)]
        public int BattleResult { get; set; }

        /// <summary>
        /// 评级
        /// </summary>
        [MemoryPackOrder(1)]
        public int BattleGrade { get; set; }

        [MemoryPackOrder(2)]
        public int RewardExp { get; set; }

        [MemoryPackOrder(3)]
        public int RewardGold { get; set; }

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(4)]
        public List<RewardItem> RewardList { get; set; } = new();

        /// <summary>
        /// 冒险家额外奖励
        /// </summary>
        [MemoryPackOrder(5)]
        public List<RewardItem> RewardListExcess { get; set; } = new();

        /// <summary>
        /// 领主 时间 伤害
        /// </summary>
        [MemoryPackOrder(6)]
        public List<int> StarInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.ActorId = default;
            this.BattleResult = default;
            this.BattleGrade = default;
            this.RewardExp = default;
            this.RewardGold = default;
            this.RewardList.Clear();
            this.RewardListExcess.Clear();
            this.StarInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园刷新
    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanUpdate)]
    public partial class M2C_JiaYuanUpdate : MessageObject, IMessage
    {
        public static M2C_JiaYuanUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanUpdate), isFromPool) as M2C_JiaYuanUpdate;
        }

        [MemoryPackOrder(1)]
        public List<JiaYuanPurchaseItem> PurchaseItemList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PurchaseItemList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FriendApplyResult)]
    public partial class M2C_FriendApplyResult : MessageObject, IMessage
    {
        public static M2C_FriendApplyResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FriendApplyResult), isFromPool) as M2C_FriendApplyResult;
        }

        [MemoryPackOrder(0)]
        public FriendInfo FriendInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.FriendInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ChengJiuListRequest)]
    [ResponseType(nameof(M2C_ChengJiuListResponse))]
    public partial class C2M_ChengJiuListRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChengJiuListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChengJiuListRequest), isFromPool) as C2M_ChengJiuListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChengJiuListResponse)]
    public partial class M2C_ChengJiuListResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChengJiuListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChengJiuListResponse), isFromPool) as M2C_ChengJiuListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<ChengJiuInfo> ChengJiuProgessList { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<int> ChengJiuCompleteList { get; set; } = new();

        [MemoryPackOrder(2)]
        public int TotalChengJiuPoint { get; set; }

        [MemoryPackOrder(3)]
        public List<int> AlreadReceivedId { get; set; } = new();

        [MemoryPackOrder(4)]
        public List<JingLingInfo> JingLingList { get; set; } = new();

        [MemoryPackOrder(5)]
        public List<int> PetTuJianActives { get; set; } = new();

        [MemoryPackOrder(6)]
        public int RandomDrop { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ChengJiuProgessList.Clear();
            this.ChengJiuCompleteList.Clear();
            this.TotalChengJiuPoint = default;
            this.AlreadReceivedId.Clear();
            this.JingLingList.Clear();
            this.PetTuJianActives.Clear();
            this.RandomDrop = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ChengJiuRewardRequest)]
    [ResponseType(nameof(M2C_ChengJiuRewardResponse))]
    public partial class C2M_ChengJiuRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChengJiuRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChengJiuRewardRequest), isFromPool) as C2M_ChengJiuRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChengJiuRewardResponse)]
    public partial class M2C_ChengJiuRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChengJiuRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChengJiuRewardResponse), isFromPool) as M2C_ChengJiuRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 抓捕精灵
    [MemoryPackable]
    [Message(OuterMessage.C2M_ZhuaBuType1Request)]
    [ResponseType(nameof(M2C_ZhuaBuType1Response))]
    public partial class C2M_ZhuaBuType1Request : MessageObject, ILocationRequest
    {
        public static C2M_ZhuaBuType1Request Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ZhuaBuType1Request), isFromPool) as C2M_ZhuaBuType1Request;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long JingLingId { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(4)]
        public string OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.JingLingId = default;
            this.ItemId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ZhuaBuType1Response)]
    public partial class M2C_ZhuaBuType1Response : MessageObject, ILocationResponse
    {
        public static M2C_ZhuaBuType1Response Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ZhuaBuType1Response), isFromPool) as M2C_ZhuaBuType1Response;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 抓捕宠物(新)
    [MemoryPackable]
    [Message(OuterMessage.C2M_ZhuaBuType2Request)]
    [ResponseType(nameof(M2C_ZhuaBuType2Response))]
    public partial class C2M_ZhuaBuType2Request : MessageObject, ILocationRequest
    {
        public static C2M_ZhuaBuType2Request Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ZhuaBuType2Request), isFromPool) as C2M_ZhuaBuType2Request;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long JingLingId { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(4)]
        public string OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.JingLingId = default;
            this.ItemId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ZhuaBuType2Response)]
    public partial class M2C_ZhuaBuType2Response : MessageObject, ILocationResponse
    {
        public static M2C_ZhuaBuType2Response Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ZhuaBuType2Response), isFromPool) as M2C_ZhuaBuType2Response;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 精灵掉落
    [MemoryPackable]
    [Message(OuterMessage.C2M_JingLingDropRequest)]
    [ResponseType(nameof(M2C_JingLingDropResponse))]
    public partial class C2M_JingLingDropRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingLingDropRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingLingDropRequest), isFromPool) as C2M_JingLingDropRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingLingDropResponse)]
    public partial class M2C_JingLingDropResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingLingDropResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingLingDropResponse), isFromPool) as M2C_JingLingDropResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 出战精灵
    [MemoryPackable]
    [Message(OuterMessage.C2M_JingLingUseRequest)]
    [ResponseType(nameof(M2C_JingLingUseResponse))]
    public partial class C2M_JingLingUseRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingLingUseRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingLingUseRequest), isFromPool) as C2M_JingLingUseRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int JingLingId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.JingLingId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingLingUseResponse)]
    public partial class M2C_JingLingUseResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingLingUseResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingLingUseResponse), isFromPool) as M2C_JingLingUseResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_UnitStateUpdate)]
    public partial class C2M_UnitStateUpdate : MessageObject, ILocationMessage
    {
        public static C2M_UnitStateUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnitStateUpdate), isFromPool) as C2M_UnitStateUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long StateType { get; set; }

        [MemoryPackOrder(2)]
        public int StateOperateType { get; set; }

        [MemoryPackOrder(3)]
        public int StateTime { get; set; }

        [MemoryPackOrder(4)]
        public string StateValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.StateType = default;
            this.StateOperateType = default;
            this.StateTime = default;
            this.StateValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitStateUpdate)]
    public partial class M2C_UnitStateUpdate : MessageObject, IMessage
    {
        public static M2C_UnitStateUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitStateUpdate), isFromPool) as M2C_UnitStateUpdate;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long StateType { get; set; }

        [MemoryPackOrder(2)]
        public int StateOperateType { get; set; }

        [MemoryPackOrder(3)]
        public int StateTime { get; set; }

        [MemoryPackOrder(4)]
        public string StateValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.StateType = default;
            this.StateOperateType = default;
            this.StateTime = default;
            this.StateValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitBuffUpdate)]
    public partial class M2C_UnitBuffUpdate : MessageObject, IMessage
    {
        public static M2C_UnitBuffUpdate Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitBuffUpdate), isFromPool) as M2C_UnitBuffUpdate;
        }

        [MemoryPackOrder(0)]
        public int BuffID { get; set; }

        [MemoryPackOrder(1)]
        public long UnitIdBelongTo { get; set; }

        [MemoryPackOrder(3)]
        public int BuffOperateType { get; set; }

        [MemoryPackOrder(4)]
        public List<float> TargetPostion { get; set; } = new();

        [MemoryPackOrder(5)]
        public long BuffEndTime { get; set; }

        [MemoryPackOrder(6)]
        public string Spellcaster { get; set; }

        [MemoryPackOrder(7)]
        public int UnitType { get; set; }

        [MemoryPackOrder(8)]
        public int UnitConfigId { get; set; }

        [MemoryPackOrder(9)]
        public int SkillId { get; set; }

        [MemoryPackOrder(10)]
        public long UnitIdFrom { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.BuffID = default;
            this.UnitIdBelongTo = default;
            this.BuffOperateType = default;
            this.TargetPostion.Clear();
            this.BuffEndTime = default;
            this.Spellcaster = default;
            this.UnitType = default;
            this.UnitConfigId = default;
            this.SkillId = default;
            this.UnitIdFrom = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitBuffRemove)]
    public partial class M2C_UnitBuffRemove : MessageObject, IMessage
    {
        public static M2C_UnitBuffRemove Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitBuffRemove), isFromPool) as M2C_UnitBuffRemove;
        }

        [MemoryPackOrder(0)]
        public int BuffID { get; set; }

        [MemoryPackOrder(1)]
        public long UnitIdBelongTo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.BuffID = default;
            this.UnitIdBelongTo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitBuffStatus)]
    public partial class M2C_UnitBuffStatus : MessageObject, IMessage
    {
        public static M2C_UnitBuffStatus Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitBuffStatus), isFromPool) as M2C_UnitBuffStatus;
        }

        [MemoryPackOrder(0)]
        public int BuffID { get; set; }

        [MemoryPackOrder(1)]
        public string FlyText { get; set; }

        [MemoryPackOrder(2)]
        public int FlyType { get; set; }

        [MemoryPackOrder(3)]
        public long UnitID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.BuffID = default;
            this.FlyText = default;
            this.FlyType = default;
            this.UnitID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 二段技能
    [MemoryPackable]
    [Message(OuterMessage.M2C_SkillSecondResult)]
    public partial class M2C_SkillSecondResult : MessageObject, IMessage
    {
        public static M2C_SkillSecondResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SkillSecondResult), isFromPool) as M2C_SkillSecondResult;
        }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int SkillId { get; set; }

        [MemoryPackOrder(2)]
        public List<long> HurtIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.SkillId = default;
            this.HurtIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.TokenRecvive)]
    public partial class TokenRecvive : MessageObject
    {
        public static TokenRecvive Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(TokenRecvive), isFromPool) as TokenRecvive;
        }

        [MemoryPackOrder(0)]
        public int ActivityId { get; set; }

        [MemoryPackOrder(1)]
        public int ReceiveIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActivityId = default;
            this.ReceiveIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 第一版的活动
    [MemoryPackable]
    [Message(OuterMessage.ActivityV1InfoProto)]
    public partial class ActivityV1InfoProto : MessageObject
    {
        public static ActivityV1InfoProto Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ActivityV1InfoProto), isFromPool) as ActivityV1InfoProto;
        }

        /// <summary>
        /// 竞猜的数值
        /// </summary>
        [MemoryPackOrder(0)]
        public List<int> GuessIds { get; set; } = new();

        /// <summary>
        /// 每日清空，中奖的时间段(0 ，14，18， 21)
        /// </summary>
        [MemoryPackOrder(1)]
        public List<int> LastGuessReward { get; set; } = new();

        /// <summary>
        /// 消耗钻石领取记录
        /// </summary>
        [MemoryPackOrder(2)]
        public List<int> ConsumeDiamondReward { get; set; } = new();

        /// <summary>
        /// 抽卡次数奖励记录
        /// </summary>
        [MemoryPackOrder(3)]
        public List<int> ChouKaNumberReward { get; set; } = new();

        /// <summary>
        /// 当天掉落Id. 客户端显示奖励DropHelper.DropIDToShowItem()需要确认一下是否这个函数
        /// </summary>
        [MemoryPackOrder(4)]
        public int ChouKaDropId { get; set; }

        /// <summary>
        /// 所有每日礼包
        /// </summary>
        [MemoryPackOrder(5)]
        public List<int> LiBaoAllIds { get; set; } = new();

        /// <summary>
        /// 已购买每日礼包
        /// </summary>
        [MemoryPackOrder(6)]
        public List<int> LiBaoBuyIds { get; set; } = new();

        /// <summary>
        /// 饱食度
        /// </summary>
        [MemoryPackOrder(7)]
        public int BaoShiDu { get; set; }

        /// <summary>
        /// 抽卡2所有奖励列表 @切分
        /// </summary>
        [MemoryPackOrder(8)]
        public string ChouKa2ItemList { get; set; }

        /// <summary>
        /// 抽卡2已抽取奖励   达到一半可以刷新奖励
        /// </summary>
        [MemoryPackOrder(9)]
        public List<int> ChouKa2RewardIds { get; set; } = new();

        /// <summary>
        /// 竞猜开奖字
        /// </summary>
        [MemoryPackOrder(10)]
        public List<int> OpenGuessIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.GuessIds.Clear();
            this.LastGuessReward.Clear();
            this.ConsumeDiamondReward.Clear();
            this.ChouKaNumberReward.Clear();
            this.ChouKaDropId = default;
            this.LiBaoAllIds.Clear();
            this.LiBaoBuyIds.Clear();
            this.BaoShiDu = default;
            this.ChouKa2ItemList = default;
            this.ChouKa2RewardIds.Clear();
            this.OpenGuessIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 闪电链
    [MemoryPackable]
    [Message(OuterMessage.M2C_ChainLightning)]
    public partial class M2C_ChainLightning : MessageObject, IMessage
    {
        public static M2C_ChainLightning Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChainLightning), isFromPool) as M2C_ChainLightning;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long TargetID { get; set; }

        [MemoryPackOrder(2)]
        public int SkillID { get; set; }

        [MemoryPackOrder(5)]
        public float PosX { get; set; }

        [MemoryPackOrder(6)]
        public float PosY { get; set; }

        [MemoryPackOrder(7)]
        public float PosZ { get; set; }

        [MemoryPackOrder(8)]
        public int Type { get; set; }

        [MemoryPackOrder(9)]
        public long InstanceId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.TargetID = default;
            this.SkillID = default;
            this.PosX = default;
            this.PosY = default;
            this.PosZ = default;
            this.Type = default;
            this.InstanceId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 商店购买
    [MemoryPackable]
    [Message(OuterMessage.C2M_StoreBuyRequest)]
    [ResponseType(nameof(M2C_StoreBuyResponse))]
    public partial class C2M_StoreBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_StoreBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StoreBuyRequest), isFromPool) as C2M_StoreBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SellItemID { get; set; }

        [MemoryPackOrder(1)]
        public int SellItemNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SellItemID = default;
            this.SellItemNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StoreBuyResponse)]
    public partial class M2C_StoreBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_StoreBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StoreBuyResponse), isFromPool) as M2C_StoreBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_AccountWarehousOperateRequest)]
    [ResponseType(nameof(M2C_AccountWarehousOperateResponse))]
    public partial class C2M_AccountWarehousOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_AccountWarehousOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_AccountWarehousOperateRequest), isFromPool) as C2M_AccountWarehousOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1放入仓库  2取出仓库 3整理仓库
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperatateType { get; set; }

        [MemoryPackOrder(2)]
        public long OperateBagID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperatateType = default;
            this.OperateBagID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_AccountWarehousOperateResponse)]
    public partial class M2C_AccountWarehousOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_AccountWarehousOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_AccountWarehousOperateResponse), isFromPool) as M2C_AccountWarehousOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(1)]
        public ItemInfoProto BagInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.BagInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 洗练装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemXiLianRequest)]
    [ResponseType(nameof(M2C_ItemXiLianResponse))]
    public partial class C2M_ItemXiLianRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemXiLianRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemXiLianRequest), isFromPool) as C2M_ItemXiLianRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(0)]
        public int Times { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID = default;
            this.Times = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemXiLianResponse)]
    public partial class M2C_ItemXiLianResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemXiLianResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemXiLianResponse), isFromPool) as M2C_ItemXiLianResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<ItemXiLianResult> ItemXiLianResults { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.ItemXiLianResults.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemXiLianNumReward)]
    [ResponseType(nameof(M2C_ItemXiLianNumReward))]
    public partial class C2M_ItemXiLianNumReward : MessageObject, ILocationRequest
    {
        public static C2M_ItemXiLianNumReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemXiLianNumReward), isFromPool) as C2M_ItemXiLianNumReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// PetExploreReward.ley
        /// </summary>
        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemXiLianNumReward)]
    public partial class M2C_ItemXiLianNumReward : MessageObject, ILocationResponse
    {
        public static M2C_ItemXiLianNumReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemXiLianNumReward), isFromPool) as M2C_ItemXiLianNumReward;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemXiLianRewardRequest)]
    [ResponseType(nameof(M2C_ItemXiLianRewardResponse))]
    public partial class C2M_ItemXiLianRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemXiLianRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemXiLianRewardRequest), isFromPool) as C2M_ItemXiLianRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int XiLianId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.XiLianId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemXiLianRewardResponse)]
    public partial class M2C_ItemXiLianRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemXiLianRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemXiLianRewardResponse), isFromPool) as M2C_ItemXiLianRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 洗练装备
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemXiLianSelectRequest)]
    [ResponseType(nameof(M2C_ItemXiLianSelectResponse))]
    public partial class C2M_ItemXiLianSelectRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemXiLianSelectRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemXiLianSelectRequest), isFromPool) as C2M_ItemXiLianSelectRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        [MemoryPackOrder(0)]
        public ItemXiLianResult ItemXiLianResult { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID = default;
            this.ItemXiLianResult = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemXiLianSelectResponse)]
    public partial class M2C_ItemXiLianSelectResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemXiLianSelectResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemXiLianSelectResponse), isFromPool) as M2C_ItemXiLianSelectResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 洗练转移
    [MemoryPackable]
    [Message(OuterMessage.C2M_ItemXiLianTransferRequest)]
    [ResponseType(nameof(M2C_ItemXiLianTransferResponse))]
    public partial class C2M_ItemXiLianTransferRequest : MessageObject, ILocationRequest
    {
        public static C2M_ItemXiLianTransferRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ItemXiLianTransferRequest), isFromPool) as C2M_ItemXiLianTransferRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OperateBagID_1 { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID_2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateBagID_1 = default;
            this.OperateBagID_2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ItemXiLianTransferResponse)]
    public partial class M2C_ItemXiLianTransferResponse : MessageObject, ILocationResponse
    {
        public static M2C_ItemXiLianTransferResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ItemXiLianTransferResponse), isFromPool) as M2C_ItemXiLianTransferResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_MakeSelectRequest)]
    [ResponseType(nameof(M2C_MakeSelectResponse))]
    public partial class C2M_MakeSelectRequest : MessageObject, ILocationRequest
    {
        public static C2M_MakeSelectRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_MakeSelectRequest), isFromPool) as C2M_MakeSelectRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int MakeType { get; set; }

        /// <summary>
        /// 1第一套方案 2第二套方案
        /// </summary>
        [MemoryPackOrder(1)]
        public int Plan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MakeType = default;
            this.Plan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_MakeSelectResponse)]
    public partial class M2C_MakeSelectResponse : MessageObject, ILocationResponse
    {
        public static M2C_MakeSelectResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_MakeSelectResponse), isFromPool) as M2C_MakeSelectResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> MakeList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MakeList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_MakeResetRequest)]
    [ResponseType(nameof(M2C_MakeResetResponse))]
    public partial class C2M_MakeResetRequest : MessageObject, ILocationRequest
    {
        public static C2M_MakeResetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_MakeResetRequest), isFromPool) as C2M_MakeResetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1第一套方案 2第二套方案
        /// </summary>
        [MemoryPackOrder(0)]
        public int Plan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Plan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_MakeResetResponse)]
    public partial class M2C_MakeResetResponse : MessageObject, ILocationResponse
    {
        public static M2C_MakeResetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_MakeResetResponse), isFromPool) as M2C_MakeResetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> MakeList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MakeList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_MakeEquipRequest)]
    [ResponseType(nameof(M2C_MakeEquipResponse))]
    public partial class C2M_MakeEquipRequest : MessageObject, ILocationRequest
    {
        public static C2M_MakeEquipRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_MakeEquipRequest), isFromPool) as C2M_MakeEquipRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int MakeId { get; set; }

        [MemoryPackOrder(1)]
        public long BagInfoID { get; set; }

        [MemoryPackOrder(2)]
        public int Plan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MakeId = default;
            this.BagInfoID = default;
            this.Plan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_MakeEquipResponse)]
    public partial class M2C_MakeEquipResponse : MessageObject, ILocationResponse
    {
        public static M2C_MakeEquipResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_MakeEquipResponse), isFromPool) as M2C_MakeEquipResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int ItemId { get; set; }

        [MemoryPackOrder(1)]
        public int NewMakeId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ItemId = default;
            this.NewMakeId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TurtleRewardMessage)]
    public partial class M2C_TurtleRewardMessage : MessageObject, IMessage
    {
        public static M2C_TurtleRewardMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TurtleRewardMessage), isFromPool) as M2C_TurtleRewardMessage;
        }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        /// <summary>
        /// 获奖玩家名字
        /// </summary>
        [MemoryPackOrder(1)]
        public List<string> PlayerName { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitID = default;
            this.PlayerName.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_BloodstoneQiangHuaRequest)]
    [ResponseType(nameof(M2C_BloodstoneQiangHuaResponse))]
    public partial class C2M_BloodstoneQiangHuaRequest : MessageObject, ILocationRequest
    {
        public static C2M_BloodstoneQiangHuaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BloodstoneQiangHuaRequest), isFromPool) as C2M_BloodstoneQiangHuaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BloodstoneQiangHuaResponse)]
    public partial class M2C_BloodstoneQiangHuaResponse : MessageObject, ILocationResponse
    {
        public static M2C_BloodstoneQiangHuaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BloodstoneQiangHuaResponse), isFromPool) as M2C_BloodstoneQiangHuaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int Level { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.Level = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会争霸赛捐献
    [MemoryPackable]
    [Message(OuterMessage.C2M_DonationRequest)]
    [ResponseType(nameof(M2C_DonationResponse))]
    public partial class C2M_DonationRequest : MessageObject, ILocationRequest
    {
        public static C2M_DonationRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_DonationRequest), isFromPool) as C2M_DonationRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long Price { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Price = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_DonationResponse)]
    public partial class M2C_DonationResponse : MessageObject, ILocationResponse
    {
        public static M2C_DonationResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_DonationResponse), isFromPool) as M2C_DonationResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 创建公会
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionCreateRequest)]
    [ResponseType(nameof(M2C_UnionCreateResponse))]
    public partial class C2M_UnionCreateRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionCreateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionCreateRequest), isFromPool) as C2M_UnionCreateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public string UnionName { get; set; }

        /// <summary>
        /// 公会宣言
        /// </summary>
        [MemoryPackOrder(1)]
        public string UnionPurpose { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionName = default;
            this.UnionPurpose = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionCreateResponse)]
    public partial class M2C_UnionCreateResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionCreateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionCreateResponse), isFromPool) as M2C_UnionCreateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionDonationRequest)]
    [ResponseType(nameof(M2C_UnionDonationResponse))]
    public partial class C2M_UnionDonationRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionDonationRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionDonationRequest), isFromPool) as C2M_UnionDonationRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long Price { get; set; }

        [MemoryPackOrder(1)]
        public int Type { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Price = default;
            this.Type = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionDonationResponse)]
    public partial class M2C_UnionDonationResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionDonationResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionDonationResponse), isFromPool) as M2C_UnionDonationResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 针对自己，每日祝福
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionWishGetRequest)]
    [ResponseType(nameof(M2C_UnionWishGetResponse))]
    public partial class C2M_UnionWishGetRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionWishGetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionWishGetRequest), isFromPool) as C2M_UnionWishGetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1免费祝福 2金币祝福 3 钻石祝福
        /// </summary>
        [MemoryPackOrder(0)]
        public int Type { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Type = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionWishGetResponse)]
    public partial class M2C_UnionWishGetResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionWishGetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionWishGetResponse), isFromPool) as M2C_UnionWishGetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 会长才能操作。 给全公会发送奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionWishSendRequest)]
    [ResponseType(nameof(M2C_UnionWishSendResponse))]
    public partial class C2M_UnionWishSendRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionWishSendRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionWishSendRequest), isFromPool) as C2M_UnionWishSendRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionWishSendResponse)]
    public partial class M2C_UnionWishSendResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionWishSendResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionWishSendResponse), isFromPool) as M2C_UnionWishSendResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 邀请玩家加入公会
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionInviteRequest)]
    public partial class C2M_UnionInviteRequest : MessageObject, ILocationMessage
    {
        public static C2M_UnionInviteRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionInviteRequest), isFromPool) as C2M_UnionInviteRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long InviteId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.InviteId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionInviteMessage)]
    public partial class M2C_UnionInviteMessage : MessageObject, IMessage
    {
        public static M2C_UnionInviteMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionInviteMessage), isFromPool) as M2C_UnionInviteMessage;
        }

        [MemoryPackOrder(0)]
        public string UnionName { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(2)]
        public string Message { get; set; }

        [MemoryPackOrder(3)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnionName = default;
            this.PlayerName = default;
            this.Message = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 邀请回复
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionInviteReplyRequest)]
    public partial class C2M_UnionInviteReplyRequest : MessageObject, ILocationMessage
    {
        public static C2M_UnionInviteReplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionInviteReplyRequest), isFromPool) as C2M_UnionInviteReplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        /// <summary>
        /// 0拒绝 1同意
        /// </summary>
        [MemoryPackOrder(1)]
        public int ReplyCode { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.ReplyCode = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 科技学习
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionKeJiLearnRequest)]
    [ResponseType(nameof(M2C_UnionKeJiLearnResponse))]
    public partial class C2M_UnionKeJiLearnRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionKeJiLearnRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionKeJiLearnRequest), isFromPool) as C2M_UnionKeJiLearnRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionKeJiLearnResponse)]
    public partial class M2C_UnionKeJiLearnResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionKeJiLearnResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionKeJiLearnResponse), isFromPool) as M2C_UnionKeJiLearnResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// UserInfo.UnionKeJiList
        /// </summary>
        [MemoryPackOrder(0)]
        public List<int> UnionKeJiList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionKeJiList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 离开公会
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionLeaveRequest)]
    [ResponseType(nameof(M2C_UnionLeaveResponse))]
    public partial class C2M_UnionLeaveRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionLeaveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionLeaveRequest), isFromPool) as C2M_UnionLeaveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionLeaveResponse)]
    public partial class M2C_UnionLeaveResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionLeaveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionLeaveResponse), isFromPool) as M2C_UnionLeaveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会神秘商店道具
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionMysteryBuyRequest)]
    [ResponseType(nameof(M2C_UnionMysteryBuyResponse))]
    public partial class C2M_UnionMysteryBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionMysteryBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionMysteryBuyRequest), isFromPool) as C2M_UnionMysteryBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 商品ID MonsterConfig
        /// </summary>
        [MemoryPackOrder(0)]
        public int MysteryId { get; set; }

        /// <summary>
        /// 购买数量 默认为1
        /// </summary>
        [MemoryPackOrder(2)]
        public int BuyNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MysteryId = default;
            this.BuyNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionMysteryBuyResponse)]
    public partial class M2C_UnionMysteryBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionMysteryBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionMysteryBuyResponse), isFromPool) as M2C_UnionMysteryBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 转让族长
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionTransferRequest)]
    [ResponseType(nameof(M2C_UnionTransferResponse))]
    public partial class C2M_UnionTransferRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionTransferRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionTransferRequest), isFromPool) as C2M_UnionTransferRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long NewLeader { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.NewLeader = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionTransferResponse)]
    public partial class M2C_UnionTransferResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionTransferResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionTransferResponse), isFromPool) as M2C_UnionTransferResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会修炼
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionXiuLianRequest)]
    [ResponseType(nameof(M2C_UnionXiuLianResponse))]
    public partial class C2M_UnionXiuLianRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionXiuLianRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionXiuLianRequest), isFromPool) as C2M_UnionXiuLianRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Position { get; set; }

        [MemoryPackOrder(1)]
        public int Type { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Position = default;
            this.Type = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionXiuLianResponse)]
    public partial class M2C_UnionXiuLianResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionXiuLianResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionXiuLianResponse), isFromPool) as M2C_UnionXiuLianResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2U_DonationRankListRequest)]
    [ResponseType(nameof(U2C_DonationRankListResponse))]
    public partial class C2U_DonationRankListRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_DonationRankListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_DonationRankListRequest), isFromPool) as C2U_DonationRankListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RankType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RankType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_DonationRankListResponse)]
    public partial class U2C_DonationRankListResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_DonationRankListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_DonationRankListResponse), isFromPool) as U2C_DonationRankListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionRaceInfoResult)]
    public partial class M2C_UnionRaceInfoResult : MessageObject, IMessage
    {
        public static M2C_UnionRaceInfoResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionRaceInfoResult), isFromPool) as M2C_UnionRaceInfoResult;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(4)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_TransferRequest)]
    [ResponseType(nameof(Actor_TransferResponse))]
    public partial class Actor_TransferRequest : MessageObject, ILocationRequest
    {
        public static Actor_TransferRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_TransferRequest), isFromPool) as Actor_TransferRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SceneType { get; set; }

        [MemoryPackOrder(1)]
        public int SceneId { get; set; }

        [MemoryPackOrder(4)]
        public int Difficulty { get; set; }

        [MemoryPackOrder(5)]
        public string paramInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SceneType = default;
            this.SceneId = default;
            this.Difficulty = default;
            this.paramInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_TransferResponse)]
    public partial class Actor_TransferResponse : MessageObject, ILocationResponse
    {
        public static Actor_TransferResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_TransferResponse), isFromPool) as Actor_TransferResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HorseNoticeInfo)]
    public partial class M2C_HorseNoticeInfo : MessageObject, IMessage
    {
        public static M2C_HorseNoticeInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HorseNoticeInfo), isFromPool) as M2C_HorseNoticeInfo;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public string NoticeText { get; set; }

        [MemoryPackOrder(1)]
        public int NoticeType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.NoticeText = default;
            this.NoticeType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ZeroClock)]
    public partial class M2C_ZeroClock : MessageObject, IMessage
    {
        public static M2C_ZeroClock Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ZeroClock), isFromPool) as M2C_ZeroClock;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.UnionListItem)]
    public partial class UnionListItem : MessageObject
    {
        public static UnionListItem Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(UnionListItem), isFromPool) as UnionListItem;
        }

        [MemoryPackOrder(0)]
        public string UnionName { get; set; }

        [MemoryPackOrder(1)]
        public long UnionId { get; set; }

        [MemoryPackOrder(2)]
        public int PlayerNumber { get; set; }

        [MemoryPackOrder(3)]
        public int LevelLimit { get; set; }

        [MemoryPackOrder(4)]
        public int UnionLevel { get; set; }

        [MemoryPackOrder(5)]
        public string UnionLeader { get; set; }

        [MemoryPackOrder(6)]
        public string UnionPurpose { get; set; }

        [MemoryPackOrder(7)]
        public List<long> ApplyList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnionName = default;
            this.UnionId = default;
            this.PlayerNumber = default;
            this.LevelLimit = default;
            this.UnionLevel = default;
            this.UnionLeader = default;
            this.UnionPurpose = default;
            this.ApplyList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会列表
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionListRequest)]
    [ResponseType(nameof(U2C_UnionListResponse))]
    public partial class C2U_UnionListRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionListRequest), isFromPool) as C2U_UnionListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionListResponse)]
    public partial class U2C_UnionListResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionListResponse), isFromPool) as U2C_UnionListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<UnionListItem> UnionList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 申请入会
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionApplyRequest)]
    [ResponseType(nameof(U2C_UnionApplyResponse))]
    public partial class C2U_UnionApplyRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionApplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionApplyRequest), isFromPool) as C2U_UnionApplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionApplyResponse)]
    public partial class U2C_UnionApplyResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionApplyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionApplyResponse), isFromPool) as U2C_UnionApplyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionApplyResult)]
    public partial class M2C_UnionApplyResult : MessageObject, IMessage
    {
        public static M2C_UnionApplyResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionApplyResult), isFromPool) as M2C_UnionApplyResult;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 申请列表
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionApplyListRequest)]
    [ResponseType(nameof(U2C_UnionApplyListResponse))]
    public partial class C2U_UnionApplyListRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionApplyListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionApplyListRequest), isFromPool) as C2U_UnionApplyListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionApplyListResponse)]
    public partial class U2C_UnionApplyListResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionApplyListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionApplyListResponse), isFromPool) as U2C_UnionApplyListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(9)]
        public List<UnionPlayerInfo> UnionPlayerList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionPlayerList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 申请回复
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionApplyReplyRequest)]
    [ResponseType(nameof(U2C_UnionApplyReplyResponse))]
    public partial class C2U_UnionApplyReplyRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionApplyReplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionApplyReplyRequest), isFromPool) as C2U_UnionApplyReplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        /// <summary>
        /// 0拒绝 1同意
        /// </summary>
        [MemoryPackOrder(1)]
        public int ReplyCode { get; set; }

        [MemoryPackOrder(2)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;
            this.ReplyCode = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionApplyReplyResponse)]
    public partial class U2C_UnionApplyReplyResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionApplyReplyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionApplyReplyResponse), isFromPool) as U2C_UnionApplyReplyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会竞选
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionJingXuanRequest)]
    [ResponseType(nameof(U2C_UnionJingXuanResponse))]
    public partial class C2U_UnionJingXuanRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionJingXuanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionJingXuanRequest), isFromPool) as C2U_UnionJingXuanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        /// <summary>
        /// 0取消申请 1确认申请
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.UnitId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionJingXuanResponse)]
    public partial class U2C_UnionJingXuanResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionJingXuanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionJingXuanResponse), isFromPool) as U2C_UnionJingXuanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(11)]
        public List<long> JingXuanList { get; set; } = new();

        [MemoryPackOrder(12)]
        public long JingXuanEndTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.JingXuanList.Clear();
            this.JingXuanEndTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 科技升级
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionKeJiActiteRequest)]
    [ResponseType(nameof(U2C_UnionKeJiActiteResponse))]
    public partial class C2U_UnionKeJiActiteRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionKeJiActiteRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionKeJiActiteRequest), isFromPool) as C2U_UnionKeJiActiteRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionKeJiActiteResponse)]
    public partial class U2C_UnionKeJiActiteResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionKeJiActiteResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionKeJiActiteResponse), isFromPool) as U2C_UnionKeJiActiteResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public UnionInfo UnionInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 加速完成
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionKeJiQuickRequest)]
    [ResponseType(nameof(M2C_UnionKeJiQuickResponse))]
    public partial class C2M_UnionKeJiQuickRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionKeJiQuickRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionKeJiQuickRequest), isFromPool) as C2M_UnionKeJiQuickRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public int Position { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.Position = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionKeJiQuickResponse)]
    public partial class M2C_UnionKeJiQuickResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionKeJiQuickResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionKeJiQuickResponse), isFromPool) as M2C_UnionKeJiQuickResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public UnionInfo UnionInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会订单
    [MemoryPackable]
    [Message(OuterMessage.C2M_UnionOrderOperateRequest)]
    [ResponseType(nameof(M2C_UnionOrderOperateResponse))]
    public partial class C2M_UnionOrderOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnionOrderOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnionOrderOperateRequest), isFromPool) as C2M_UnionOrderOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1 查看订单 2刷新订单
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnionOrderOperateResponse)]
    public partial class M2C_UnionOrderOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnionOrderOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnionOrderOperateResponse), isFromPool) as M2C_UnionOrderOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会踢人
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionKickOutRequest)]
    [ResponseType(nameof(U2C_UnionKickOutResponse))]
    public partial class C2U_UnionKickOutRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionKickOutRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionKickOutRequest), isFromPool) as C2U_UnionKickOutRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionKickOutResponse)]
    public partial class U2C_UnionKickOutResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionKickOutResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionKickOutResponse), isFromPool) as U2C_UnionKickOutResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会升级
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionUpgradeRequest)]
    [ResponseType(nameof(U2C_UnionUpgradeResponse))]
    public partial class C2U_UnionUpgradeRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionUpgradeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionUpgradeRequest), isFromPool) as C2U_UnionUpgradeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionUpgradeResponse)]
    public partial class U2C_UnionUpgradeResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionUpgradeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionUpgradeResponse), isFromPool) as U2C_UnionUpgradeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public UnionInfo UnionMyInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionMyInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 我的公会
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionMyInfoRequest)]
    [ResponseType(nameof(U2C_UnionMyInfoResponse))]
    public partial class C2U_UnionMyInfoRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionMyInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionMyInfoRequest), isFromPool) as C2U_UnionMyInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionMyInfoResponse)]
    public partial class U2C_UnionMyInfoResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionMyInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionMyInfoResponse), isFromPool) as U2C_UnionMyInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public UnionInfo UnionMyInfo { get; set; }

        [MemoryPackOrder(1)]
        public List<long> OnLinePlayer { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionMyInfo = default;
            this.OnLinePlayer.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会神秘商店道具
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionMysteryListRequest)]
    [ResponseType(nameof(U2C_UnionMysteryListResponse))]
    public partial class C2U_UnionMysteryListRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionMysteryListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionMysteryListRequest), isFromPool) as C2U_UnionMysteryListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 公会ID
        /// </summary>
        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionMysteryListResponse)]
    public partial class U2C_UnionMysteryListResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionMysteryListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionMysteryListResponse), isFromPool) as U2C_UnionMysteryListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 公会操作
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionOperatateRequest)]
    [ResponseType(nameof(U2C_UnionOperatateResponse))]
    public partial class C2U_UnionOperatateRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionOperatateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionOperatateRequest), isFromPool) as C2U_UnionOperatateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long UnionId { get; set; }

        [MemoryPackOrder(2)]
        public int Operatate { get; set; }

        [MemoryPackOrder(3)]
        public string Value { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.UnionId = default;
            this.Operatate = default;
            this.Value = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionOperatateResponse)]
    public partial class U2C_UnionOperatateResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionOperatateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionOperatateResponse), isFromPool) as U2C_UnionOperatateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionRaceInfoRequest)]
    [ResponseType(nameof(U2C_UnionRaceInfoResponse))]
    public partial class C2U_UnionRaceInfoRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionRaceInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionRaceInfoRequest), isFromPool) as C2U_UnionRaceInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RankType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RankType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionRaceInfoResponse)]
    public partial class U2C_UnionRaceInfoResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionRaceInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionRaceInfoResponse), isFromPool) as U2C_UnionRaceInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<UnionListItem> UnionInfoList { get; set; } = new();

        [MemoryPackOrder(1)]
        public long TotalDonation { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnionInfoList.Clear();
            this.TotalDonation = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 捐献记录
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionRecordRequest)]
    [ResponseType(nameof(U2C_UnionRecordResponse))]
    public partial class C2U_UnionRecordRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionRecordRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionRecordRequest), isFromPool) as C2U_UnionRecordRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionRecordResponse)]
    public partial class U2C_UnionRecordResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionRecordResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionRecordResponse), isFromPool) as U2C_UnionRecordResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(10)]
        public List<DonationRecord> DonationRecords { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.DonationRecords.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 报名
    [MemoryPackable]
    [Message(OuterMessage.C2U_UnionSignUpRequest)]
    [ResponseType(nameof(U2C_UnionSignUpResponse))]
    public partial class C2U_UnionSignUpRequest : MessageObject, IUnionActorRequest
    {
        public static C2U_UnionSignUpRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2U_UnionSignUpRequest), isFromPool) as C2U_UnionSignUpRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.U2C_UnionSignUpResponse)]
    public partial class U2C_UnionSignUpResponse : MessageObject, IUnionActorResponse
    {
        public static U2C_UnionSignUpResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(U2C_UnionSignUpResponse), isFromPool) as U2C_UnionSignUpResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RankingTrialInfo)]
    public partial class RankingTrialInfo : MessageObject
    {
        public static RankingTrialInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RankingTrialInfo), isFromPool) as RankingTrialInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(2)]
        public int PlayerLv { get; set; }

        [MemoryPackOrder(3)]
        public long Hurt { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(5)]
        public int FubenId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.PlayerName = default;
            this.PlayerLv = default;
            this.Hurt = default;
            this.Occ = default;
            this.FubenId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.RankSeasonTowerInfo)]
    public partial class RankSeasonTowerInfo : MessageObject
    {
        public static RankSeasonTowerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(RankSeasonTowerInfo), isFromPool) as RankSeasonTowerInfo;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(2)]
        public int Occ { get; set; }

        [MemoryPackOrder(3)]
        public int PlayerLv { get; set; }

        /// <summary>
        /// 显示时候需要转换层数
        /// </summary>
        [MemoryPackOrder(4)]
        public int FubenId { get; set; }

        /// <summary>
        /// 总通关时间
        /// </summary>
        [MemoryPackOrder(5)]
        public long TotalTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.PlayerName = default;
            this.Occ = default;
            this.PlayerLv = default;
            this.FubenId = default;
            this.TotalTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_AreneInfoResult)]
    public partial class M2C_AreneInfoResult : MessageObject, IMessage
    {
        public static M2C_AreneInfoResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_AreneInfoResult), isFromPool) as M2C_AreneInfoResult;
        }

        [MemoryPackOrder(0)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public int LeftPlayer { get; set; }

        [MemoryPackOrder(3)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.LeftPlayer = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BattleInfoResult)]
    public partial class M2C_BattleInfoResult : MessageObject, IMessage
    {
        public static M2C_BattleInfoResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BattleInfoResult), isFromPool) as M2C_BattleInfoResult;
        }

        [MemoryPackOrder(0)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public int CampKill_1 { get; set; }

        [MemoryPackOrder(3)]
        public int CampKill_2 { get; set; }

        [MemoryPackOrder(4)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.CampKill_1 = default;
            this.CampKill_2 = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PaiMaiAuctionRecord)]
    public partial class PaiMaiAuctionRecord : MessageObject
    {
        public static PaiMaiAuctionRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PaiMaiAuctionRecord), isFromPool) as PaiMaiAuctionRecord;
        }

        [MemoryPackOrder(0)]
        public long UnionId { get; set; }

        [MemoryPackOrder(1)]
        public int Occ { get; set; }

        [MemoryPackOrder(2)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(3)]
        public long Price { get; set; }

        [MemoryPackOrder(4)]
        public long Time { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnionId = default;
            this.Occ = default;
            this.PlayerName = default;
            this.Price = default;
            this.Time = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SoloPlayerInfo)]
    public partial class SoloPlayerInfo : MessageObject
    {
        public static SoloPlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SoloPlayerInfo), isFromPool) as SoloPlayerInfo;
        }

        [MemoryPackOrder(0)]
        public long MatchTime { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public long Combat { get; set; }

        [MemoryPackOrder(3)]
        public string Name { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(5)]
        public int WinNum { get; set; }

        [MemoryPackOrder(6)]
        public int FailNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MatchTime = default;
            this.UnitId = default;
            this.Combat = default;
            this.Name = default;
            this.Occ = default;
            this.WinNum = default;
            this.FailNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SoloResultInfo)]
    public partial class SoloResultInfo : MessageObject
    {
        public static SoloResultInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SoloResultInfo), isFromPool) as SoloResultInfo;
        }

        [MemoryPackOrder(2)]
        public int WinTime { get; set; }

        [MemoryPackOrder(3)]
        public int FailTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.WinTime = default;
            this.FailTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SoloMatchInfo)]
    public partial class SoloMatchInfo : MessageObject
    {
        public static SoloMatchInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SoloMatchInfo), isFromPool) as SoloMatchInfo;
        }

        [MemoryPackOrder(0)]
        public long UnitId_1 { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId_2 { get; set; }

        [MemoryPackOrder(2)]
        public long FubenId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId_1 = default;
            this.UnitId_2 = default;
            this.FubenId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SoloMatchResult)]
    public partial class M2C_SoloMatchResult : MessageObject, IMessage
    {
        public static M2C_SoloMatchResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SoloMatchResult), isFromPool) as M2C_SoloMatchResult;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Result { get; set; }

        [MemoryPackOrder(1)]
        public long FubenId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Result = default;
            this.FubenId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SoloPlayerResultInfo)]
    public partial class SoloPlayerResultInfo : MessageObject
    {
        public static SoloPlayerResultInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SoloPlayerResultInfo), isFromPool) as SoloPlayerResultInfo;
        }

        [MemoryPackOrder(0)]
        public long MatchTime { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public long Combat { get; set; }

        [MemoryPackOrder(3)]
        public string Name { get; set; }

        [MemoryPackOrder(4)]
        public int Occ { get; set; }

        [MemoryPackOrder(5)]
        public int WinNum { get; set; }

        [MemoryPackOrder(6)]
        public int FailNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MatchTime = default;
            this.UnitId = default;
            this.Combat = default;
            this.Name = default;
            this.Occ = default;
            this.WinNum = default;
            this.FailNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SoloDungeon)]
    public partial class M2C_SoloDungeon : MessageObject, IMessage
    {
        public static M2C_SoloDungeon Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SoloDungeon), isFromPool) as M2C_SoloDungeon;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// solo奖励
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RewardItem> RewardItem { get; set; } = new();

        /// <summary>
        /// 0 失败  1 获胜
        /// </summary>
        [MemoryPackOrder(1)]
        public int SoloResult { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardItem.Clear();
            this.SoloResult = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.TeamPlayerInfo)]
    public partial class TeamPlayerInfo : MessageObject
    {
        public static TeamPlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(TeamPlayerInfo), isFromPool) as TeamPlayerInfo;
        }

        [MemoryPackOrder(0)]
        public int HeadId { get; set; }

        [MemoryPackOrder(1)]
        public int PlayerLv { get; set; }

        [MemoryPackOrder(2)]
        public int WeaponId { get; set; }

        [MemoryPackOrder(3)]
        public string PlayerName { get; set; }

        [MemoryPackOrder(4)]
        public long UserID { get; set; }

        [MemoryPackOrder(5)]
        public int Damage { get; set; }

        [MemoryPackOrder(6)]
        public long Combat { get; set; }

        [MemoryPackOrder(7)]
        public int Occ { get; set; }

        [MemoryPackOrder(8)]
        public int InFuben { get; set; }

        [MemoryPackOrder(9)]
        public int RobotId { get; set; }

        [MemoryPackOrder(10)]
        public int OccTwo { get; set; }

        [MemoryPackOrder(11)]
        public int Prepare { get; set; }

        [MemoryPackOrder(12)]
        public List<int> FashionIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.HeadId = default;
            this.PlayerLv = default;
            this.WeaponId = default;
            this.PlayerName = default;
            this.UserID = default;
            this.Damage = default;
            this.Combat = default;
            this.Occ = default;
            this.InFuben = default;
            this.RobotId = default;
            this.OccTwo = default;
            this.Prepare = default;
            this.FashionIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SyncMiJingDamage)]
    public partial class M2C_SyncMiJingDamage : MessageObject, IMessage
    {
        public static M2C_SyncMiJingDamage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SyncMiJingDamage), isFromPool) as M2C_SyncMiJingDamage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public List<TeamPlayerInfo> DamageList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.DamageList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RunRaceBattleInfo)]
    public partial class M2C_RunRaceBattleInfo : MessageObject, IMessage
    {
        public static M2C_RunRaceBattleInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RunRaceBattleInfo), isFromPool) as M2C_RunRaceBattleInfo;
        }

        [MemoryPackOrder(0)]
        public long NextTransforTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.NextTransforTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RankRunRaceMessage)]
    public partial class M2C_RankRunRaceMessage : MessageObject, IMessage
    {
        public static M2C_RankRunRaceMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RankRunRaceMessage), isFromPool) as M2C_RankRunRaceMessage;
        }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RankRunRaceReward)]
    public partial class M2C_RankRunRaceReward : MessageObject, IMessage
    {
        public static M2C_RankRunRaceReward Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RankRunRaceReward), isFromPool) as M2C_RankRunRaceReward;
        }

        [MemoryPackOrder(0)]
        public int RankId { get; set; }

        /// <summary>
        /// 0 直接进背包  1背包已满发邮件
        /// </summary>
        [MemoryPackOrder(1)]
        public int ByMail { get; set; }

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(2)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RankId = default;
            this.ByMail = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RankDemonMessage)]
    public partial class M2C_RankDemonMessage : MessageObject, IMessage
    {
        public static M2C_RankDemonMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RankDemonMessage), isFromPool) as M2C_RankDemonMessage;
        }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.TeamInfo)]
    public partial class TeamInfo : MessageObject
    {
        public static TeamInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(TeamInfo), isFromPool) as TeamInfo;
        }

        [MemoryPackOrder(0)]
        public int SceneId { get; set; }

        [MemoryPackOrder(1)]
        public List<TeamPlayerInfo> PlayerList { get; set; } = new();

        [MemoryPackOrder(2)]
        public long TeamId { get; set; }

        [MemoryPackOrder(3)]
        public long FubenInstanceId { get; set; }

        [MemoryPackOrder(4)]
        public long FubenUUId { get; set; }

        [MemoryPackOrder(5)]
        public int FubenType { get; set; }

        [MemoryPackOrder(6)]
        public int SceneType { get; set; }

        [MemoryPackOrder(7)]
        public ActorId FubenActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SceneId = default;
            this.PlayerList.Clear();
            this.TeamId = default;
            this.FubenInstanceId = default;
            this.FubenUUId = default;
            this.FubenType = default;
            this.SceneType = default;
            this.FubenActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamUpdateResult)]
    public partial class M2C_TeamUpdateResult : MessageObject, IMessage
    {
        public static M2C_TeamUpdateResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamUpdateResult), isFromPool) as M2C_TeamUpdateResult;
        }

        [MemoryPackOrder(0)]
        public TeamInfo TeamInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.TeamInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 紫色道具判断是否需要拾取
    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamPickMessage)]
    public partial class M2C_TeamPickMessage : MessageObject, IMessage
    {
        public static M2C_TeamPickMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamPickMessage), isFromPool) as M2C_TeamPickMessage;
        }

        [MemoryPackOrder(0)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        [MemoryPackOrder(2)]
        public List<UnitInfo> DropItems { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.DropItems.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CreateDropItems)]
    public partial class M2C_CreateDropItems : MessageObject, IMessage
    {
        public static M2C_CreateDropItems Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CreateDropItems), isFromPool) as M2C_CreateDropItems;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(93)]
        public long UnitId { get; set; }

        [MemoryPackOrder(0)]
        public List<UnitInfo> Drops { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.Drops.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 组队副本结算
    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonSettlement)]
    public partial class M2C_TeamDungeonSettlement : MessageObject, IMessage
    {
        public static M2C_TeamDungeonSettlement Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonSettlement), isFromPool) as M2C_TeamDungeonSettlement;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long PassTime { get; set; }

        [MemoryPackOrder(1)]
        public List<TeamPlayerInfo> PlayerList { get; set; } = new();

        /// <summary>
        /// 额外奖励
        /// </summary>
        [MemoryPackOrder(3)]
        public List<RewardItem> RewardExtraItem { get; set; } = new();

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(4)]
        public List<RewardItem> RewardList { get; set; } = new();

        /// <summary>
        /// 冒险家额外奖励
        /// </summary>
        [MemoryPackOrder(5)]
        public List<RewardItem> RewardListExcess { get; set; } = new();

        [MemoryPackOrder(6)]
        public int Star { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.ActorId = default;
            this.PassTime = default;
            this.PlayerList.Clear();
            this.RewardExtraItem.Clear();
            this.RewardList.Clear();
            this.RewardListExcess.Clear();
            this.Star = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 手机号绑定
    [MemoryPackable]
    [Message(OuterMessage.C2M_PhoneBinging)]
    [ResponseType(nameof(M2C_PhoneBinging))]
    public partial class C2M_PhoneBinging : MessageObject, IRequest
    {
        public static C2M_PhoneBinging Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PhoneBinging), isFromPool) as C2M_PhoneBinging;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// 帐号Id
        /// </summary>
        [MemoryPackOrder(1)]
        public long AccountId { get; set; }

        /// <summary>
        /// 帐号
        /// </summary>
        [MemoryPackOrder(2)]
        public string Account { get; set; }

        /// <summary>
        /// 密码
        /// </summary>
        [MemoryPackOrder(3)]
        public string Password { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PhoneNumber = default;
            this.AccountId = default;
            this.Account = default;
            this.Password = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PhoneBinging)]
    public partial class M2C_PhoneBinging : MessageObject, IResponse
    {
        public static M2C_PhoneBinging Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PhoneBinging), isFromPool) as M2C_PhoneBinging;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_BlackAccountRequest)]
    [ResponseType(nameof(M2C_BlackAccountResponse))]
    public partial class C2M_BlackAccountRequest : MessageObject, IRequest
    {
        public static C2M_BlackAccountRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BlackAccountRequest), isFromPool) as C2M_BlackAccountRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string Account { get; set; }

        [MemoryPackOrder(1)]
        public string Password { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Account = default;
            this.Password = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BlackAccountResponse)]
    public partial class M2C_BlackAccountResponse : MessageObject, IResponse
    {
        public static M2C_BlackAccountResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BlackAccountResponse), isFromPool) as M2C_BlackAccountResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_ChatJinYanRequest)]
    [ResponseType(nameof(C2C_ChatJinYanResponse))]
    public partial class C2C_ChatJinYanRequest : MessageObject, IChatActorRequest
    {
        public static C2C_ChatJinYanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_ChatJinYanRequest), isFromPool) as C2C_ChatJinYanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long JinYanId { get; set; }

        [MemoryPackOrder(2)]
        public string JinYanPlayer { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.JinYanId = default;
            this.JinYanPlayer = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2C_ChatJinYanResponse)]
    public partial class C2C_ChatJinYanResponse : MessageObject, IChatActorResponse
    {
        public static C2C_ChatJinYanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2C_ChatJinYanResponse), isFromPool) as C2C_ChatJinYanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ReceiveMailRequest)]
    [ResponseType(nameof(M2C_ReceiveMailResponse))]
    public partial class C2M_ReceiveMailRequest : MessageObject, ILocationRequest
    {
        public static C2M_ReceiveMailRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ReceiveMailRequest), isFromPool) as C2M_ReceiveMailRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long MailId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MailId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ReceiveMailResponse)]
    public partial class M2C_ReceiveMailResponse : MessageObject, ILocationResponse
    {
        public static M2C_ReceiveMailResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ReceiveMailResponse), isFromPool) as M2C_ReceiveMailResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2E_ReceiveMailRequest)]
    [ResponseType(nameof(E2C_ReceiveMailResponse))]
    public partial class C2E_ReceiveMailRequest : MessageObject, IMailActorRequest
    {
        public static C2E_ReceiveMailRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2E_ReceiveMailRequest), isFromPool) as C2E_ReceiveMailRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long MailId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MailId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.E2C_ReceiveMailResponse)]
    public partial class E2C_ReceiveMailResponse : MessageObject, IMailActorResponse
    {
        public static E2C_ReceiveMailResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(E2C_ReceiveMailResponse), isFromPool) as E2C_ReceiveMailResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2E_GetAllMailRequest)]
    [ResponseType(nameof(E2C_GetAllMailResponse))]
    public partial class C2E_GetAllMailRequest : MessageObject, IMailActorRequest
    {
        public static C2E_GetAllMailRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2E_GetAllMailRequest), isFromPool) as C2E_GetAllMailRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.E2C_GetAllMailResponse)]
    public partial class E2C_GetAllMailResponse : MessageObject, IMailActorResponse
    {
        public static E2C_GetAllMailResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(E2C_GetAllMailResponse), isFromPool) as E2C_GetAllMailResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<MailInfo> MailInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MailInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2F_WatchPetRequest)]
    [ResponseType(nameof(F2C_WatchPetResponse))]
    public partial class C2F_WatchPetRequest : MessageObject, IFriendActorRequest
    {
        public static C2F_WatchPetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2F_WatchPetRequest), isFromPool) as C2F_WatchPetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        [MemoryPackOrder(1)]
        public long PetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitID = default;
            this.PetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.F2C_WatchPetResponse)]
    public partial class F2C_WatchPetResponse : MessageObject, IFriendActorResponse
    {
        public static F2C_WatchPetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(F2C_WatchPetResponse), isFromPool) as F2C_WatchPetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(6)]
        public RolePetInfo RolePetInfos { get; set; }

        [MemoryPackOrder(7)]
        public List<ItemInfoProto> PetHeXinList { get; set; } = new();

        [MemoryPackOrder(8)]
        public List<int> Ks { get; set; } = new();

        [MemoryPackOrder(9)]
        public List<long> Vs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RolePetInfos = default;
            this.PetHeXinList.Clear();
            this.Ks.Clear();
            this.Vs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HappyInfoResult)]
    public partial class M2C_HappyInfoResult : MessageObject, IMessage
    {
        public static M2C_HappyInfoResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HappyInfoResult), isFromPool) as M2C_HappyInfoResult;
        }

        [MemoryPackOrder(0)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        /// <summary>
        /// 下一刷新的时间
        /// </summary>
        [MemoryPackOrder(2)]
        public long NextRefreshTime { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.NextRefreshTime = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UpdateMailInfo)]
    public partial class M2C_UpdateMailInfo : MessageObject, IMessage
    {
        public static M2C_UpdateMailInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UpdateMailInfo), isFromPool) as M2C_UpdateMailInfo;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public List<MailInfo> MailInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MailInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 喜从天降刷新
    [MemoryPackable]
    [Message(OuterMessage.C2M_HappyMoveRequest)]
    [ResponseType(nameof(M2C_HappyMoveResponse))]
    public partial class C2M_HappyMoveRequest : MessageObject, ILocationRequest
    {
        public static C2M_HappyMoveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_HappyMoveRequest), isFromPool) as C2M_HappyMoveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1免费移动 2金币移动 3钻石移动
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperatateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperatateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HappyMoveResponse)]
    public partial class M2C_HappyMoveResponse : MessageObject, ILocationResponse
    {
        public static M2C_HappyMoveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HappyMoveResponse), isFromPool) as M2C_HappyMoveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 开启红包
    [MemoryPackable]
    [Message(OuterMessage.C2M_HongBaoOpenRequest)]
    [ResponseType(nameof(M2C_HongBaoOpenResponse))]
    public partial class C2M_HongBaoOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_HongBaoOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_HongBaoOpenRequest), isFromPool) as C2M_HongBaoOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HongBaoOpenResponse)]
    public partial class M2C_HongBaoOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_HongBaoOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HongBaoOpenResponse), isFromPool) as M2C_HongBaoOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int HongbaoAmount { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.HongbaoAmount = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 参入竞拍
    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiAuctionJoinRequest)]
    [ResponseType(nameof(M2C_PaiMaiAuctionJoinResponse))]
    public partial class C2M_PaiMaiAuctionJoinRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiAuctionJoinRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiAuctionJoinRequest), isFromPool) as C2M_PaiMaiAuctionJoinRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiAuctionJoinResponse)]
    public partial class M2C_PaiMaiAuctionJoinResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiAuctionJoinResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiAuctionJoinResponse), isFromPool) as M2C_PaiMaiAuctionJoinResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiAuctionPriceRequest)]
    [ResponseType(nameof(M2C_PaiMaiAuctionPriceResponse))]
    public partial class C2M_PaiMaiAuctionPriceRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiAuctionPriceRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiAuctionPriceRequest), isFromPool) as C2M_PaiMaiAuctionPriceRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long Price { get; set; }

        [MemoryPackOrder(1)]
        public string AuctionPlayer { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Price = default;
            this.AuctionPlayer = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiAuctionPriceResponse)]
    public partial class M2C_PaiMaiAuctionPriceResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiAuctionPriceResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiAuctionPriceResponse), isFromPool) as M2C_PaiMaiAuctionPriceResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiBuyNewRequest)]
    [ResponseType(nameof(M2C_PaiMaiBuyNewResponse))]
    public partial class C2M_PaiMaiBuyNewRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiBuyNewRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiBuyNewRequest), isFromPool) as C2M_PaiMaiBuyNewRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long PaiMaiItemInfoId { get; set; }

        [MemoryPackOrder(3)]
        public int ItemId { get; set; }

        [MemoryPackOrder(4)]
        public int ItemNum { get; set; }

        [MemoryPackOrder(5)]
        public int Price { get; set; }

        [MemoryPackOrder(1)]
        public int BuyNum { get; set; }

        [MemoryPackOrder(2)]
        public int IsRecharge { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiItemInfoId = default;
            this.ItemId = default;
            this.ItemNum = default;
            this.Price = default;
            this.BuyNum = default;
            this.IsRecharge = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiBuyNewResponse)]
    public partial class M2C_PaiMaiBuyNewResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiBuyNewResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiBuyNewResponse), isFromPool) as M2C_PaiMaiBuyNewResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiDuiHuanRequest)]
    [ResponseType(nameof(M2C_PaiMaiDuiHuanResponse))]
    public partial class C2M_PaiMaiDuiHuanRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiDuiHuanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiDuiHuanRequest), isFromPool) as C2M_PaiMaiDuiHuanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long DiamondsNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.DiamondsNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiDuiHuanResponse)]
    public partial class M2C_PaiMaiDuiHuanResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiDuiHuanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiDuiHuanResponse), isFromPool) as M2C_PaiMaiDuiHuanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiSellRequest)]
    [ResponseType(nameof(M2C_PaiMaiSellResponse))]
    public partial class C2M_PaiMaiSellRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiSellRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiSellRequest), isFromPool) as C2M_PaiMaiSellRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public PaiMaiItemInfo PaiMaiItemInfo { get; set; }

        [MemoryPackOrder(2)]
        public int IsRecharge { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiItemInfo = default;
            this.IsRecharge = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiSellResponse)]
    public partial class M2C_PaiMaiSellResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiSellResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiSellResponse), isFromPool) as M2C_PaiMaiSellResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public PaiMaiItemInfo PaiMaiItemInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiItemInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiShopRequest)]
    [ResponseType(nameof(M2C_PaiMaiShopResponse))]
    public partial class C2M_PaiMaiShopRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiShopRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiShopRequest), isFromPool) as C2M_PaiMaiShopRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int PaiMaiId { get; set; }

        [MemoryPackOrder(1)]
        public int BuyNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiId = default;
            this.BuyNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiShopResponse)]
    public partial class M2C_PaiMaiShopResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiShopResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiShopResponse), isFromPool) as M2C_PaiMaiShopResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PaiMaiXiaJiaRequest)]
    [ResponseType(nameof(M2C_PaiMaiXiaJiaResponse))]
    public partial class C2M_PaiMaiXiaJiaRequest : MessageObject, ILocationRequest
    {
        public static C2M_PaiMaiXiaJiaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PaiMaiXiaJiaRequest), isFromPool) as C2M_PaiMaiXiaJiaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ItemType { get; set; }

        [MemoryPackOrder(1)]
        public long PaiMaiItemInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ItemType = default;
            this.PaiMaiItemInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PaiMaiXiaJiaResponse)]
    public partial class M2C_PaiMaiXiaJiaResponse : MessageObject, ILocationResponse
    {
        public static M2C_PaiMaiXiaJiaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PaiMaiXiaJiaResponse), isFromPool) as M2C_PaiMaiXiaJiaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_StallBuyRequest)]
    [ResponseType(nameof(M2C_StallBuyResponse))]
    public partial class C2M_StallBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_StallBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StallBuyRequest), isFromPool) as C2M_StallBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public PaiMaiItemInfo PaiMaiItemInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiItemInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StallBuyResponse)]
    public partial class M2C_StallBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_StallBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StallBuyResponse), isFromPool) as M2C_StallBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 摆摊
    [MemoryPackable]
    [Message(OuterMessage.C2M_StallOperationRequest)]
    [ResponseType(nameof(M2C_StallOperationResponse))]
    public partial class C2M_StallOperationRequest : MessageObject, ILocationRequest
    {
        public static C2M_StallOperationRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StallOperationRequest), isFromPool) as C2M_StallOperationRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 0收摊
        /// </summary>
        [MemoryPackOrder(0)]
        public int StallType { get; set; }

        [MemoryPackOrder(1)]
        public string Value { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.StallType = default;
            this.Value = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StallOperationResponse)]
    public partial class M2C_StallOperationResponse : MessageObject, ILocationResponse
    {
        public static M2C_StallOperationResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StallOperationResponse), isFromPool) as M2C_StallOperationResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_StallSellRequest)]
    [ResponseType(nameof(M2C_StallSellResponse))]
    public partial class C2M_StallSellRequest : MessageObject, ILocationRequest
    {
        public static C2M_StallSellRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StallSellRequest), isFromPool) as C2M_StallSellRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public PaiMaiItemInfo PaiMaiItemInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiItemInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StallSellResponse)]
    public partial class M2C_StallSellResponse : MessageObject, ILocationResponse
    {
        public static M2C_StallSellResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StallSellResponse), isFromPool) as M2C_StallSellResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public PaiMaiItemInfo PaiMaiItemInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiItemInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_StallXiaJiaRequest)]
    [ResponseType(nameof(M2C_StallXiaJiaResponse))]
    public partial class C2M_StallXiaJiaRequest : MessageObject, ILocationRequest
    {
        public static C2M_StallXiaJiaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_StallXiaJiaRequest), isFromPool) as C2M_StallXiaJiaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long PaiMaiItemInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PaiMaiItemInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_StallXiaJiaResponse)]
    public partial class M2C_StallXiaJiaResponse : MessageObject, ILocationResponse
    {
        public static M2C_StallXiaJiaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_StallXiaJiaResponse), isFromPool) as M2C_StallXiaJiaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiAuctionInfoRequest)]
    [ResponseType(nameof(P2C_PaiMaiAuctionInfoResponse))]
    public partial class C2P_PaiMaiAuctionInfoRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiAuctionInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiAuctionInfoRequest), isFromPool) as C2P_PaiMaiAuctionInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiAuctionInfoResponse)]
    public partial class P2C_PaiMaiAuctionInfoResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiAuctionInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiAuctionInfoResponse), isFromPool) as P2C_PaiMaiAuctionInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int AuctionItem { get; set; }

        [MemoryPackOrder(1)]
        public long AuctionPrice { get; set; }

        [MemoryPackOrder(2)]
        public int AuctionStatus { get; set; }

        [MemoryPackOrder(3)]
        public int AuctionNumber { get; set; }

        [MemoryPackOrder(4)]
        public string AuctionPlayer { get; set; }

        [MemoryPackOrder(5)]
        public long AuctionStart { get; set; }

        [MemoryPackOrder(6)]
        public bool AuctionJoin { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.AuctionItem = default;
            this.AuctionPrice = default;
            this.AuctionStatus = default;
            this.AuctionNumber = default;
            this.AuctionPlayer = default;
            this.AuctionStart = default;
            this.AuctionJoin = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiAuctionRecordRequest)]
    [ResponseType(nameof(P2C_PaiMaiAuctionRecordResponse))]
    public partial class C2P_PaiMaiAuctionRecordRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiAuctionRecordRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiAuctionRecordRequest), isFromPool) as C2P_PaiMaiAuctionRecordRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiAuctionRecordResponse)]
    public partial class P2C_PaiMaiAuctionRecordResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiAuctionRecordResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiAuctionRecordResponse), isFromPool) as P2C_PaiMaiAuctionRecordResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PaiMaiAuctionRecord> RecordList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RecordList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiFindRequest)]
    [ResponseType(nameof(P2C_PaiMaiFindResponse))]
    public partial class C2P_PaiMaiFindRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiFindRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiFindRequest), isFromPool) as C2P_PaiMaiFindRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ItemType { get; set; }

        [MemoryPackOrder(1)]
        public long PaiMaiItemInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ItemType = default;
            this.PaiMaiItemInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiFindResponse)]
    public partial class P2C_PaiMaiFindResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiFindResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiFindResponse), isFromPool) as P2C_PaiMaiFindResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int Page { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Page = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiListRequest)]
    [ResponseType(nameof(P2C_PaiMaiListResponse))]
    public partial class C2P_PaiMaiListRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiListRequest), isFromPool) as C2P_PaiMaiListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        /// <summary>
        /// 1自己 1所有
        /// </summary>
        [MemoryPackOrder(1)]
        public int PaiMaiType { get; set; }

        [MemoryPackOrder(2)]
        public int Page { get; set; }

        [MemoryPackOrder(3)]
        public int PaiMaiShowType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;
            this.PaiMaiType = default;
            this.Page = default;
            this.PaiMaiShowType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiListResponse)]
    public partial class P2C_PaiMaiListResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiListResponse), isFromPool) as P2C_PaiMaiListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PaiMaiItemInfo> PaiMaiItemInfos { get; set; } = new();

        [MemoryPackOrder(1)]
        public int NextPage { get; set; }

        [MemoryPackOrder(2)]
        public long PaiMaiCostGoldToday { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiItemInfos.Clear();
            this.NextPage = default;
            this.PaiMaiCostGoldToday = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiSearchRequest)]
    [ResponseType(nameof(P2C_PaiMaiSearchResponse))]
    public partial class C2P_PaiMaiSearchRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiSearchRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiSearchRequest), isFromPool) as C2P_PaiMaiSearchRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public List<int> FindItemIdList { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<int> FindTypeList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.FindItemIdList.Clear();
            this.FindTypeList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiSearchResponse)]
    public partial class P2C_PaiMaiSearchResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiSearchResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiSearchResponse), isFromPool) as P2C_PaiMaiSearchResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PaiMaiItemInfo> PaiMaiItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_PaiMaiShopShowListRequest)]
    [ResponseType(nameof(P2C_PaiMaiShopShowListResponse))]
    public partial class C2P_PaiMaiShopShowListRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_PaiMaiShopShowListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_PaiMaiShopShowListRequest), isFromPool) as C2P_PaiMaiShopShowListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_PaiMaiShopShowListResponse)]
    public partial class P2C_PaiMaiShopShowListResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_PaiMaiShopShowListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_PaiMaiShopShowListResponse), isFromPool) as P2C_PaiMaiShopShowListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PaiMaiShopItemInfo> PaiMaiShopItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiShopItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2P_StallListRequest)]
    [ResponseType(nameof(P2C_StallListResponse))]
    public partial class C2P_StallListRequest : MessageObject, IPaiMaiListRequest
    {
        public static C2P_StallListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2P_StallListRequest), isFromPool) as C2P_StallListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.P2C_StallListResponse)]
    public partial class P2C_StallListResponse : MessageObject, IPaiMaiListResponse
    {
        public static P2C_StallListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(P2C_StallListResponse), isFromPool) as P2C_StallListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<PaiMaiItemInfo> PaiMaiItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PaiMaiItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_BuChangeRequest)]
    [ResponseType(nameof(M2C_BuChangeResponse))]
    public partial class C2M_BuChangeRequest : MessageObject, ILocationRequest
    {
        public static C2M_BuChangeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BuChangeRequest), isFromPool) as C2M_BuChangeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long BuChangId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BuChangId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BuChangeResponse)]
    public partial class M2C_BuChangeResponse : MessageObject, ILocationResponse
    {
        public static M2C_BuChangeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BuChangeResponse), isFromPool) as M2C_BuChangeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public PlayerInfo PlayerInfo { get; set; }

        [MemoryPackOrder(1)]
        public int BuChangRecharge { get; set; }

        [MemoryPackOrder(2)]
        public int BuChangDiamond { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PlayerInfo = default;
            this.BuChangRecharge = default;
            this.BuChangDiamond = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_CreateSpiling)]
    public partial class C2M_CreateSpiling : MessageObject, ILocationMessage
    {
        public static C2M_CreateSpiling Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_CreateSpiling), isFromPool) as C2M_CreateSpiling;
        }

        [MemoryPackOrder(1)]
        public float X { get; set; }

        [MemoryPackOrder(2)]
        public float Y { get; set; }

        [MemoryPackOrder(3)]
        public float Z { get; set; }

        /// <summary>
        /// 所归属的父实体id
        /// </summary>
        [MemoryPackOrder(4)]
        public long ParentUnitId { get; set; }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(93)]
        public long Id { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.X = default;
            this.Y = default;
            this.Z = default;
            this.ParentUnitId = default;
            this.RpcId = default;
            this.ActorId = default;
            this.Id = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 个人副本喜从天降移动
    [MemoryPackable]
    [Message(OuterMessage.C2M_DungeonHappyMoveRequest)]
    [ResponseType(nameof(M2C_DungeonHappyMoveResponse))]
    public partial class C2M_DungeonHappyMoveRequest : MessageObject, ILocationRequest
    {
        public static C2M_DungeonHappyMoveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_DungeonHappyMoveRequest), isFromPool) as C2M_DungeonHappyMoveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1免费移动 2金币移动 3钻石移动
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperatateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperatateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_DungeonHappyMoveResponse)]
    public partial class M2C_DungeonHappyMoveResponse : MessageObject, ILocationResponse
    {
        public static M2C_DungeonHappyMoveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_DungeonHappyMoveResponse), isFromPool) as M2C_DungeonHappyMoveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FindJingLingRequest)]
    [ResponseType(nameof(M2C_FindJingLingResponse))]
    public partial class C2M_FindJingLingRequest : MessageObject, ILocationRequest
    {
        public static C2M_FindJingLingRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FindJingLingRequest), isFromPool) as C2M_FindJingLingRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FindJingLingResponse)]
    public partial class M2C_FindJingLingResponse : MessageObject, ILocationResponse
    {
        public static M2C_FindJingLingResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FindJingLingResponse), isFromPool) as M2C_FindJingLingResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(4)]
        public int MonsterID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.MonsterID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FindNearMonsterRequest)]
    [ResponseType(nameof(M2C_FindNearMonsterResponse))]
    public partial class C2M_FindNearMonsterRequest : MessageObject, ILocationRequest
    {
        public static C2M_FindNearMonsterRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FindNearMonsterRequest), isFromPool) as C2M_FindNearMonsterRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FindNearMonsterResponse)]
    public partial class M2C_FindNearMonsterResponse : MessageObject, ILocationResponse
    {
        public static M2C_FindNearMonsterResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FindNearMonsterResponse), isFromPool) as M2C_FindNearMonsterResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public float x { get; set; }

        [MemoryPackOrder(1)]
        public float y { get; set; }

        [MemoryPackOrder(2)]
        public float z { get; set; }

        [MemoryPackOrder(3)]
        public bool IfFindStatus { get; set; }

        [MemoryPackOrder(4)]
        public long MonsterID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.x = default;
            this.y = default;
            this.z = default;
            this.IfFindStatus = default;
            this.MonsterID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FirstWinSelfRewardRequest)]
    [ResponseType(nameof(M2C_FirstWinSelfRewardResponse))]
    public partial class C2M_FirstWinSelfRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_FirstWinSelfRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FirstWinSelfRewardRequest), isFromPool) as C2M_FirstWinSelfRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int FirstWinId { get; set; }

        [MemoryPackOrder(1)]
        public int Difficulty { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.FirstWinId = default;
            this.Difficulty = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FirstWinSelfRewardResponse)]
    public partial class M2C_FirstWinSelfRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_FirstWinSelfRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FirstWinSelfRewardResponse), isFromPool) as M2C_FirstWinSelfRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<KeyValuePair> FirstWinInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FirstWinInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 通用协议 应急用
    [MemoryPackable]
    [Message(OuterMessage.C2M_FubenMessageRequest)]
    [ResponseType(nameof(M2C_FubenMessageResponse))]
    public partial class C2M_FubenMessageRequest : MessageObject, ILocationRequest
    {
        public static C2M_FubenMessageRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FubenMessageRequest), isFromPool) as C2M_FubenMessageRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SceneType { get; set; }

        [MemoryPackOrder(1)]
        public int MessageType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SceneType = default;
            this.MessageType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FubenMessageResponse)]
    public partial class M2C_FubenMessageResponse : MessageObject, ILocationResponse
    {
        public static M2C_FubenMessageResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FubenMessageResponse), isFromPool) as M2C_FubenMessageResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string MessageValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MessageValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_FubenTimesResetRequest)]
    [ResponseType(nameof(M2C_FubenTimesResetResponse))]
    public partial class C2M_FubenTimesResetRequest : MessageObject, ILocationRequest
    {
        public static C2M_FubenTimesResetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_FubenTimesResetRequest), isFromPool) as C2M_FubenTimesResetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_FubenTimesResetResponse)]
    public partial class M2C_FubenTimesResetResponse : MessageObject, ILocationResponse
    {
        public static M2C_FubenTimesResetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_FubenTimesResetResponse), isFromPool) as M2C_FubenTimesResetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 游戏设置
    [MemoryPackable]
    [Message(OuterMessage.C2M_GameSettingRequest)]
    [ResponseType(nameof(M2C_GameSettingResponse))]
    public partial class C2M_GameSettingRequest : MessageObject, ILocationRequest
    {
        public static C2M_GameSettingRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GameSettingRequest), isFromPool) as C2M_GameSettingRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public List<KeyValuePair> GameSettingInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.GameSettingInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GameSettingResponse)]
    public partial class M2C_GameSettingResponse : MessageObject, ILocationResponse
    {
        public static M2C_GameSettingResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GameSettingResponse), isFromPool) as M2C_GameSettingResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_GMCustomRequest)]
    [ResponseType(nameof(M2C_GMCustomResponse))]
    public partial class C2M_GMCustomRequest : MessageObject, ILocationRequest
    {
        public static C2M_GMCustomRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GMCustomRequest), isFromPool) as C2M_GMCustomRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GMCustomResponse)]
    public partial class M2C_GMCustomResponse : MessageObject, ILocationResponse
    {
        public static M2C_GMCustomResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GMCustomResponse), isFromPool) as M2C_GMCustomResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_GuideUpdateRequest)]
    [ResponseType(nameof(M2C_GuideUpdateResponse))]
    public partial class C2M_GuideUpdateRequest : MessageObject, ILocationRequest
    {
        public static C2M_GuideUpdateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_GuideUpdateRequest), isFromPool) as C2M_GuideUpdateRequest;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int GuideId { get; set; }

        [MemoryPackOrder(2)]
        public int GuideStep { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.GuideId = default;
            this.GuideStep = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_GuideUpdateResponse)]
    public partial class M2C_GuideUpdateResponse : MessageObject, ILocationResponse
    {
        public static M2C_GuideUpdateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_GuideUpdateResponse), isFromPool) as M2C_GuideUpdateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_KillMonsterRewardRequest)]
    [ResponseType(nameof(M2C_KillMonsterRewardResponse))]
    public partial class C2M_KillMonsterRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_KillMonsterRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_KillMonsterRewardRequest), isFromPool) as C2M_KillMonsterRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int Key { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Key = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_KillMonsterRewardResponse)]
    public partial class M2C_KillMonsterRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_KillMonsterRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_KillMonsterRewardResponse), isFromPool) as M2C_KillMonsterRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_LeavlRewardRequest)]
    [ResponseType(nameof(M2C_LeavlRewardResponse))]
    public partial class C2M_LeavlRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_LeavlRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_LeavlRewardRequest), isFromPool) as C2M_LeavlRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int LvKey { get; set; }

        [MemoryPackOrder(1)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.LvKey = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_LeavlRewardResponse)]
    public partial class M2C_LeavlRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_LeavlRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_LeavlRewardResponse), isFromPool) as M2C_LeavlRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 改游戏名
    [MemoryPackable]
    [Message(OuterMessage.C2M_ModifyNameRequest)]
    [ResponseType(nameof(M2C_ModifyNameResponse))]
    public partial class C2M_ModifyNameRequest : MessageObject, ILocationRequest
    {
        public static C2M_ModifyNameRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ModifyNameRequest), isFromPool) as C2M_ModifyNameRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string NewName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.NewName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ModifyNameResponse)]
    public partial class M2C_ModifyNameResponse : MessageObject, ILocationResponse
    {
        public static M2C_ModifyNameResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ModifyNameResponse), isFromPool) as M2C_ModifyNameResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_MysteryBuyRequest)]
    [ResponseType(nameof(M2C_MysteryBuyResponse))]
    public partial class C2M_MysteryBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_MysteryBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_MysteryBuyRequest), isFromPool) as C2M_MysteryBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public MysteryItemInfo MysteryItemInfo { get; set; }

        [MemoryPackOrder(1)]
        public int NpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MysteryItemInfo = default;
            this.NpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_MysteryBuyResponse)]
    public partial class M2C_MysteryBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_MysteryBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_MysteryBuyResponse), isFromPool) as M2C_MysteryBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_OneChallengeRequest)]
    [ResponseType(nameof(M2C_OneChallengeResponse))]
    public partial class C2M_OneChallengeRequest : MessageObject, ILocationRequest
    {
        public static C2M_OneChallengeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_OneChallengeRequest), isFromPool) as C2M_OneChallengeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long OtherId { get; set; }

        /// <summary>
        /// 1放弃挑战  2接受挑战
        /// </summary>
        [MemoryPackOrder(1)]
        public int Operatate { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OtherId = default;
            this.Operatate = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_OneChallengeResponse)]
    public partial class M2C_OneChallengeResponse : MessageObject, ILocationResponse
    {
        public static M2C_OneChallengeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_OneChallengeResponse), isFromPool) as M2C_OneChallengeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int Operatate { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.Operatate = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_OneChallenge)]
    public partial class M2C_OneChallenge : MessageObject, IMessage
    {
        public static M2C_OneChallenge Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_OneChallenge), isFromPool) as M2C_OneChallenge;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1收到挑战 2开始挑战
        /// </summary>
        [MemoryPackOrder(0)]
        public int Operatate { get; set; }

        [MemoryPackOrder(1)]
        public long OtherId { get; set; }

        [MemoryPackOrder(2)]
        public string OtherName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Operatate = default;
            this.OtherId = default;
            this.OtherName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ReddotReadRequest)]
    [ResponseType(nameof(M2C_ReddotReadResponse))]
    public partial class C2M_ReddotReadRequest : MessageObject, ILocationRequest
    {
        public static C2M_ReddotReadRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ReddotReadRequest), isFromPool) as C2M_ReddotReadRequest;
        }

        [MemoryPackOrder(0)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int ReddotType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ReddotType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ReddotReadResponse)]
    public partial class M2C_ReddotReadResponse : MessageObject, ILocationResponse
    {
        public static M2C_ReddotReadResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ReddotReadResponse), isFromPool) as M2C_ReddotReadResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 重连成功刷新Unit
    [MemoryPackable]
    [Message(OuterMessage.C2M_RefreshUnitRequest)]
    public partial class C2M_RefreshUnitRequest : MessageObject, ILocationMessage
    {
        public static C2M_RefreshUnitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RefreshUnitRequest), isFromPool) as C2M_RefreshUnitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 序列号奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_SerialReardRequest)]
    [ResponseType(nameof(M2C_SerialReardResponse))]
    public partial class C2M_SerialReardRequest : MessageObject, ILocationRequest
    {
        public static C2M_SerialReardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SerialReardRequest), isFromPool) as C2M_SerialReardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public string SerialNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SerialNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SerialReardResponse)]
    public partial class M2C_SerialReardResponse : MessageObject, ILocationResponse
    {
        public static M2C_SerialReardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SerialReardResponse), isFromPool) as M2C_SerialReardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ShareSucessRequest)]
    [ResponseType(nameof(M2C_ShareSucessResponse))]
    public partial class C2M_ShareSucessRequest : MessageObject, ILocationRequest
    {
        public static C2M_ShareSucessRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ShareSucessRequest), isFromPool) as C2M_ShareSucessRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ShareType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ShareType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ShareSucessResponse)]
    public partial class M2C_ShareSucessResponse : MessageObject, ILocationResponse
    {
        public static M2C_ShareSucessResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ShareSucessResponse), isFromPool) as M2C_ShareSucessResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_UnitInfoRequest)]
    [ResponseType(nameof(M2C_UnitInfoResponse))]
    public partial class C2M_UnitInfoRequest : MessageObject, ILocationRequest
    {
        public static C2M_UnitInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_UnitInfoRequest), isFromPool) as C2M_UnitInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UnitInfoResponse)]
    public partial class M2C_UnitInfoResponse : MessageObject, ILocationResponse
    {
        public static M2C_UnitInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UnitInfoResponse), isFromPool) as M2C_UnitInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(5)]
        public List<int> Ks { get; set; } = new();

        [MemoryPackOrder(6)]
        public List<long> Vs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Ks.Clear();
            this.Vs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_XiuLianCenterRequest)]
    [ResponseType(nameof(M2C_XiuLianCenterResponse))]
    public partial class C2M_XiuLianCenterRequest : MessageObject, ILocationRequest
    {
        public static C2M_XiuLianCenterRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_XiuLianCenterRequest), isFromPool) as C2M_XiuLianCenterRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int XiuLianType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.XiuLianType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_XiuLianCenterResponse)]
    public partial class M2C_XiuLianCenterResponse : MessageObject, ILocationResponse
    {
        public static M2C_XiuLianCenterResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_XiuLianCenterResponse), isFromPool) as M2C_XiuLianCenterResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 我的推广列表
    [MemoryPackable]
    [Message(OuterMessage.C2Popularize_ListRequest)]
    [ResponseType(nameof(Popularize2C_ListResponse))]
    public partial class C2Popularize_ListRequest : MessageObject, IPopularizeActorRequest
    {
        public static C2Popularize_ListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Popularize_ListRequest), isFromPool) as C2Popularize_ListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Popularize2C_ListResponse)]
    public partial class Popularize2C_ListResponse : MessageObject, IPopularizeActorResponse
    {
        public static Popularize2C_ListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Popularize2C_ListResponse), isFromPool) as Popularize2C_ListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public long PopularizeCode { get; set; }

        [MemoryPackOrder(1)]
        public long BePopularizeId { get; set; }

        [MemoryPackOrder(2)]
        public List<PopularizeInfo> MyPopularizeList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PopularizeCode = default;
            this.BePopularizeId = default;
            this.MyPopularizeList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 我推广的玩家
    [MemoryPackable]
    [Message(OuterMessage.C2Popularize_PlayerRequest)]
    [ResponseType(nameof(Popularize2C_PlayerResponse))]
    public partial class C2Popularize_PlayerRequest : MessageObject, IPopularizeActorRequest
    {
        public static C2Popularize_PlayerRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Popularize_PlayerRequest), isFromPool) as C2Popularize_PlayerRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long PopularizeId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.PopularizeId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Popularize2C_PlayerResponse)]
    public partial class Popularize2C_PlayerResponse : MessageObject, IPopularizeActorResponse
    {
        public static Popularize2C_PlayerResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Popularize2C_PlayerResponse), isFromPool) as Popularize2C_PlayerResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_CampRankListRequest)]
    [ResponseType(nameof(R2C_CampRankListResponse))]
    public partial class C2R_CampRankListRequest : MessageObject, IRankActorRequest
    {
        public static C2R_CampRankListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_CampRankListRequest), isFromPool) as C2R_CampRankListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_CampRankListResponse)]
    public partial class R2C_CampRankListResponse : MessageObject, IRankActorResponse
    {
        public static R2C_CampRankListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_CampRankListResponse), isFromPool) as R2C_CampRankListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList_1 { get; set; } = new();

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(1)]
        public List<RankingInfo> RankList_2 { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.RankList_1.Clear();
            this.RankList_2.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_DBServerInfoRequest)]
    [ResponseType(nameof(R2C_DBServerInfoResponse))]
    public partial class C2R_DBServerInfoRequest : MessageObject, IRankActorRequest
    {
        public static C2R_DBServerInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_DBServerInfoRequest), isFromPool) as C2R_DBServerInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_DBServerInfoResponse)]
    public partial class R2C_DBServerInfoResponse : MessageObject, IRankActorResponse
    {
        public static R2C_DBServerInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_DBServerInfoResponse), isFromPool) as R2C_DBServerInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public ServerInfo ServerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ServerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankDemonRequest)]
    [ResponseType(nameof(R2C_RankDemonResponse))]
    public partial class C2R_RankDemonRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankDemonRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankDemonRequest), isFromPool) as C2R_RankDemonRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankDemonResponse)]
    public partial class R2C_RankDemonResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankDemonResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankDemonResponse), isFromPool) as R2C_RankDemonResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankListRequest)]
    [ResponseType(nameof(R2C_RankListResponse))]
    public partial class C2R_RankListRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankListRequest), isFromPool) as C2R_RankListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankListResponse)]
    public partial class R2C_RankListResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankListResponse), isFromPool) as R2C_RankListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankLastRewardRequest)]
    [ResponseType(nameof(R2C_RankLastRewardResponse))]
    public partial class C2R_RankLastRewardRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankLastRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankLastRewardRequest), isFromPool) as C2R_RankLastRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RankType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RankType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankLastRewardResponse)]
    public partial class R2C_RankLastRewardResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankLastRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankLastRewardResponse), isFromPool) as R2C_RankLastRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> LastRewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.LastRewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankPetListRequest)]
    [ResponseType(nameof(R2C_RankPetListResponse))]
    public partial class C2R_RankPetListRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankPetListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankPetListRequest), isFromPool) as C2R_RankPetListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(93)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankPetListResponse)]
    public partial class R2C_RankPetListResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankPetListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankPetListResponse), isFromPool) as R2C_RankPetListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int LeftCombatTime { get; set; }

        /// <summary>
        /// 宠物天梯列表
        /// </summary>
        [MemoryPackOrder(1)]
        public List<RankPetInfo> RankPetList { get; set; } = new();

        [MemoryPackOrder(2)]
        public long RankNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.LeftCombatTime = default;
            this.RankPetList.Clear();
            this.RankNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankRunRaceRequest)]
    [ResponseType(nameof(R2C_RankRunRaceResponse))]
    public partial class C2R_RankRunRaceRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankRunRaceRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankRunRaceRequest), isFromPool) as C2R_RankRunRaceRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankRunRaceResponse)]
    public partial class R2C_RankRunRaceResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankRunRaceResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankRunRaceResponse), isFromPool) as R2C_RankRunRaceResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankSeasonTowerRequest)]
    [ResponseType(nameof(R2C_RankSeasonTowerResponse))]
    public partial class C2R_RankSeasonTowerRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankSeasonTowerRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankSeasonTowerRequest), isFromPool) as C2R_RankSeasonTowerRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankSeasonTowerResponse)]
    public partial class R2C_RankSeasonTowerResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankSeasonTowerResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankSeasonTowerResponse), isFromPool) as R2C_RankSeasonTowerResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankSeasonTowerInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankShowLieRequest)]
    [ResponseType(nameof(R2C_RankShowLieResponse))]
    public partial class C2R_RankShowLieRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankShowLieRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankShowLieRequest), isFromPool) as C2R_RankShowLieRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankShowLieResponse)]
    public partial class R2C_RankShowLieResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankShowLieResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankShowLieResponse), isFromPool) as R2C_RankShowLieResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankShouLieInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankTrialListRequest)]
    [ResponseType(nameof(R2C_RankTrialListResponse))]
    public partial class C2R_RankTrialListRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankTrialListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankTrialListRequest), isFromPool) as C2R_RankTrialListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankTrialListResponse)]
    public partial class R2C_RankTrialListResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankTrialListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankTrialListResponse), isFromPool) as R2C_RankTrialListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankingTrialInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_RankUnionRaceRequest)]
    [ResponseType(nameof(R2C_RankUnionRaceResponse))]
    public partial class C2R_RankUnionRaceRequest : MessageObject, IRankActorRequest
    {
        public static C2R_RankUnionRaceRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_RankUnionRaceRequest), isFromPool) as C2R_RankUnionRaceRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_RankUnionRaceResponse)]
    public partial class R2C_RankUnionRaceResponse : MessageObject, IRankActorResponse
    {
        public static R2C_RankUnionRaceResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_RankUnionRaceResponse), isFromPool) as R2C_RankUnionRaceResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 排行榜列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RankShouLieInfo> RankList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RankList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2R_WorldLvRequest)]
    [ResponseType(nameof(R2C_WorldLvResponse))]
    public partial class C2R_WorldLvRequest : MessageObject, IRankActorRequest
    {
        public static C2R_WorldLvRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2R_WorldLvRequest), isFromPool) as C2R_WorldLvRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RankType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RankType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.R2C_WorldLvResponse)]
    public partial class R2C_WorldLvResponse : MessageObject, IRankActorResponse
    {
        public static R2C_WorldLvResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(R2C_WorldLvResponse), isFromPool) as R2C_WorldLvResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 世界等级
        /// </summary>
        [MemoryPackOrder(0)]
        public ServerInfo ServerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ServerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_SoloMatchRequest)]
    [ResponseType(nameof(M2C_SoloMatchResponse))]
    public partial class C2M_SoloMatchRequest : MessageObject, ILocationRequest
    {
        public static C2M_SoloMatchRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SoloMatchRequest), isFromPool) as C2M_SoloMatchRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SoloMatchResponse)]
    public partial class M2C_SoloMatchResponse : MessageObject, ILocationResponse
    {
        public static M2C_SoloMatchResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SoloMatchResponse), isFromPool) as M2C_SoloMatchResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // solo战绩
    [MemoryPackable]
    [Message(OuterMessage.C2S_SoloMyInfoRequest)]
    [ResponseType(nameof(S2C_SoloMyInfoResponse))]
    public partial class C2S_SoloMyInfoRequest : MessageObject, ISoloActorRequest
    {
        public static C2S_SoloMyInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2S_SoloMyInfoRequest), isFromPool) as C2S_SoloMyInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.S2C_SoloMyInfoResponse)]
    public partial class S2C_SoloMyInfoResponse : MessageObject, ISoloActorResponse
    {
        public static S2C_SoloMyInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(S2C_SoloMyInfoResponse), isFromPool) as S2C_SoloMyInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long MathTime { get; set; }

        [MemoryPackOrder(1)]
        public int WinTime { get; set; }

        [MemoryPackOrder(2)]
        public int FailTime { get; set; }

        [MemoryPackOrder(3)]
        public List<SoloPlayerResultInfo> SoloPlayerResultInfoList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MathTime = default;
            this.WinTime = default;
            this.FailTime = default;
            this.SoloPlayerResultInfoList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 副本选择奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamDungeonBoxRewardRequest)]
    [ResponseType(nameof(M2C_TeamDungeonBoxRewardResponse))]
    public partial class C2M_TeamDungeonBoxRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_TeamDungeonBoxRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamDungeonBoxRewardRequest), isFromPool) as C2M_TeamDungeonBoxRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int BoxIndex { get; set; }

        [MemoryPackOrder(1)]
        public RewardItem RewardItem { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BoxIndex = default;
            this.RewardItem = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonBoxRewardResponse)]
    public partial class M2C_TeamDungeonBoxRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_TeamDungeonBoxRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonBoxRewardResponse), isFromPool) as M2C_TeamDungeonBoxRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int Mail { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.Mail = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 创建组队副本
    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamDungeonCreateRequest)]
    [ResponseType(nameof(M2C_TeamDungeonCreateResponse))]
    public partial class C2M_TeamDungeonCreateRequest : MessageObject, ILocationRequest
    {
        public static C2M_TeamDungeonCreateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamDungeonCreateRequest), isFromPool) as C2M_TeamDungeonCreateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int FubenId { get; set; }

        [MemoryPackOrder(1)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        [MemoryPackOrder(2)]
        public int FubenType { get; set; }

        [MemoryPackOrder(3)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.FubenId = default;
            this.TeamPlayerInfo = default;
            this.FubenType = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonCreateResponse)]
    public partial class M2C_TeamDungeonCreateResponse : MessageObject, ILocationResponse
    {
        public static M2C_TeamDungeonCreateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonCreateResponse), isFromPool) as M2C_TeamDungeonCreateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public TeamInfo TeamInfo { get; set; }

        [MemoryPackOrder(2)]
        public int FubenType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.TeamInfo = default;
            this.FubenType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 开启组队副本
    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamDungeonOpenRequest)]
    [ResponseType(nameof(M2C_TeamDungeonOpenResponse))]
    public partial class C2M_TeamDungeonOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_TeamDungeonOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamDungeonOpenRequest), isFromPool) as C2M_TeamDungeonOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserID { get; set; }

        [MemoryPackOrder(1)]
        public int FubenType { get; set; }

        [MemoryPackOrder(2)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserID = default;
            this.FubenType = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonOpenResponse)]
    public partial class M2C_TeamDungeonOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_TeamDungeonOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonOpenResponse), isFromPool) as M2C_TeamDungeonOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(2)]
        public int FubenType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FubenType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 请求准备
    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamDungeonPrepareRequest)]
    [ResponseType(nameof(M2C_TeamDungeonPrepareResponse))]
    public partial class C2M_TeamDungeonPrepareRequest : MessageObject, ILocationRequest
    {
        public static C2M_TeamDungeonPrepareRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamDungeonPrepareRequest), isFromPool) as C2M_TeamDungeonPrepareRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public TeamInfo TeamInfo { get; set; }

        /// <summary>
        /// 0未选择 1同意 2拒绝
        /// </summary>
        [MemoryPackOrder(1)]
        public int Prepare { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TeamInfo = default;
            this.Prepare = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonPrepareResponse)]
    public partial class M2C_TeamDungeonPrepareResponse : MessageObject, ILocationResponse
    {
        public static M2C_TeamDungeonPrepareResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonPrepareResponse), isFromPool) as M2C_TeamDungeonPrepareResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamerPositionRequest)]
    [ResponseType(nameof(M2C_TeamerPositionResponse))]
    public partial class C2M_TeamerPositionRequest : MessageObject, ILocationRequest
    {
        public static C2M_TeamerPositionRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamerPositionRequest), isFromPool) as C2M_TeamerPositionRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamerPositionResponse)]
    public partial class M2C_TeamerPositionResponse : MessageObject, ILocationResponse
    {
        public static M2C_TeamerPositionResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamerPositionResponse), isFromPool) as M2C_TeamerPositionResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<UnitInfo> UnitList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.UnitList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TeamPickRequest)]
    public partial class C2M_TeamPickRequest : MessageObject, ILocationMessage
    {
        public static C2M_TeamPickRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TeamPickRequest), isFromPool) as C2M_TeamPickRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long DropItem { get; set; }

        /// <summary>
        /// 1需求 2丢弃
        /// </summary>
        [MemoryPackOrder(1)]
        public int Need { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.DropItem = default;
            this.Need = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonBoxRewardResult)]
    public partial class M2C_TeamDungeonBoxRewardResult : MessageObject, IMessage
    {
        public static M2C_TeamDungeonBoxRewardResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonBoxRewardResult), isFromPool) as M2C_TeamDungeonBoxRewardResult;
        }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public int BoxIndex { get; set; }

        [MemoryPackOrder(2)]
        public string PlayerName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserId = default;
            this.BoxIndex = default;
            this.PlayerName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 同意组队
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamAgreeRequest)]
    [ResponseType(nameof(T2C_TeamAgreeResponse))]
    public partial class C2T_TeamAgreeRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamAgreeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamAgreeRequest), isFromPool) as C2T_TeamAgreeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 邀请者
        /// </summary>
        [MemoryPackOrder(0)]
        public TeamPlayerInfo TeamPlayerInfo_1 { get; set; }

        /// <summary>
        /// 自己
        /// </summary>
        [MemoryPackOrder(1)]
        public TeamPlayerInfo TeamPlayerInfo_2 { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TeamPlayerInfo_1 = default;
            this.TeamPlayerInfo_2 = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamAgreeResponse)]
    public partial class T2C_TeamAgreeResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamAgreeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamAgreeResponse), isFromPool) as T2C_TeamAgreeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 同意组队副本申请
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamDungeonAgreeRequest)]
    [ResponseType(nameof(T2C_TeamDungeonAgreeResponse))]
    public partial class C2T_TeamDungeonAgreeRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamDungeonAgreeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamDungeonAgreeRequest), isFromPool) as C2T_TeamDungeonAgreeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long TeamId { get; set; }

        [MemoryPackOrder(1)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TeamId = default;
            this.TeamPlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamDungeonAgreeResponse)]
    public partial class T2C_TeamDungeonAgreeResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamDungeonAgreeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamDungeonAgreeResponse), isFromPool) as T2C_TeamDungeonAgreeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 组队副本申请
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamDungeonApplyRequest)]
    [ResponseType(nameof(T2C_TeamDungeonApplyResponse))]
    public partial class C2T_TeamDungeonApplyRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamDungeonApplyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamDungeonApplyRequest), isFromPool) as C2T_TeamDungeonApplyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long TeamId { get; set; }

        [MemoryPackOrder(1)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.TeamId = default;
            this.TeamPlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamDungeonApplyResponse)]
    public partial class T2C_TeamDungeonApplyResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamDungeonApplyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamDungeonApplyResponse), isFromPool) as T2C_TeamDungeonApplyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonApplyResult)]
    public partial class M2C_TeamDungeonApplyResult : MessageObject, IMessage
    {
        public static M2C_TeamDungeonApplyResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonApplyResult), isFromPool) as M2C_TeamDungeonApplyResult;
        }

        [MemoryPackOrder(0)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.TeamPlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 组队副本
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamDungeonInfoRequest)]
    [ResponseType(nameof(T2C_TeamDungeonInfoResponse))]
    public partial class C2T_TeamDungeonInfoRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamDungeonInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamDungeonInfoRequest), isFromPool) as C2T_TeamDungeonInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamDungeonInfoResponse)]
    public partial class T2C_TeamDungeonInfoResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamDungeonInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamDungeonInfoResponse), isFromPool) as T2C_TeamDungeonInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<TeamInfo> TeamList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.TeamList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 邀请组队
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamInviteRequest)]
    [ResponseType(nameof(T2C_TeamInviteResponse))]
    public partial class C2T_TeamInviteRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamInviteRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamInviteRequest), isFromPool) as C2T_TeamInviteRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserID { get; set; }

        [MemoryPackOrder(1)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserID = default;
            this.TeamPlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamInviteResponse)]
    public partial class T2C_TeamInviteResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamInviteResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamInviteResponse), isFromPool) as T2C_TeamInviteResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamInviteResult)]
    public partial class M2C_TeamInviteResult : MessageObject, IMessage
    {
        public static M2C_TeamInviteResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamInviteResult), isFromPool) as M2C_TeamInviteResult;
        }

        [MemoryPackOrder(0)]
        public TeamPlayerInfo TeamPlayerInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.TeamPlayerInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 踢出队伍
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamKickOutRequest)]
    [ResponseType(nameof(T2C_TeamKickOutResponse))]
    public partial class C2T_TeamKickOutRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamKickOutRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamKickOutRequest), isFromPool) as C2T_TeamKickOutRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamKickOutResponse)]
    public partial class T2C_TeamKickOutResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamKickOutResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamKickOutResponse), isFromPool) as T2C_TeamKickOutResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 离开组队
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamLeaveRequest)]
    [ResponseType(nameof(T2C_TeamLeaveResponse))]
    public partial class C2T_TeamLeaveRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamLeaveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamLeaveRequest), isFromPool) as C2T_TeamLeaveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UserId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UserId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamLeaveResponse)]
    public partial class T2C_TeamLeaveResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamLeaveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamLeaveResponse), isFromPool) as T2C_TeamLeaveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 邀请组队
    [MemoryPackable]
    [Message(OuterMessage.C2T_TeamRobotRequest)]
    [ResponseType(nameof(T2C_TeamRobotResponse))]
    public partial class C2T_TeamRobotRequest : MessageObject, ITeamActorRequest
    {
        public static C2T_TeamRobotRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2T_TeamRobotRequest), isFromPool) as C2T_TeamRobotRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.T2C_TeamRobotResponse)]
    public partial class T2C_TeamRobotResponse : MessageObject, ITeamActorResponse
    {
        public static T2C_TeamRobotResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(T2C_TeamRobotResponse), isFromPool) as T2C_TeamRobotResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 副本开启
    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonOpenResult)]
    public partial class M2C_TeamDungeonOpenResult : MessageObject, IMessage
    {
        public static M2C_TeamDungeonOpenResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonOpenResult), isFromPool) as M2C_TeamDungeonOpenResult;
        }

        [MemoryPackOrder(0)]
        public TeamInfo TeamInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.TeamInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 玩家准备
    [MemoryPackable]
    [Message(OuterMessage.M2C_TeamDungeonPrepareResult)]
    public partial class M2C_TeamDungeonPrepareResult : MessageObject, IMessage
    {
        public static M2C_TeamDungeonPrepareResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TeamDungeonPrepareResult), isFromPool) as M2C_TeamDungeonPrepareResult;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// TeamInfo == null 超时
        /// </summary>
        [MemoryPackOrder(0)]
        public TeamInfo TeamInfo { get; set; }

        [MemoryPackOrder(1)]
        public int ErrorCode { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.TeamInfo = default;
            this.ErrorCode = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_DragonSonDungeonInfo)]
    public partial class M2C_DragonSonDungeonInfo : MessageObject, IMessage
    {
        public static M2C_DragonSonDungeonInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_DragonSonDungeonInfo), isFromPool) as M2C_DragonSonDungeonInfo;
        }

        [MemoryPackOrder(1)]
        public SonFubenInfo SonFubenInfo { get; set; }

        [MemoryPackOrder(2)]
        public List<Unity.Mathematics.float3> Positions { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<long> UnitIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SonFubenInfo = default;
            this.Positions.Clear();
            this.UnitIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // v1活动.抽奖
    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityChouKaRequest)]
    [ResponseType(nameof(M2C_ActivityChouKaResponse))]
    public partial class C2M_ActivityChouKaRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityChouKaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityChouKaRequest), isFromPool) as C2M_ActivityChouKaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityChouKaResponse)]
    public partial class M2C_ActivityChouKaResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityChouKaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityChouKaResponse), isFromPool) as M2C_ActivityChouKaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 喂食物
    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityFeedRequest)]
    [ResponseType(nameof(M2C_ActivityFeedResponse))]
    public partial class C2M_ActivityFeedRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityFeedRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityFeedRequest), isFromPool) as C2M_ActivityFeedRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ItemID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ItemID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityFeedResponse)]
    public partial class M2C_ActivityFeedResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityFeedResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityFeedResponse), isFromPool) as M2C_ActivityFeedResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public ActivityV1InfoProto ActivityV1InfoProto { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ActivityV1InfoProto = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityGuessRequest)]
    [ResponseType(nameof(M2C_ActivityGuessResponse))]
    public partial class C2M_ActivityGuessRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityGuessRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityGuessRequest), isFromPool) as C2M_ActivityGuessRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int GuessId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.GuessId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityGuessResponse)]
    public partial class M2C_ActivityGuessResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityGuessResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityGuessResponse), isFromPool) as M2C_ActivityGuessResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 活动信息
    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityInfoRequest)]
    [ResponseType(nameof(M2C_ActivityInfoResponse))]
    public partial class C2M_ActivityInfoRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityInfoRequest), isFromPool) as C2M_ActivityInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 活动类型
        /// </summary>
        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        /// <summary>
        /// 活动ID
        /// </summary>
        [MemoryPackOrder(1)]
        public int ActivityId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;
            this.ActivityId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityInfoResponse)]
    public partial class M2C_ActivityInfoResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityInfoResponse), isFromPool) as M2C_ActivityInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> ReceiveIds { get; set; } = new();

        [MemoryPackOrder(1)]
        public long LastSignTime { get; set; }

        [MemoryPackOrder(2)]
        public int TotalSignNumber { get; set; }

        [MemoryPackOrder(3)]
        public long LastSignTime_VIP { get; set; }

        [MemoryPackOrder(4)]
        public int TotalSignNumber_VIP { get; set; }

        [MemoryPackOrder(5)]
        public List<TokenRecvive> QuTokenRecvive { get; set; } = new();

        [MemoryPackOrder(6)]
        public long LastLoginTime { get; set; }

        [MemoryPackOrder(7)]
        public List<int> DayTeHui { get; set; } = new();

        [MemoryPackOrder(8)]
        public ActivityV1InfoProto ActivityV1InfoProto { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ReceiveIds.Clear();
            this.LastSignTime = default;
            this.TotalSignNumber = default;
            this.LastSignTime_VIP = default;
            this.TotalSignNumber_VIP = default;
            this.QuTokenRecvive.Clear();
            this.LastLoginTime = default;
            this.DayTeHui.Clear();
            this.ActivityV1InfoProto = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 领取奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityReceiveRequest)]
    [ResponseType(nameof(M2C_ActivityReceiveResponse))]
    public partial class C2M_ActivityReceiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityReceiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityReceiveRequest), isFromPool) as C2M_ActivityReceiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 活动类型
        /// </summary>
        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        /// <summary>
        /// 活动ID
        /// </summary>
        [MemoryPackOrder(1)]
        public int ActivityId { get; set; }

        [MemoryPackOrder(2)]
        public int ReceiveIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;
            this.ActivityId = default;
            this.ReceiveIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityReceiveResponse)]
    public partial class M2C_ActivityReceiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityReceiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityReceiveResponse), isFromPool) as M2C_ActivityReceiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 领取充值签到奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityRechargeSignRequest)]
    [ResponseType(nameof(M2C_ActivityRechargeSignResponse))]
    public partial class C2M_ActivityRechargeSignRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityRechargeSignRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityRechargeSignRequest), isFromPool) as C2M_ActivityRechargeSignRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 活动类型
        /// </summary>
        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        /// <summary>
        /// 活动ID
        /// </summary>
        [MemoryPackOrder(1)]
        public int ActivityId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;
            this.ActivityId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityRechargeSignResponse)]
    public partial class M2C_ActivityRechargeSignResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityRechargeSignResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityRechargeSignResponse), isFromPool) as M2C_ActivityRechargeSignResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ActivityRewardRequest)]
    [ResponseType(nameof(M2C_ActivityRewardResponse))]
    public partial class C2M_ActivityRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_ActivityRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ActivityRewardRequest), isFromPool) as C2M_ActivityRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// ActivityConfigHelper.ActivityV1_ChouKa /.ActivityV1_Consume
        /// </summary>
        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        /// <summary>
        /// ActivityConfigHelper.ActivityV1_DuiHuanWord >0为具体的字  0为整套兑换
        /// </summary>
        [MemoryPackOrder(1)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ActivityRewardResponse)]
    public partial class M2C_ActivityRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_ActivityRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ActivityRewardResponse), isFromPool) as M2C_ActivityRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public ActivityV1InfoProto ActivityV1InfoProto { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ActivityV1InfoProto = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 刷新奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_ChouKa2RefreshRequest)]
    [ResponseType(nameof(M2C_ChouKa2RefreshResponse))]
    public partial class C2M_ChouKa2RefreshRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChouKa2RefreshRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChouKa2RefreshRequest), isFromPool) as C2M_ChouKa2RefreshRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChouKa2RefreshResponse)]
    public partial class M2C_ChouKa2RefreshResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChouKa2RefreshResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChouKa2RefreshResponse), isFromPool) as M2C_ChouKa2RefreshResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public ActivityV1InfoProto ActivityV1InfoProto { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ActivityV1InfoProto = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_SingleRechargeRewardRequest)]
    [ResponseType(nameof(M2C_SingleRechargeRewardResponse))]
    public partial class C2M_SingleRechargeRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_SingleRechargeRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SingleRechargeRewardRequest), isFromPool) as C2M_SingleRechargeRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SingleRechargeRewardResponse)]
    public partial class M2C_SingleRechargeRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_SingleRechargeRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SingleRechargeRewardResponse), isFromPool) as M2C_SingleRechargeRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> RewardIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RewardIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ZhanQuInfoRequest)]
    [ResponseType(nameof(M2C_ZhanQuInfoResponse))]
    public partial class C2M_ZhanQuInfoRequest : MessageObject, ILocationRequest
    {
        public static C2M_ZhanQuInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ZhanQuInfoRequest), isFromPool) as C2M_ZhanQuInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ZhanQuInfoResponse)]
    public partial class M2C_ZhanQuInfoResponse : MessageObject, ILocationResponse
    {
        public static M2C_ZhanQuInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ZhanQuInfoResponse), isFromPool) as M2C_ZhanQuInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> ReceiveIds { get; set; } = new();

        [MemoryPackOrder(2)]
        public List<ZhanQuReceiveNumber> ReceiveNum { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.ReceiveIds.Clear();
            this.ReceiveNum.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 战区活动
    [MemoryPackable]
    [Message(OuterMessage.C2M_ZhanQuReceiveRequest)]
    [ResponseType(nameof(M2C_ZhanQuReceiveResponse))]
    public partial class C2M_ZhanQuReceiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_ZhanQuReceiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ZhanQuReceiveRequest), isFromPool) as C2M_ZhanQuReceiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 活动类型
        /// </summary>
        [MemoryPackOrder(0)]
        public int ActivityType { get; set; }

        /// <summary>
        /// 活动ID
        /// </summary>
        [MemoryPackOrder(1)]
        public int ActivityId { get; set; }

        [MemoryPackOrder(2)]
        public int ReceiveIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ActivityType = default;
            this.ActivityId = default;
            this.ReceiveIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ZhanQuReceiveResponse)]
    public partial class M2C_ZhanQuReceiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_ZhanQuReceiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ZhanQuReceiveResponse), isFromPool) as M2C_ZhanQuReceiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 晶核激活
    [MemoryPackable]
    [Message(OuterMessage.C2M_JingHeActivateRequest)]
    [ResponseType(nameof(M2C_JingHeActivateResponse))]
    public partial class C2M_JingHeActivateRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingHeActivateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingHeActivateRequest), isFromPool) as C2M_JingHeActivateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 激活的晶核ID
        /// </summary>
        [MemoryPackOrder(0)]
        public long BagInfoId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BagInfoId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingHeActivateResponse)]
    public partial class M2C_JingHeActivateResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingHeActivateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingHeActivateResponse), isFromPool) as M2C_JingHeActivateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 晶核使用方案
    [MemoryPackable]
    [Message(OuterMessage.C2M_JingHePlanRequest)]
    [ResponseType(nameof(M2C_JingHePlanResponse))]
    public partial class C2M_JingHePlanRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingHePlanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingHePlanRequest), isFromPool) as C2M_JingHePlanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(0)]
        public int JingHePlan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.JingHePlan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingHePlanResponse)]
    public partial class M2C_JingHePlanResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingHePlanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingHePlanResponse), isFromPool) as M2C_JingHePlanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_UpdateUserInfoMessage)]
    public partial class M2C_UpdateUserInfoMessage : MessageObject, IMessage
    {
        public static M2C_UpdateUserInfoMessage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_UpdateUserInfoMessage), isFromPool) as M2C_UpdateUserInfoMessage;
        }

        [MemoryPackOrder(0)]
        public UserInfoProto UserInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UserInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JingHeWearRequest)]
    [ResponseType(nameof(M2C_JingHeWearResponse))]
    public partial class C2M_JingHeWearRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingHeWearRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingHeWearRequest), isFromPool) as C2M_JingHeWearRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 操作类型 1 穿戴 2卸下
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public long OperateBagID { get; set; }

        /// <summary>
        /// 类型参数
        /// </summary>
        [MemoryPackOrder(2)]
        public string OperatePar { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.OperateBagID = default;
            this.OperatePar = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingHeWearResponse)]
    public partial class M2C_JingHeWearResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingHeWearResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingHeWearResponse), isFromPool) as M2C_JingHeWearResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 晶核注入
    [MemoryPackable]
    [Message(OuterMessage.C2M_JingHeZhuruRequest)]
    [ResponseType(nameof(M2C_JingHeZhuruResponse))]
    public partial class C2M_JingHeZhuruRequest : MessageObject, ILocationRequest
    {
        public static C2M_JingHeZhuruRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JingHeZhuruRequest), isFromPool) as C2M_JingHeZhuruRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 操作的晶核
        /// </summary>
        [MemoryPackOrder(0)]
        public long BagInfoId { get; set; }

        /// <summary>
        /// 消耗的晶核列表
        /// </summary>
        [MemoryPackOrder(1)]
        public List<long> OperateBagID { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BagInfoId = default;
            this.OperateBagID.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JingHeZhuruResponse)]
    public partial class M2C_JingHeZhuruResponse : MessageObject, ILocationResponse
    {
        public static M2C_JingHeZhuruResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JingHeZhuruResponse), isFromPool) as M2C_JingHeZhuruResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_MakeLearnRequest)]
    [ResponseType(nameof(M2C_MakeLearnResponse))]
    public partial class C2M_MakeLearnRequest : MessageObject, ILocationRequest
    {
        public static C2M_MakeLearnRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_MakeLearnRequest), isFromPool) as C2M_MakeLearnRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int MakeId { get; set; }

        [MemoryPackOrder(1)]
        public int Plan { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MakeId = default;
            this.Plan = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_MakeLearnResponse)]
    public partial class M2C_MakeLearnResponse : MessageObject, ILocationResponse
    {
        public static M2C_MakeLearnResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_MakeLearnResponse), isFromPool) as M2C_MakeLearnResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2E_AccountWarehousInfoRequest)]
    [ResponseType(nameof(E2C_AccountWarehousInfoResponse))]
    public partial class C2E_AccountWarehousInfoRequest : MessageObject, IMailActorRequest
    {
        public static C2E_AccountWarehousInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2E_AccountWarehousInfoRequest), isFromPool) as C2E_AccountWarehousInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long AccInfoID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.AccInfoID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.E2C_AccountWarehousInfoResponse)]
    public partial class E2C_AccountWarehousInfoResponse : MessageObject, IMailActorResponse
    {
        public static E2C_AccountWarehousInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(E2C_AccountWarehousInfoResponse), isFromPool) as E2C_AccountWarehousInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<ItemInfoProto> BagInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.BagInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 战场召唤记录
    [MemoryPackable]
    [Message(OuterMessage.C2M_BattleSummonRecord)]
    [ResponseType(nameof(M2C_BattleSummonRecord))]
    public partial class C2M_BattleSummonRecord : MessageObject, ILocationRequest
    {
        public static C2M_BattleSummonRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BattleSummonRecord), isFromPool) as C2M_BattleSummonRecord;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BattleSummonRecord)]
    public partial class M2C_BattleSummonRecord : MessageObject, ILocationResponse
    {
        public static M2C_BattleSummonRecord Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BattleSummonRecord), isFromPool) as M2C_BattleSummonRecord;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// 召唤记录. 召唤人口数量自己计算
        /// </summary>
        [MemoryPackOrder(1)]
        public List<BattleSummonInfo> BattleSummonList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.BattleSummonList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 战场召唤士兵
    [MemoryPackable]
    [Message(OuterMessage.C2M_BattleSummonRequest)]
    [ResponseType(nameof(M2C_BattleSummonResponse))]
    public partial class C2M_BattleSummonRequest : MessageObject, ILocationRequest
    {
        public static C2M_BattleSummonRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_BattleSummonRequest), isFromPool) as C2M_BattleSummonRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SummonId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SummonId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_BattleSummonResponse)]
    public partial class M2C_BattleSummonResponse : MessageObject, ILocationResponse
    {
        public static M2C_BattleSummonResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_BattleSummonResponse), isFromPool) as M2C_BattleSummonResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        /// <summary>
        /// 召唤记录. 召唤人口数量自己计算
        /// </summary>
        [MemoryPackOrder(1)]
        public List<BattleSummonInfo> BattleSummonList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.BattleSummonList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_CampRankSelectRequest)]
    [ResponseType(nameof(M2C_CampRankSelectResponse))]
    public partial class C2M_CampRankSelectRequest : MessageObject, ILocationRequest
    {
        public static C2M_CampRankSelectRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_CampRankSelectRequest), isFromPool) as C2M_CampRankSelectRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 1正派 2邪派
        /// </summary>
        [MemoryPackOrder(0)]
        public int CampId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CampId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_CampRankSelectResponse)]
    public partial class M2C_CampRankSelectResponse : MessageObject, ILocationResponse
    {
        public static M2C_CampRankSelectResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_CampRankSelectResponse), isFromPool) as M2C_CampRankSelectResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_FubenEnergySkillRequest)]
    [ResponseType(nameof(Actor_FubenEnergySkillResponse))]
    public partial class Actor_FubenEnergySkillRequest : MessageObject, ILocationRequest
    {
        public static Actor_FubenEnergySkillRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_FubenEnergySkillRequest), isFromPool) as Actor_FubenEnergySkillRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SkillId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SkillId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_FubenEnergySkillResponse)]
    public partial class Actor_FubenEnergySkillResponse : MessageObject, ILocationResponse
    {
        public static Actor_FubenEnergySkillResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_FubenEnergySkillResponse), isFromPool) as Actor_FubenEnergySkillResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.FubenInfo)]
    public partial class FubenInfo : MessageObject
    {
        public static FubenInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(FubenInfo), isFromPool) as FubenInfo;
        }

        /// <summary>
        /// 需要自己转换成对应的行列
        /// </summary>
        [MemoryPackOrder(1)]
        public int StartCell { get; set; }

        [MemoryPackOrder(2)]
        public int EndCell { get; set; }

        [MemoryPackOrder(3)]
        public List<KeyValuePair> FubenCellNpcs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.StartCell = default;
            this.EndCell = default;
            this.FubenCellNpcs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.SonFubenInfo)]
    public partial class SonFubenInfo : MessageObject
    {
        public static SonFubenInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(SonFubenInfo), isFromPool) as SonFubenInfo;
        }

        /// <summary>
        /// 子场景格子的ID
        /// </summary>
        [MemoryPackOrder(0)]
        public int SonSceneId { get; set; }

        [MemoryPackOrder(1)]
        public int CurrentCell { get; set; }

        /// <summary>
        /// 判断上下左右四个方位是否可以通行
        /// </summary>
        [MemoryPackOrder(2)]
        public List<int> PassableFlag { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.SonSceneId = default;
            this.CurrentCell = default;
            this.PassableFlag.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_EnterFubenRequest)]
    [ResponseType(nameof(Actor_EnterFubenResponse))]
    public partial class Actor_EnterFubenRequest : MessageObject, ILocationRequest
    {
        public static Actor_EnterFubenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_EnterFubenRequest), isFromPool) as Actor_EnterFubenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ChapterId { get; set; }

        /// <summary>
        /// 1 difficulty普通 2 挑战  3困难
        /// </summary>
        [MemoryPackOrder(1)]
        public int Difficulty { get; set; }

        /// <summary>
        /// 重复进入 0 首次进入  1 重复进入
        /// </summary>
        [MemoryPackOrder(2)]
        public int RepeatEnter { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChapterId = default;
            this.Difficulty = default;
            this.RepeatEnter = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_EnterFubenResponse)]
    public partial class Actor_EnterFubenResponse : MessageObject, ILocationResponse
    {
        public static Actor_EnterFubenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_EnterFubenResponse), isFromPool) as Actor_EnterFubenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public FubenInfo FubenInfo { get; set; }

        [MemoryPackOrder(1)]
        public SonFubenInfo SonFubenInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FubenInfo = default;
            this.SonFubenInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_EnterSonFubenRequest)]
    [ResponseType(nameof(Actor_EnterSonFubenResponse))]
    public partial class Actor_EnterSonFubenRequest : MessageObject, ILocationRequest
    {
        public static Actor_EnterSonFubenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_EnterSonFubenRequest), isFromPool) as Actor_EnterSonFubenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public int CurrentCell { get; set; }

        [MemoryPackOrder(2)]
        public int DirectionType { get; set; }

        [MemoryPackOrder(3)]
        public int ChuansongId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.CurrentCell = default;
            this.DirectionType = default;
            this.ChuansongId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_EnterSonFubenResponse)]
    public partial class Actor_EnterSonFubenResponse : MessageObject, ILocationResponse
    {
        public static Actor_EnterSonFubenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_EnterSonFubenResponse), isFromPool) as Actor_EnterSonFubenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public SonFubenInfo SonFubenInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.SonFubenInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_GetFubenInfoRequest)]
    [ResponseType(nameof(Actor_GetFubenInfoResponse))]
    public partial class Actor_GetFubenInfoRequest : MessageObject, ILocationRequest
    {
        public static Actor_GetFubenInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_GetFubenInfoRequest), isFromPool) as Actor_GetFubenInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_GetFubenInfoResponse)]
    public partial class Actor_GetFubenInfoResponse : MessageObject, ILocationResponse
    {
        public static Actor_GetFubenInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_GetFubenInfoResponse), isFromPool) as Actor_GetFubenInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<FubenPassInfo> FubenPassInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.FubenPassInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_GetFubenRewardRequest)]
    [ResponseType(nameof(Actor_GetFubenRewardReponse))]
    public partial class Actor_GetFubenRewardRequest : MessageObject, ILocationRequest
    {
        public static Actor_GetFubenRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_GetFubenRewardRequest), isFromPool) as Actor_GetFubenRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public RewardItem RewardItem { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.RewardItem = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_GetFubenRewardReponse)]
    public partial class Actor_GetFubenRewardReponse : MessageObject, ILocationResponse
    {
        public static Actor_GetFubenRewardReponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_GetFubenRewardReponse), isFromPool) as Actor_GetFubenRewardReponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_FubenMoNengRequest)]
    [ResponseType(nameof(Actor_FubenMoNengResponse))]
    public partial class Actor_FubenMoNengRequest : MessageObject, ILocationRequest
    {
        public static Actor_FubenMoNengRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_FubenMoNengRequest), isFromPool) as Actor_FubenMoNengRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_FubenMoNengResponse)]
    public partial class Actor_FubenMoNengResponse : MessageObject, ILocationResponse
    {
        public static Actor_FubenMoNengResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_FubenMoNengResponse), isFromPool) as Actor_FubenMoNengResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_SendReviveRequest)]
    [ResponseType(nameof(Actor_SendReviveResponse))]
    public partial class Actor_SendReviveRequest : MessageObject, ILocationRequest
    {
        public static Actor_SendReviveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_SendReviveRequest), isFromPool) as Actor_SendReviveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int MapIndex { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(1)]
        public bool Revive { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MapIndex = default;
            this.Revive = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Actor_SendReviveResponse)]
    public partial class Actor_SendReviveResponse : MessageObject, ILocationResponse
    {
        public static Actor_SendReviveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Actor_SendReviveResponse), isFromPool) as Actor_SendReviveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ChouKaRequest)]
    [ResponseType(nameof(M2C_ChouKaResponse))]
    public partial class C2M_ChouKaRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChouKaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChouKaRequest), isFromPool) as C2M_ChouKaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1 单抽  10 十连抽
        /// </summary>
        [MemoryPackOrder(0)]
        public int ChouKaType { get; set; }

        [MemoryPackOrder(1)]
        public int ChapterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChouKaType = default;
            this.ChapterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChouKaResponse)]
    public partial class M2C_ChouKaResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChouKaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChouKaResponse), isFromPool) as M2C_ChouKaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 奖励列表
        /// </summary>
        [MemoryPackOrder(0)]
        public List<RewardItem> RewardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RewardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ChouKaRewardRequest)]
    [ResponseType(nameof(M2C_ChouKaRewardResponse))]
    public partial class C2M_ChouKaRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_ChouKaRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ChouKaRewardRequest), isFromPool) as C2M_ChouKaRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ChouKaRewardResponse)]
    public partial class M2C_ChouKaRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_ChouKaRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ChouKaRewardResponse), isFromPool) as M2C_ChouKaRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 答题
    [MemoryPackable]
    [Message(OuterMessage.C2M_EnergyAnswerRequest)]
    [ResponseType(nameof(M2C_EnergyAnswerResponse))]
    public partial class C2M_EnergyAnswerRequest : MessageObject, ILocationRequest
    {
        public static C2M_EnergyAnswerRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_EnergyAnswerRequest), isFromPool) as C2M_EnergyAnswerRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(0)]
        public int AnswerIndex { get; set; }

        [MemoryPackOrder(1)]
        public int QuestionId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.AnswerIndex = default;
            this.QuestionId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_EnergyAnswerResponse)]
    public partial class M2C_EnergyAnswerResponse : MessageObject, ILocationResponse
    {
        public static M2C_EnergyAnswerResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_EnergyAnswerResponse), isFromPool) as M2C_EnergyAnswerResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_EnergyInfoRequest)]
    [ResponseType(nameof(M2C_EnergyInfoResponse))]
    public partial class C2M_EnergyInfoRequest : MessageObject, ILocationRequest
    {
        public static C2M_EnergyInfoRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_EnergyInfoRequest), isFromPool) as C2M_EnergyInfoRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_EnergyInfoResponse)]
    public partial class M2C_EnergyInfoResponse : MessageObject, ILocationResponse
    {
        public static M2C_EnergyInfoResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_EnergyInfoResponse), isFromPool) as M2C_EnergyInfoResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 是否领取过奖励
        /// </summary>
        [MemoryPackOrder(0)]
        public List<int> GetRewards { get; set; } = new();

        /// <summary>
        /// 答题列表
        /// </summary>
        [MemoryPackOrder(1)]
        public List<int> QuestionList { get; set; } = new();

        [MemoryPackOrder(2)]
        public int QuestionIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.GetRewards.Clear();
            this.QuestionList.Clear();
            this.QuestionIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_EnergyReceiveRequest)]
    [ResponseType(nameof(M2C_EnergyReceiveResponse))]
    public partial class C2M_EnergyReceiveRequest : MessageObject, ILocationRequest
    {
        public static C2M_EnergyReceiveRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_EnergyReceiveRequest), isFromPool) as C2M_EnergyReceiveRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 0 早起  1早睡 2 答题
        /// </summary>
        [MemoryPackOrder(0)]
        public int RewardType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_EnergyReceiveResponse)]
    public partial class M2C_EnergyReceiveResponse : MessageObject, ILocationResponse
    {
        public static M2C_EnergyReceiveResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_EnergyReceiveResponse), isFromPool) as M2C_EnergyReceiveResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 上下马
    [MemoryPackable]
    [Message(OuterMessage.C2M_HorseRideRequest)]
    [ResponseType(nameof(M2C_HorseRideResponse))]
    public partial class C2M_HorseRideRequest : MessageObject, ILocationRequest
    {
        public static C2M_HorseRideRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_HorseRideRequest), isFromPool) as C2M_HorseRideRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HorseId { get; set; }

        /// <summary>
        /// 1上马  0下马
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HorseId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HorseRideResponse)]
    public partial class M2C_HorseRideResponse : MessageObject, ILocationResponse
    {
        public static M2C_HorseRideResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HorseRideResponse), isFromPool) as M2C_HorseRideResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 坐骑出战
    [MemoryPackable]
    [Message(OuterMessage.C2M_HorseFightRequest)]
    [ResponseType(nameof(M2C_HorseFightResponse))]
    public partial class C2M_HorseFightRequest : MessageObject, ILocationRequest
    {
        public static C2M_HorseFightRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_HorseFightRequest), isFromPool) as C2M_HorseFightRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HorseId { get; set; }

        /// <summary>
        /// 1上马  0下马
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HorseId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_HorseFightResponse)]
    public partial class M2C_HorseFightResponse : MessageObject, ILocationResponse
    {
        public static M2C_HorseFightResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_HorseFightResponse), isFromPool) as M2C_HorseFightResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 开启宝箱
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPickRequest)]
    [ResponseType(nameof(M2C_JiaYuanPickResponse))]
    public partial class C2M_JiaYuanPickRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPickRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPickRequest), isFromPool) as C2M_JiaYuanPickRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long MasterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.MasterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPickResponse)]
    public partial class M2C_JiaYuanPickResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPickResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPickResponse), isFromPool) as M2C_JiaYuanPickResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanCangKuOpenRequest)]
    [ResponseType(nameof(M2C_JiaYuanCangKuOpenResponse))]
    public partial class C2M_JiaYuanCangKuOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanCangKuOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanCangKuOpenRequest), isFromPool) as C2M_JiaYuanCangKuOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanCangKuOpenResponse)]
    public partial class M2C_JiaYuanCangKuOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanCangKuOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanCangKuOpenResponse), isFromPool) as M2C_JiaYuanCangKuOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 学习菜单
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanCookBookOpen)]
    [ResponseType(nameof(M2C_JiaYuanCookBookOpen))]
    public partial class C2M_JiaYuanCookBookOpen : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanCookBookOpen Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanCookBookOpen), isFromPool) as C2M_JiaYuanCookBookOpen;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int LearnMakeId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.LearnMakeId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanCookBookOpen)]
    public partial class M2C_JiaYuanCookBookOpen : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanCookBookOpen Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanCookBookOpen), isFromPool) as M2C_JiaYuanCookBookOpen;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public List<int> LearnMakeIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.LearnMakeIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 制作菜肴
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanCookRequest)]
    [ResponseType(nameof(M2C_JiaYuanCookResponse))]
    public partial class C2M_JiaYuanCookRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanCookRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanCookRequest), isFromPool) as C2M_JiaYuanCookRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public List<long> BagInfoIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.BagInfoIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanCookResponse)]
    public partial class M2C_JiaYuanCookResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanCookResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanCookResponse), isFromPool) as M2C_JiaYuanCookResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int ItemId { get; set; }

        [MemoryPackOrder(1)]
        public List<int> LearnMakeIds { get; set; } = new();

        [MemoryPackOrder(2)]
        public int LearnId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.ItemId = default;
            this.LearnMakeIds.Clear();
            this.LearnId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园大师
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanDaShiRequest)]
    [ResponseType(nameof(M2C_JiaYuanDaShiResponse))]
    public partial class C2M_JiaYuanDaShiRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanDaShiRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanDaShiRequest), isFromPool) as C2M_JiaYuanDaShiRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public List<long> BagInfoIDs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.BagInfoIDs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanDaShiResponse)]
    public partial class M2C_JiaYuanDaShiResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanDaShiResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanDaShiResponse), isFromPool) as M2C_JiaYuanDaShiResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public long JiaYuanDaShiTime { get; set; }

        [MemoryPackOrder(1)]
        public List<KeyValuePairInt> JiaYuanProAdd { get; set; } = new();

        [MemoryPackOrder(6)]
        public List<KeyValuePair> JiaYuanProList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.JiaYuanDaShiTime = default;
            this.JiaYuanProAdd.Clear();
            this.JiaYuanProList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园兑换
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanExchangeRequest)]
    [ResponseType(nameof(M2C_JiaYuanExchangeResponse))]
    public partial class C2M_JiaYuanExchangeRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanExchangeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanExchangeRequest), isFromPool) as C2M_JiaYuanExchangeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ExchangeType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ExchangeType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanExchangeResponse)]
    public partial class M2C_JiaYuanExchangeResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanExchangeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanExchangeResponse), isFromPool) as M2C_JiaYuanExchangeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanGatherRequest)]
    [ResponseType(nameof(M2C_JiaYuanGatherResponse))]
    public partial class C2M_JiaYuanGatherRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanGatherRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanGatherRequest), isFromPool) as C2M_JiaYuanGatherRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        /// <summary>
        /// 1植物 2动物
        /// </summary>
        [MemoryPackOrder(3)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CellIndex = default;
            this.UnitId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanGatherResponse)]
    public partial class M2C_JiaYuanGatherResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanGatherResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanGatherResponse), isFromPool) as M2C_JiaYuanGatherResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanGatherOtherRequest)]
    [ResponseType(nameof(M2C_JiaYuanGatherOtherResponse))]
    public partial class C2M_JiaYuanGatherOtherRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanGatherOtherRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanGatherOtherRequest), isFromPool) as C2M_JiaYuanGatherOtherRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        [MemoryPackOrder(3)]
        public long MasterId { get; set; }

        /// <summary>
        /// 1植物 2动物
        /// </summary>
        [MemoryPackOrder(4)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CellIndex = default;
            this.UnitId = default;
            this.MasterId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanGatherOtherResponse)]
    public partial class M2C_JiaYuanGatherOtherResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanGatherOtherResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanGatherOtherResponse), isFromPool) as M2C_JiaYuanGatherOtherResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanInitRequest)]
    [ResponseType(nameof(M2C_JiaYuanInitResponse))]
    public partial class C2M_JiaYuanInitRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanInitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanInitRequest), isFromPool) as C2M_JiaYuanInitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long MasterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.MasterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanInitResponse)]
    public partial class M2C_JiaYuanInitResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanInitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanInitResponse), isFromPool) as M2C_JiaYuanInitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(2)]
        public int JiaYuanLv { get; set; }

        [MemoryPackOrder(3)]
        public string MasterName { get; set; }

        [MemoryPackOrder(4)]
        public long JiaYuanDaShiTime { get; set; }

        [MemoryPackOrder(5)]
        public List<int> LearnMakeIds { get; set; } = new();

        [MemoryPackOrder(9)]
        public List<int> PlanOpenList { get; set; } = new();

        [MemoryPackOrder(10)]
        public List<JiaYuanPet> JiaYuanPetList { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<KeyValuePair> JiaYuanProList { get; set; } = new();

        [MemoryPackOrder(12)]
        public List<JiaYuanRecord> JiaYuanRecordList { get; set; } = new();

        [MemoryPackOrder(13)]
        public List<JiaYuanPastures> JiaYuanPastureList { get; set; } = new();

        [MemoryPackOrder(14)]
        public List<JiaYuanPurchaseItem> PurchaseItemList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.JiaYuanLv = default;
            this.MasterName = default;
            this.JiaYuanDaShiTime = default;
            this.LearnMakeIds.Clear();
            this.PlanOpenList.Clear();
            this.JiaYuanPetList.Clear();
            this.JiaYuanProList.Clear();
            this.JiaYuanRecordList.Clear();
            this.JiaYuanPastureList.Clear();
            this.PurchaseItemList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanMysteryBuyRequest)]
    [ResponseType(nameof(M2C_JiaYuanMysteryBuyResponse))]
    public partial class C2M_JiaYuanMysteryBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanMysteryBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanMysteryBuyRequest), isFromPool) as C2M_JiaYuanMysteryBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ProductId { get; set; }

        [MemoryPackOrder(1)]
        public int MysteryId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ProductId = default;
            this.MysteryId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanMysteryBuyResponse)]
    public partial class M2C_JiaYuanMysteryBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanMysteryBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanMysteryBuyResponse), isFromPool) as M2C_JiaYuanMysteryBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanMysteryListRequest)]
    [ResponseType(nameof(M2C_JiaYuanMysteryListResponse))]
    public partial class C2M_JiaYuanMysteryListRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanMysteryListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanMysteryListRequest), isFromPool) as C2M_JiaYuanMysteryListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int NpcID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.NpcID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanMysteryListResponse)]
    public partial class M2C_JiaYuanMysteryListResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanMysteryListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanMysteryListResponse), isFromPool) as M2C_JiaYuanMysteryListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPastureBuyRequest)]
    [ResponseType(nameof(M2C_JiaYuanPastureBuyResponse))]
    public partial class C2M_JiaYuanPastureBuyRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPastureBuyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPastureBuyRequest), isFromPool) as C2M_JiaYuanPastureBuyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ProductId { get; set; }

        [MemoryPackOrder(1)]
        public int MysteryId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ProductId = default;
            this.MysteryId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPastureBuyResponse)]
    public partial class M2C_JiaYuanPastureBuyResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPastureBuyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPastureBuyResponse), isFromPool) as M2C_JiaYuanPastureBuyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        [MemoryPackOrder(3)]
        public List<JiaYuanPastures> JiaYuanPastureList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.MysteryItemInfos.Clear();
            this.JiaYuanPastureList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPastureListRequest)]
    [ResponseType(nameof(M2C_JiaYuanPastureListResponse))]
    public partial class C2M_JiaYuanPastureListRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPastureListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPastureListRequest), isFromPool) as C2M_JiaYuanPastureListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPastureListResponse)]
    public partial class M2C_JiaYuanPastureListResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPastureListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPastureListResponse), isFromPool) as M2C_JiaYuanPastureListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<MysteryItemInfo> MysteryItemInfos { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.MysteryItemInfos.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物喂食
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPetFeedRequest)]
    [ResponseType(nameof(M2C_JiaYuanPetFeedResponse))]
    public partial class C2M_JiaYuanPetFeedRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPetFeedRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPetFeedRequest), isFromPool) as C2M_JiaYuanPetFeedRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long PetId { get; set; }

        [MemoryPackOrder(2)]
        public List<long> BagInfoIDs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.PetId = default;
            this.BagInfoIDs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPetFeedResponse)]
    public partial class M2C_JiaYuanPetFeedResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPetFeedResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPetFeedResponse), isFromPool) as M2C_JiaYuanPetFeedResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int MoodAdd { get; set; }

        [MemoryPackOrder(1)]
        public List<JiaYuanPet> JiaYuanPetList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MoodAdd = default;
            this.JiaYuanPetList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPetOperateRequest)]
    [ResponseType(nameof(M2C_JiaYuanPetOperateResponse))]
    public partial class C2M_JiaYuanPetOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPetOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPetOperateRequest), isFromPool) as C2M_JiaYuanPetOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long PetInfoId { get; set; }

        /// <summary>
        /// 0 停止AI  1启动AI
        /// </summary>
        [MemoryPackOrder(1)]
        public int Operate { get; set; }

        [MemoryPackOrder(3)]
        public long MasterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetInfoId = default;
            this.Operate = default;
            this.MasterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPetOperateResponse)]
    public partial class M2C_JiaYuanPetOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPetOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPetOperateResponse), isFromPool) as M2C_JiaYuanPetOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(4)]
        public List<UnitInfo> PetList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PetList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPetPositionRequest)]
    [ResponseType(nameof(M2C_JiaYuanPetPositionResponse))]
    public partial class C2M_JiaYuanPetPositionRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPetPositionRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPetPositionRequest), isFromPool) as C2M_JiaYuanPetPositionRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        [MemoryPackOrder(3)]
        public long MasterId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.UnitId = default;
            this.MasterId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPetPositionResponse)]
    public partial class M2C_JiaYuanPetPositionResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPetPositionResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPetPositionResponse), isFromPool) as M2C_JiaYuanPetPositionResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(4)]
        public List<UnitInfo> PetList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PetList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物散步
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPetWalkRequest)]
    [ResponseType(nameof(M2C_JiaYuanPetWalkResponse))]
    public partial class C2M_JiaYuanPetWalkRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPetWalkRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPetWalkRequest), isFromPool) as C2M_JiaYuanPetWalkRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long PetId { get; set; }

        /// <summary>
        /// 0停止散步 1出战 2开始散步
        /// </summary>
        [MemoryPackOrder(2)]
        public int PetStatus { get; set; }

        [MemoryPackOrder(3)]
        public int Position { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.PetId = default;
            this.PetStatus = default;
            this.Position = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPetWalkResponse)]
    public partial class M2C_JiaYuanPetWalkResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPetWalkResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPetWalkResponse), isFromPool) as M2C_JiaYuanPetWalkResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(10)]
        public List<JiaYuanPet> JiaYuanPetList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.JiaYuanPetList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPlanOpenRequest)]
    [ResponseType(nameof(M2C_JiaYuanPlanOpenResponse))]
    public partial class C2M_JiaYuanPlanOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPlanOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPlanOpenRequest), isFromPool) as C2M_JiaYuanPlanOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int CellIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CellIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPlanOpenResponse)]
    public partial class M2C_JiaYuanPlanOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPlanOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPlanOpenResponse), isFromPool) as M2C_JiaYuanPlanOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<int> PlanOpenList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PlanOpenList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPlantRequest)]
    [ResponseType(nameof(M2C_JiaYuanPlantResponse))]
    public partial class C2M_JiaYuanPlantRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPlantRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPlantRequest), isFromPool) as C2M_JiaYuanPlantRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(2)]
        public long OperateBagID { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CellIndex = default;
            this.ItemId = default;
            this.OperateBagID = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPlantResponse)]
    public partial class M2C_JiaYuanPlantResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPlantResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPlantResponse), isFromPool) as M2C_JiaYuanPlantResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园收购
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPurchaseRequest)]
    [ResponseType(nameof(M2C_JiaYuanPurchaseResponse))]
    public partial class C2M_JiaYuanPurchaseRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPurchaseRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPurchaseRequest), isFromPool) as C2M_JiaYuanPurchaseRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(4)]
        public int PurchaseId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.ItemId = default;
            this.PurchaseId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPurchaseResponse)]
    public partial class M2C_JiaYuanPurchaseResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPurchaseResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPurchaseResponse), isFromPool) as M2C_JiaYuanPurchaseResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public List<JiaYuanPurchaseItem> PurchaseItemList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PurchaseItemList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园收购刷新
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanPurchaseRefresh)]
    [ResponseType(nameof(M2C_JiaYuanPurchaseRefresh))]
    public partial class C2M_JiaYuanPurchaseRefresh : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanPurchaseRefresh Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanPurchaseRefresh), isFromPool) as C2M_JiaYuanPurchaseRefresh;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        [MemoryPackOrder(1)]
        public int ItemId { get; set; }

        [MemoryPackOrder(4)]
        public int PurchaseId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.OperateType = default;
            this.ItemId = default;
            this.PurchaseId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanPurchaseRefresh)]
    public partial class M2C_JiaYuanPurchaseRefresh : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanPurchaseRefresh Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanPurchaseRefresh), isFromPool) as M2C_JiaYuanPurchaseRefresh;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public List<JiaYuanPurchaseItem> PurchaseItemList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PurchaseItemList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanRecordListRequest)]
    [ResponseType(nameof(M2C_JiaYuanRecordListResponse))]
    public partial class C2M_JiaYuanRecordListRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanRecordListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanRecordListRequest), isFromPool) as C2M_JiaYuanRecordListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanRecordListResponse)]
    public partial class M2C_JiaYuanRecordListResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanRecordListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanRecordListResponse), isFromPool) as M2C_JiaYuanRecordListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(4)]
        public List<JiaYuanRecord> JiaYuanRecordList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.JiaYuanRecordList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 一键放入
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanStoreRequest)]
    [ResponseType(nameof(M2C_JiaYuanStoreResponse))]
    public partial class C2M_JiaYuanStoreRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanStoreRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanStoreRequest), isFromPool) as C2M_JiaYuanStoreRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HorseId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HorseId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanStoreResponse)]
    public partial class M2C_JiaYuanStoreResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanStoreResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanStoreResponse), isFromPool) as M2C_JiaYuanStoreResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 家园升级
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanUpLvRequest)]
    [ResponseType(nameof(M2C_JiaYuanUpLvResponse))]
    public partial class C2M_JiaYuanUpLvRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanUpLvRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanUpLvRequest), isFromPool) as C2M_JiaYuanUpLvRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanUpLvResponse)]
    public partial class M2C_JiaYuanUpLvResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanUpLvResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanUpLvResponse), isFromPool) as M2C_JiaYuanUpLvResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanUprootRequest)]
    [ResponseType(nameof(M2C_JiaYuanUprootResponse))]
    public partial class C2M_JiaYuanUprootRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanUprootRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanUprootRequest), isFromPool) as C2M_JiaYuanUprootRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(1)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(2)]
        public long UnitId { get; set; }

        /// <summary>
        /// 1植物 2动物
        /// </summary>
        [MemoryPackOrder(3)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CellIndex = default;
            this.UnitId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanUprootResponse)]
    public partial class M2C_JiaYuanUprootResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanUprootResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanUprootResponse), isFromPool) as M2C_JiaYuanUprootResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(1)]
        public int CellIndex { get; set; }

        [MemoryPackOrder(3)]
        public List<JiaYuanPastures> JiaYuanPastureList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.CellIndex = default;
            this.JiaYuanPastureList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 好友家园
    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanVisitListRequest)]
    [ResponseType(nameof(M2C_JiaYuanVisitListResponse))]
    public partial class C2M_JiaYuanVisitListRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanVisitListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanVisitListRequest), isFromPool) as C2M_JiaYuanVisitListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public long MasterId { get; set; }

        /// <summary>
        /// 0默认 1换一批
        /// </summary>
        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.UnitId = default;
            this.MasterId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.JiaYuanVisit)]
    public partial class JiaYuanVisit : MessageObject
    {
        public static JiaYuanVisit Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(JiaYuanVisit), isFromPool) as JiaYuanVisit;
        }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(1)]
        public int Occ { get; set; }

        [MemoryPackOrder(2)]
        public int OccTwo { get; set; }

        [MemoryPackOrder(3)]
        public int Rubbish { get; set; }

        [MemoryPackOrder(4)]
        public int Gather { get; set; }

        [MemoryPackOrder(5)]
        public string PlayerName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitId = default;
            this.Occ = default;
            this.OccTwo = default;
            this.Rubbish = default;
            this.Gather = default;
            this.PlayerName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanVisitListResponse)]
    public partial class M2C_JiaYuanVisitListResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanVisitListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanVisitListResponse), isFromPool) as M2C_JiaYuanVisitListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<JiaYuanVisit> JiaYuanVisit_1 { get; set; } = new();

        [MemoryPackOrder(1)]
        public List<JiaYuanVisit> JiaYuanVisit_2 { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.JiaYuanVisit_1.Clear();
            this.JiaYuanVisit_2.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_JiaYuanWatchRequest)]
    [ResponseType(nameof(M2C_JiaYuanWatchResponse))]
    public partial class C2M_JiaYuanWatchRequest : MessageObject, ILocationRequest
    {
        public static C2M_JiaYuanWatchRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_JiaYuanWatchRequest), isFromPool) as C2M_JiaYuanWatchRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long MasterId { get; set; }

        [MemoryPackOrder(2)]
        public int OperateType { get; set; }

        [MemoryPackOrder(3)]
        public long OperateId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.MasterId = default;
            this.OperateType = default;
            this.OperateId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_JiaYuanWatchResponse)]
    public partial class M2C_JiaYuanWatchResponse : MessageObject, ILocationResponse
    {
        public static M2C_JiaYuanWatchResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_JiaYuanWatchResponse), isFromPool) as M2C_JiaYuanWatchResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<JiaYuanRecord> JiaYuanRecord { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.JiaYuanRecord.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 一键取出
    [MemoryPackable]
    [Message(OuterMessage.C2M_TakeOutAllRequest)]
    [ResponseType(nameof(M2C_TakeOutAllResponse))]
    public partial class C2M_TakeOutAllRequest : MessageObject, ILocationRequest
    {
        public static C2M_TakeOutAllRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TakeOutAllRequest), isFromPool) as C2M_TakeOutAllRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int HorseId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.HorseId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TakeOutAllResponse)]
    public partial class M2C_TakeOutAllResponse : MessageObject, ILocationResponse
    {
        public static M2C_TakeOutAllResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TakeOutAllResponse), isFromPool) as M2C_TakeOutAllResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_LingDiRewardRequest)]
    [ResponseType(nameof(M2C_LingDiRewardResponse))]
    public partial class C2M_LingDiRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_LingDiRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_LingDiRewardRequest), isFromPool) as C2M_LingDiRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_LingDiRewardResponse)]
    public partial class M2C_LingDiRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_LingDiRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_LingDiRewardResponse), isFromPool) as M2C_LingDiRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_LingDiUpRequest)]
    [ResponseType(nameof(M2C_LingDiUpResponse))]
    public partial class C2M_LingDiUpRequest : MessageObject, ILocationRequest
    {
        public static C2M_LingDiUpRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_LingDiUpRequest), isFromPool) as C2M_LingDiUpRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_LingDiUpResponse)]
    public partial class M2C_LingDiUpResponse : MessageObject, ILocationResponse
    {
        public static M2C_LingDiUpResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_LingDiUpResponse), isFromPool) as M2C_LingDiUpResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 随机副本开始战斗
    [MemoryPackable]
    [Message(OuterMessage.C2M_RandomTowerBeginRequest)]
    [ResponseType(nameof(M2C_RandomTowerBeginResponse))]
    public partial class C2M_RandomTowerBeginRequest : MessageObject, ILocationRequest
    {
        public static C2M_RandomTowerBeginRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RandomTowerBeginRequest), isFromPool) as C2M_RandomTowerBeginRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RandomNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RandomNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RandomTowerBeginResponse)]
    public partial class M2C_RandomTowerBeginResponse : MessageObject, ILocationResponse
    {
        public static M2C_RandomTowerBeginResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RandomTowerBeginResponse), isFromPool) as M2C_RandomTowerBeginResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 随机副本领取奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_RandomTowerRewardRequest)]
    [ResponseType(nameof(M2C_RandomTowerRewardResponse))]
    public partial class C2M_RandomTowerRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_RandomTowerRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RandomTowerRewardRequest), isFromPool) as C2M_RandomTowerRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RewardId { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RewardId = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RandomTowerRewardResponse)]
    public partial class M2C_RandomTowerRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_RandomTowerRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RandomTowerRewardResponse), isFromPool) as M2C_RandomTowerRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_IOSPayVerifyRequest)]
    [ResponseType(nameof(M2C_IOSPayVerifyResponse))]
    public partial class C2M_IOSPayVerifyRequest : MessageObject, ILocationRequest
    {
        public static C2M_IOSPayVerifyRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_IOSPayVerifyRequest), isFromPool) as C2M_IOSPayVerifyRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(1)]
        public string payMessage { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.payMessage = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_IOSPayVerifyResponse)]
    public partial class M2C_IOSPayVerifyResponse : MessageObject, ILocationResponse
    {
        public static M2C_IOSPayVerifyResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_IOSPayVerifyResponse), isFromPool) as M2C_IOSPayVerifyResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RechargeRequest)]
    [ResponseType(nameof(M2C_RechargeResponse))]
    public partial class C2M_RechargeRequest : MessageObject, ILocationRequest
    {
        public static C2M_RechargeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RechargeRequest), isFromPool) as C2M_RechargeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int RechargeNumber { get; set; }

        [MemoryPackOrder(1)]
        public long PayType { get; set; }

        [MemoryPackOrder(2)]
        public string RiskControlInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.RechargeNumber = default;
            this.PayType = default;
            this.RiskControlInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RechargeResponse)]
    public partial class M2C_RechargeResponse : MessageObject, ILocationResponse
    {
        public static M2C_RechargeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RechargeResponse), isFromPool) as M2C_RechargeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public string PayMessage { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.PayMessage = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 累计充值奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_RechargeRewardRequest)]
    [ResponseType(nameof(M2C_RechargeRewardResponse))]
    public partial class C2M_RechargeRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_RechargeRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RechargeRewardRequest), isFromPool) as C2M_RechargeRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int RechargeNumber { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.RechargeNumber = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RechargeRewardResponse)]
    public partial class M2C_RechargeRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_RechargeRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RechargeRewardResponse), isFromPool) as M2C_RechargeRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ExpToGoldRequest)]
    [ResponseType(nameof(M2C_ExpToGoldResponse))]
    public partial class C2M_ExpToGoldRequest : MessageObject, ILocationRequest
    {
        public static C2M_ExpToGoldRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ExpToGoldRequest), isFromPool) as C2M_ExpToGoldRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1 兑换金币  2 兑换道具
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ExpToGoldResponse)]
    public partial class M2C_ExpToGoldResponse : MessageObject, ILocationResponse
    {
        public static M2C_ExpToGoldResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ExpToGoldResponse), isFromPool) as M2C_ExpToGoldResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RealNameRewardRequest)]
    [ResponseType(nameof(M2C_RealNameRewardResponse))]
    public partial class C2M_RealNameRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_RealNameRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RealNameRewardRequest), isFromPool) as C2M_RealNameRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RealNameRewardResponse)]
    public partial class M2C_RealNameRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_RealNameRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RealNameRewardResponse), isFromPool) as M2C_RealNameRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_RolePetChouKaRequest)]
    [ResponseType(nameof(M2C_RolePetChouKaResponse))]
    public partial class C2M_RolePetChouKaRequest : MessageObject, ILocationRequest
    {
        public static C2M_RolePetChouKaRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_RolePetChouKaRequest), isFromPool) as C2M_RolePetChouKaRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1 金币抽卡  2 钻石抽卡
        /// </summary>
        [MemoryPackOrder(0)]
        public int ChouKaType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChouKaType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_RolePetChouKaResponse)]
    public partial class M2C_RolePetChouKaResponse : MessageObject, ILocationResponse
    {
        public static M2C_RolePetChouKaResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_RolePetChouKaResponse), isFromPool) as M2C_RolePetChouKaResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public RolePetInfo RolePetInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.RolePetInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 赛季等级奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_SeasonLevelRewardRequest)]
    [ResponseType(nameof(M2C_SeasonLevelRewardResponse))]
    public partial class C2M_SeasonLevelRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_SeasonLevelRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SeasonLevelRewardRequest), isFromPool) as C2M_SeasonLevelRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int SeasonLevel { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SeasonLevel = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SeasonLevelRewardResponse)]
    public partial class M2C_SeasonLevelRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_SeasonLevelRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SeasonLevelRewardResponse), isFromPool) as M2C_SeasonLevelRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 赛季捐献
    [MemoryPackable]
    [Message(OuterMessage.C2M_SeasonDonateRequest)]
    [ResponseType(nameof(M2C_SeasonDonateResponse))]
    public partial class C2M_SeasonDonateRequest : MessageObject, ILocationRequest
    {
        public static C2M_SeasonDonateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SeasonDonateRequest), isFromPool) as C2M_SeasonDonateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SeasonDonateResponse)]
    public partial class M2C_SeasonDonateResponse : MessageObject, ILocationResponse
    {
        public static M2C_SeasonDonateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SeasonDonateResponse), isFromPool) as M2C_SeasonDonateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(1)]
        public int CommonSeasonBossLevel { get; set; }

        [MemoryPackOrder(2)]
        public int CommonSeasonBossExp { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.CommonSeasonBossLevel = default;
            this.CommonSeasonBossExp = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 赛季捐献
    [MemoryPackable]
    [Message(OuterMessage.C2M_SeasonDonateRewardRequest)]
    [ResponseType(nameof(M2C_SeasonDonateRewardResponse))]
    public partial class C2M_SeasonDonateRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_SeasonDonateRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SeasonDonateRewardRequest), isFromPool) as C2M_SeasonDonateRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Times { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Times = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SeasonDonateRewardResponse)]
    public partial class M2C_SeasonDonateRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_SeasonDonateRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SeasonDonateRewardResponse), isFromPool) as M2C_SeasonDonateRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public List<int> SeasonDonateRewardIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.SeasonDonateRewardIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 开启晶核
    [MemoryPackable]
    [Message(OuterMessage.C2M_SeasonOpenJingHeRequest)]
    [ResponseType(nameof(M2C_SeasonOpenJingHeResponse))]
    public partial class C2M_SeasonOpenJingHeRequest : MessageObject, ILocationRequest
    {
        public static C2M_SeasonOpenJingHeRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SeasonOpenJingHeRequest), isFromPool) as C2M_SeasonOpenJingHeRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// SeasonJingHeProto.Id
        /// </summary>
        [MemoryPackOrder(0)]
        public int JingHeId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.JingHeId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SeasonOpenJingHeResponse)]
    public partial class M2C_SeasonOpenJingHeResponse : MessageObject, ILocationResponse
    {
        public static M2C_SeasonOpenJingHeResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SeasonOpenJingHeResponse), isFromPool) as M2C_SeasonOpenJingHeResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 使用赛季果实， 更新boss刷新时间
    [MemoryPackable]
    [Message(OuterMessage.C2M_SeasonUseFruitRequest)]
    [ResponseType(nameof(M2C_SeasonUseFruitResponse))]
    public partial class C2M_SeasonUseFruitRequest : MessageObject, ILocationRequest
    {
        public static C2M_SeasonUseFruitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SeasonUseFruitRequest), isFromPool) as C2M_SeasonUseFruitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public List<long> BagInfoIDs { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.BagInfoIDs.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SeasonUseFruitResponse)]
    public partial class M2C_SeasonUseFruitResponse : MessageObject, ILocationResponse
    {
        public static M2C_SeasonUseFruitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SeasonUseFruitResponse), isFromPool) as M2C_SeasonUseFruitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_ShoujiRewardRequest)]
    [ResponseType(nameof(M2C_ShoujiRewardResponse))]
    public partial class C2M_ShoujiRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_ShoujiRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ShoujiRewardRequest), isFromPool) as C2M_ShoujiRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int ChapterId { get; set; }

        [MemoryPackOrder(1)]
        public int RewardIndex { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.ChapterId = default;
            this.RewardIndex = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ShoujiRewardResponse)]
    public partial class M2C_ShoujiRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_ShoujiRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ShoujiRewardResponse), isFromPool) as M2C_ShoujiRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 收集珍宝
    [MemoryPackable]
    [Message(OuterMessage.C2M_ShouJiTreasureRequest)]
    [ResponseType(nameof(M2C_ShouJiTreasureResponse))]
    public partial class C2M_ShouJiTreasureRequest : MessageObject, ILocationRequest
    {
        public static C2M_ShouJiTreasureRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_ShouJiTreasureRequest), isFromPool) as C2M_ShouJiTreasureRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int ShouJiId { get; set; }

        [MemoryPackOrder(1)]
        public List<long> ItemIds { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ShouJiId = default;
            this.ItemIds.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_ShouJiTreasureResponse)]
    public partial class M2C_ShouJiTreasureResponse : MessageObject, ILocationResponse
    {
        public static M2C_ShouJiTreasureResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_ShouJiTreasureResponse), isFromPool) as M2C_ShouJiTreasureResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public int ActiveNum { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.ActiveNum = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 激活称号
    [MemoryPackable]
    [Message(OuterMessage.C2M_TitleUseRequest)]
    [ResponseType(nameof(M2C_TitleUseResponse))]
    public partial class C2M_TitleUseRequest : MessageObject, ILocationRequest
    {
        public static C2M_TitleUseRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TitleUseRequest), isFromPool) as C2M_TitleUseRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int TitleId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [MemoryPackOrder(1)]
        public int OperateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.TitleId = default;
            this.OperateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TitleUseResponse)]
    public partial class M2C_TitleUseResponse : MessageObject, ILocationResponse
    {
        public static M2C_TitleUseResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TitleUseResponse), isFromPool) as M2C_TitleUseResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TitleUpdateResult)]
    public partial class M2C_TitleUpdateResult : MessageObject, IMessage
    {
        public static M2C_TitleUpdateResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TitleUpdateResult), isFromPool) as M2C_TitleUpdateResult;
        }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public long UnitId { get; set; }

        [MemoryPackOrder(5)]
        public List<KeyValuePairInt> TitleList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.ActorId = default;
            this.UnitId = default;
            this.TitleList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 挑战之地开始战斗
    [MemoryPackable]
    [Message(OuterMessage.C2M_TowerFightBeginRequest)]
    [ResponseType(nameof(M2C_TowerFightBeginResponse))]
    public partial class C2M_TowerFightBeginRequest : MessageObject, ILocationRequest
    {
        public static C2M_TowerFightBeginRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TowerFightBeginRequest), isFromPool) as C2M_TowerFightBeginRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TowerFightBeginResponse)]
    public partial class M2C_TowerFightBeginResponse : MessageObject, ILocationResponse
    {
        public static M2C_TowerFightBeginResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TowerFightBeginResponse), isFromPool) as M2C_TowerFightBeginResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_TowerExitRequest)]
    [ResponseType(nameof(M2C_TowerExitResponse))]
    public partial class C2M_TowerExitRequest : MessageObject, ILocationRequest
    {
        public static C2M_TowerExitRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TowerExitRequest), isFromPool) as C2M_TowerExitRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TowerExitResponse)]
    public partial class M2C_TowerExitResponse : MessageObject, ILocationResponse
    {
        public static M2C_TowerExitResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TowerExitResponse), isFromPool) as M2C_TowerExitResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 封印之塔继续挑战
    [MemoryPackable]
    [Message(OuterMessage.C2M_TowerOfSealNextRequest)]
    [ResponseType(nameof(M2C_TowerOfSealNextResponse))]
    public partial class C2M_TowerOfSealNextRequest : MessageObject, ILocationRequest
    {
        public static C2M_TowerOfSealNextRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TowerOfSealNextRequest), isFromPool) as C2M_TowerOfSealNextRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        /// <summary>
        /// 骰子的点数
        /// </summary>
        [MemoryPackOrder(0)]
        public int DiceResult { get; set; }

        /// <summary>
        /// 消耗道具的类型 0钻石 1凭证
        /// </summary>
        [MemoryPackOrder(1)]
        public int CostType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.DiceResult = default;
            this.CostType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TowerOfSealNextResponse)]
    public partial class M2C_TowerOfSealNextResponse : MessageObject, ILocationResponse
    {
        public static M2C_TowerOfSealNextResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TowerOfSealNextResponse), isFromPool) as M2C_TowerOfSealNextResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 试炼副本开始
    [MemoryPackable]
    [Message(OuterMessage.C2M_TrialDungeonBeginRequest)]
    [ResponseType(nameof(M2C_TrialDungeonBeginResponse))]
    public partial class C2M_TrialDungeonBeginRequest : MessageObject, ILocationRequest
    {
        public static C2M_TrialDungeonBeginRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TrialDungeonBeginRequest), isFromPool) as C2M_TrialDungeonBeginRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TrialDungeonBeginResponse)]
    public partial class M2C_TrialDungeonBeginResponse : MessageObject, ILocationResponse
    {
        public static M2C_TrialDungeonBeginResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TrialDungeonBeginResponse), isFromPool) as M2C_TrialDungeonBeginResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 试炼副本结束
    [MemoryPackable]
    [Message(OuterMessage.C2M_TrialDungeonFinishRequest)]
    [ResponseType(nameof(M2C_TrialDungeonFinishResponse))]
    public partial class C2M_TrialDungeonFinishRequest : MessageObject, ILocationRequest
    {
        public static C2M_TrialDungeonFinishRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TrialDungeonFinishRequest), isFromPool) as C2M_TrialDungeonFinishRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TrialDungeonFinishResponse)]
    public partial class M2C_TrialDungeonFinishResponse : MessageObject, ILocationResponse
    {
        public static M2C_TrialDungeonFinishResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TrialDungeonFinishResponse), isFromPool) as M2C_TrialDungeonFinishResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public int CombatResult { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.CombatResult = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TrialDungeonDamage)]
    public partial class M2C_TrialDungeonDamage : MessageObject, IMessage
    {
        public static M2C_TrialDungeonDamage Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TrialDungeonDamage), isFromPool) as M2C_TrialDungeonDamage;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public long BeginTime { get; set; }

        [MemoryPackOrder(1)]
        public long HurtValue { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.BeginTime = default;
            this.HurtValue = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 小龟大赛记录
    [MemoryPackable]
    [Message(OuterMessage.C2M_TurtleRecordRequest)]
    [ResponseType(nameof(M2C_TurtleRecordResponse))]
    public partial class C2M_TurtleRecordRequest : MessageObject, ILocationRequest
    {
        public static C2M_TurtleRecordRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TurtleRecordRequest), isFromPool) as C2M_TurtleRecordRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TurtleRecordResponse)]
    public partial class M2C_TurtleRecordResponse : MessageObject, ILocationResponse
    {
        public static M2C_TurtleRecordResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TurtleRecordResponse), isFromPool) as M2C_TurtleRecordResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        /// <summary>
        /// 支持的id
        /// </summary>
        [MemoryPackOrder(1)]
        public int SupportId { get; set; }

        /// <summary>
        /// 胜利次数
        /// </summary>
        [MemoryPackOrder(2)]
        public List<int> WinTimes { get; set; } = new();

        /// <summary>
        /// 支持次数
        /// </summary>
        [MemoryPackOrder(3)]
        public List<int> SupportTimes { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.SupportId = default;
            this.WinTimes.Clear();
            this.SupportTimes.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 小龟大赛支持
    [MemoryPackable]
    [Message(OuterMessage.C2M_TurtleSupportRequest)]
    [ResponseType(nameof(M2C_TurtleSupportResponse))]
    public partial class C2M_TurtleSupportRequest : MessageObject, ILocationRequest
    {
        public static C2M_TurtleSupportRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_TurtleSupportRequest), isFromPool) as C2M_TurtleSupportRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 该账号支持的小龟. ConfigHelper.TurtleList
        /// </summary>
        [MemoryPackOrder(0)]
        public int SupportId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.SupportId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_TurtleSupportResponse)]
    public partial class M2C_TurtleSupportResponse : MessageObject, ILocationResponse
    {
        public static M2C_TurtleSupportResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_TurtleSupportResponse), isFromPool) as M2C_TurtleSupportResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareDraw2Request)]
    [ResponseType(nameof(M2C_WelfareDraw2Response))]
    public partial class C2M_WelfareDraw2Request : MessageObject, ILocationRequest
    {
        public static C2M_WelfareDraw2Request Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareDraw2Request), isFromPool) as C2M_WelfareDraw2Request;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareDraw2Response)]
    public partial class M2C_WelfareDraw2Response : MessageObject, ILocationResponse
    {
        public static M2C_WelfareDraw2Response Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareDraw2Response), isFromPool) as M2C_WelfareDraw2Response;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareDraw2RewardRequest)]
    [ResponseType(nameof(M2C_WelfareDraw2RewardResponse))]
    public partial class C2M_WelfareDraw2RewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareDraw2RewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareDraw2RewardRequest), isFromPool) as C2M_WelfareDraw2RewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareDraw2RewardResponse)]
    public partial class M2C_WelfareDraw2RewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareDraw2RewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareDraw2RewardResponse), isFromPool) as M2C_WelfareDraw2RewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 幸运抽奖. 随机一个位置，并不会会道具， 该位置每天是固定的
    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareDrawRequest)]
    [ResponseType(nameof(M2C_WelfareDrawResponse))]
    public partial class C2M_WelfareDrawRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareDrawRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareDrawRequest), isFromPool) as C2M_WelfareDrawRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareDrawResponse)]
    public partial class M2C_WelfareDrawResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareDrawResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareDrawResponse), isFromPool) as M2C_WelfareDrawResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 转盘结束，给予道具
    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareDrawRewardRequest)]
    [ResponseType(nameof(M2C_WelfareDrawRewardResponse))]
    public partial class C2M_WelfareDrawRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareDrawRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareDrawRewardRequest), isFromPool) as C2M_WelfareDrawRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareDrawRewardResponse)]
    public partial class M2C_WelfareDrawRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareDrawRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareDrawRewardResponse), isFromPool) as M2C_WelfareDrawRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 投资
    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareInvestRequest)]
    [ResponseType(nameof(M2C_WelfareInvestResponse))]
    public partial class C2M_WelfareInvestRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareInvestRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareInvestRequest), isFromPool) as C2M_WelfareInvestRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 第几天
        /// </summary>
        [MemoryPackOrder(0)]
        public int Index { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Index = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareInvestResponse)]
    public partial class M2C_WelfareInvestResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareInvestResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareInvestResponse), isFromPool) as M2C_WelfareInvestResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 投资奖励。第七天可以领取奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareInvestRewardRequest)]
    [ResponseType(nameof(M2C_WelfareInvestRewardResponse))]
    public partial class C2M_WelfareInvestRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareInvestRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareInvestRewardRequest), isFromPool) as C2M_WelfareInvestRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareInvestRewardResponse)]
    public partial class M2C_WelfareInvestRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareInvestRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareInvestRewardResponse), isFromPool) as M2C_WelfareInvestRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 当前的任务全部完成，才可以领取
    [MemoryPackable]
    [Message(OuterMessage.C2M_WelfareTaskRewardRequest)]
    [ResponseType(nameof(M2C_WelfareTaskRewardResponse))]
    public partial class C2M_WelfareTaskRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_WelfareTaskRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_WelfareTaskRewardRequest), isFromPool) as C2M_WelfareTaskRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int day { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.day = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_WelfareTaskRewardResponse)]
    public partial class M2C_WelfareTaskRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_WelfareTaskRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_WelfareTaskRewardResponse), isFromPool) as M2C_WelfareTaskRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_YueKaOpenRequest)]
    [ResponseType(nameof(M2C_YueKaOpenResponse))]
    public partial class C2M_YueKaOpenRequest : MessageObject, ILocationRequest
    {
        public static C2M_YueKaOpenRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_YueKaOpenRequest), isFromPool) as C2M_YueKaOpenRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_YueKaOpenResponse)]
    public partial class M2C_YueKaOpenResponse : MessageObject, ILocationResponse
    {
        public static M2C_YueKaOpenResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_YueKaOpenResponse), isFromPool) as M2C_YueKaOpenResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_YueKaRewardRequest)]
    [ResponseType(nameof(M2C_YueKaRewardResponse))]
    public partial class C2M_YueKaRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_YueKaRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_YueKaRewardRequest), isFromPool) as C2M_YueKaRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_YueKaRewardResponse)]
    public partial class M2C_YueKaRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_YueKaRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_YueKaRewardResponse), isFromPool) as M2C_YueKaRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 内存占用
    [MemoryPackable]
    [Message(OuterMessage.C2Popularize_UploadRequest)]
    [ResponseType(nameof(Popularize2C_UploadResponse))]
    public partial class C2Popularize_UploadRequest : MessageObject, IPopularizeActorRequest
    {
        public static C2Popularize_UploadRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Popularize_UploadRequest), isFromPool) as C2Popularize_UploadRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public string MemoryInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.MemoryInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Popularize2C_UploadResponse)]
    public partial class Popularize2C_UploadResponse : MessageObject, IPopularizeActorResponse
    {
        public static Popularize2C_UploadResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Popularize2C_UploadResponse), isFromPool) as Popularize2C_UploadResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 我的推广奖励
    [MemoryPackable]
    [Message(OuterMessage.C2Popularize_RewardRequest)]
    [ResponseType(nameof(Popularize2C_RewardResponse))]
    public partial class C2Popularize_RewardRequest : MessageObject, IPopularizeActorRequest
    {
        public static C2Popularize_RewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2Popularize_RewardRequest), isFromPool) as C2Popularize_RewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.Popularize2C_RewardResponse)]
    public partial class Popularize2C_RewardResponse : MessageObject, IPopularizeActorResponse
    {
        public static Popularize2C_RewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(Popularize2C_RewardResponse), isFromPool) as Popularize2C_RewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 单独的message消息体， 以Proto结尾，需要生成对应的entity (TestServerInfo) 和转换方法（代码放在Server/ProtboToEntity目录下）
    // 只处理outmessage即可
    [MemoryPackable]
    [Message(OuterMessage.TestServerInfoProto)]
    public partial class TestServerInfoProto : MessageObject
    {
        public static TestServerInfoProto Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(TestServerInfoProto), isFromPool) as TestServerInfoProto;
        }

        [MemoryPackOrder(0)]
        public int Id { get; set; }

        [MemoryPackOrder(1)]
        public int Status { get; set; }

        [MemoryPackOrder(2)]
        public string ServerName { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.Status = default;
            this.ServerName = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // BagComponentS
    // 生成的iteminfo x需要加标签 [ChildOf(typeof(BagComponentS))]
    [MemoryPackable]
    [Message(OuterMessage.ItemInfoProto)]
    public partial class ItemInfoProto : MessageObject
    {
        public static ItemInfoProto Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(ItemInfoProto), isFromPool) as ItemInfoProto;
        }

        [MemoryPackOrder(0)]
        public long BagInfoID { get; set; }

        [MemoryPackOrder(1)]
        public int ItemID { get; set; }

        [MemoryPackOrder(2)]
        public int ItemNum { get; set; }

        [MemoryPackOrder(3)]
        public string ItemPar { get; set; }

        [MemoryPackOrder(4)]
        public int HideID { get; set; }

        /// <summary>
        /// 对应的孔位颜色
        /// </summary>
        [MemoryPackOrder(5)]
        public string GemHole { get; set; }

        /// <summary>
        /// 0背包 1装备
        /// </summary>
        [MemoryPackOrder(7)]
        public int Loc { get; set; }

        [MemoryPackOrder(8)]
        public bool IfJianDing { get; set; }

        /// <summary>
        /// 鉴定属性
        /// </summary>
        [MemoryPackOrder(9)]
        public List<HideProList> HideProLists { get; set; } = new();

        /// <summary>
        /// 洗练属性
        /// </summary>
        [MemoryPackOrder(10)]
        public List<HideProList> XiLianHideProLists { get; set; } = new();

        [MemoryPackOrder(11)]
        public List<int> HideSkillLists { get; set; } = new();

        [MemoryPackOrder(12)]
        public bool isBinging { get; set; }

        /// <summary>
        /// 洗练特殊属性
        /// </summary>
        [MemoryPackOrder(13)]
        public List<HideProList> XiLianHideTeShuProLists { get; set; } = new();

        /// <summary>
        /// 来源方式
        /// </summary>
        [MemoryPackOrder(15)]
        public string GetWay { get; set; }

        /// <summary>
        /// 对应的宝石ID
        /// </summary>
        [MemoryPackOrder(16)]
        public string GemIDNew { get; set; }

        /// <summary>
        /// 制作玩家名字
        /// </summary>
        [MemoryPackOrder(17)]
        public string MakePlayer { get; set; }

        /// <summary>
        /// 附魔属性
        /// </summary>
        [MemoryPackOrder(19)]
        public List<HideProList> FumoProLists { get; set; } = new();

        [MemoryPackOrder(20)]
        public int InheritTimes { get; set; }

        [MemoryPackOrder(21)]
        public List<int> InheritSkills { get; set; } = new();

        /// <summary>
        /// /装备锁 宠物锁 功能 npc打开
        /// </summary>
        [MemoryPackOrder(22)]
        public bool IsProtect { get; set; }

        /// <summary>
        /// 增幅属性
        /// </summary>
        [MemoryPackOrder(23)]
        public List<HideProList> IncreaseProLists { get; set; } = new();

        /// <summary>
        /// 增幅技能
        /// </summary>
        [MemoryPackOrder(24)]
        public List<int> IncreaseSkillLists { get; set; } = new();

        [MemoryPackOrder(25)]
        public int EquipPlan { get; set; }

        [MemoryPackOrder(26)]
        public int EquipIndex { get; set; }

        /// <summary>
        /// 0未附灵 1附灵
        /// </summary>
        [MemoryPackOrder(27)]
        public int FuLing { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.BagInfoID = default;
            this.ItemID = default;
            this.ItemNum = default;
            this.ItemPar = default;
            this.HideID = default;
            this.GemHole = default;
            this.Loc = default;
            this.IfJianDing = default;
            this.HideProLists.Clear();
            this.XiLianHideProLists.Clear();
            this.HideSkillLists.Clear();
            this.isBinging = default;
            this.XiLianHideTeShuProLists.Clear();
            this.GetWay = default;
            this.GemIDNew = default;
            this.MakePlayer = default;
            this.FumoProLists.Clear();
            this.InheritTimes = default;
            this.InheritSkills.Clear();
            this.IsProtect = default;
            this.IncreaseProLists.Clear();
            this.IncreaseSkillLists.Clear();
            this.EquipPlan = default;
            this.EquipIndex = default;
            this.FuLing = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMeleeInfo)]
    public partial class PetMeleeInfo : MessageObject
    {
        public static PetMeleeInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMeleeInfo), isFromPool) as PetMeleeInfo;
        }

        /// <summary>
        /// 宠物乱斗，主战宠物
        /// </summary>
        [MemoryPackOrder(0)]
        public List<long> MainPetList { get; set; } = new();

        /// <summary>
        /// 宠物乱斗，辅战宠物
        /// </summary>
        [MemoryPackOrder(1)]
        public List<int> AssistPetList { get; set; } = new();

        /// <summary>
        /// 宠物乱斗，魔法卡牌
        /// </summary>
        [MemoryPackOrder(2)]
        public List<int> MagicList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MainPetList.Clear();
            this.AssistPetList.Clear();
            this.MagicList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMeleeCardInfo)]
    public partial class PetMeleeCardInfo : MessageObject
    {
        public static PetMeleeCardInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMeleeCardInfo), isFromPool) as PetMeleeCardInfo;
        }

        [MemoryPackOrder(0)]
        public long Id { get; set; }

        /// <summary>
        /// 1主战宠物卡牌 2辅战宠物卡牌 3魔法卡牌
        /// </summary>
        [MemoryPackOrder(1)]
        public int Type { get; set; }

        [MemoryPackOrder(2)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(3)]
        public long PetId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.Id = default;
            this.Type = default;
            this.ConfigId = default;
            this.PetId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMeleeFubenInfo)]
    public partial class PetMeleeFubenInfo : MessageObject
    {
        public static PetMeleeFubenInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMeleeFubenInfo), isFromPool) as PetMeleeFubenInfo;
        }

        [MemoryPackOrder(0)]
        public int PetFubenId { get; set; }

        [MemoryPackOrder(1)]
        public int Star { get; set; }

        [MemoryPackOrder(2)]
        public int Reward { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetFubenId = default;
            this.Star = default;
            this.Reward = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleePlanRequest)]
    [ResponseType(nameof(M2C_PetMeleePlanResponse))]
    public partial class C2M_PetMeleePlanRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleePlanRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleePlanRequest), isFromPool) as C2M_PetMeleePlanRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int PetMeleePlan { get; set; }

        [MemoryPackOrder(1)]
        public int SceneType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetMeleePlan = default;
            this.SceneType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleePlanResponse)]
    public partial class M2C_PetMeleePlanResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleePlanResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleePlanResponse), isFromPool) as M2C_PetMeleePlanResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeSetRequest)]
    [ResponseType(nameof(M2C_PetMeleeSetResponse))]
    public partial class C2M_PetMeleeSetRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeSetRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeSetRequest), isFromPool) as C2M_PetMeleeSetRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(4)]
        public PetMeleeInfo PetMeleeInfo { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.PetMeleeInfo = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeSetResponse)]
    public partial class M2C_PetMeleeSetResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeSetResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeSetResponse), isFromPool) as M2C_PetMeleeSetResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeGetMyCards)]
    [ResponseType(nameof(M2C_PetMeleeGetMyCards))]
    public partial class C2M_PetMeleeGetMyCards : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeGetMyCards Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeGetMyCards), isFromPool) as C2M_PetMeleeGetMyCards;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int MapType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.MapType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeGetMyCards)]
    public partial class M2C_PetMeleeGetMyCards : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeGetMyCards Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeGetMyCards), isFromPool) as M2C_PetMeleeGetMyCards;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        [MemoryPackOrder(0)]
        public List<PetMeleeCardInfo> PetMeleeCardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;
            this.PetMeleeCardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeDealCards)]
    public partial class M2C_PetMeleeDealCards : MessageObject, IMessage
    {
        public static M2C_PetMeleeDealCards Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeDealCards), isFromPool) as M2C_PetMeleeDealCards;
        }

        [MemoryPackOrder(0)]
        public List<PetMeleeCardInfo> PetMeleeCardList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.PetMeleeCardList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物大战放置位置   前后端 ui命名都要一直 方便查找
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleePlace)]
    [ResponseType(nameof(M2C_PetMeleePlace))]
    public partial class C2M_PetMeleePlace : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleePlace Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleePlace), isFromPool) as C2M_PetMeleePlace;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long CarId { get; set; }

        [MemoryPackOrder(1)]
        public Unity.Mathematics.float3 Position { get; set; }

        [MemoryPackOrder(2)]
        public long TargetUnitId { get; set; }

        [MemoryPackOrder(3)]
        public int MapType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CarId = default;
            this.Position = default;
            this.TargetUnitId = default;
            this.MapType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleePlace)]
    public partial class M2C_PetMeleePlace : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleePlace Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleePlace), isFromPool) as M2C_PetMeleePlace;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeDisposeCard)]
    [ResponseType(nameof(M2C_PetMeleeDisposeCard))]
    public partial class C2M_PetMeleeDisposeCard : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeDisposeCard Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeDisposeCard), isFromPool) as C2M_PetMeleeDisposeCard;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public long CarId { get; set; }

        [MemoryPackOrder(1)]
        public int MapType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.CarId = default;
            this.MapType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeDisposeCard)]
    public partial class M2C_PetMeleeDisposeCard : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeDisposeCard Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeDisposeCard), isFromPool) as M2C_PetMeleeDisposeCard;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物大战开始战斗
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeBegin)]
    [ResponseType(nameof(M2C_PetMeleeBegin))]
    public partial class C2M_PetMeleeBegin : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeBegin Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeBegin), isFromPool) as C2M_PetMeleeBegin;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int MapType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.MapType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeBegin)]
    public partial class M2C_PetMeleeBegin : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeBegin Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeBegin), isFromPool) as M2C_PetMeleeBegin;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public string Message { get; set; }

        [MemoryPackOrder(91)]
        public int Error { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Message = default;
            this.Error = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeRewardRequest)]
    [ResponseType(nameof(M2C_PetMeleeRewardResponse))]
    public partial class C2M_PetMeleeRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeRewardRequest), isFromPool) as C2M_PetMeleeRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(0)]
        public int SceneId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.SceneId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeRewardResponse)]
    public partial class M2C_PetMeleeRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeRewardResponse), isFromPool) as M2C_PetMeleeRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 宠物乱斗星级奖励
    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMeleeFubenRewardRequest)]
    [ResponseType(nameof(M2C_PetMeleeFubenRewardResponse))]
    public partial class C2M_PetMeleeFubenRewardRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMeleeFubenRewardRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMeleeFubenRewardRequest), isFromPool) as C2M_PetMeleeFubenRewardRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Id { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Id = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMeleeFubenRewardResponse)]
    public partial class M2C_PetMeleeFubenRewardResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMeleeFubenRewardResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMeleeFubenRewardResponse), isFromPool) as M2C_PetMeleeFubenRewardResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.DamageValueInfo)]
    public partial class DamageValueInfo : MessageObject
    {
        public static DamageValueInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(DamageValueInfo), isFromPool) as DamageValueInfo;
        }

        [MemoryPackOrder(0)]
        public int UnitType { get; set; }

        [MemoryPackOrder(1)]
        public int ConfigId { get; set; }

        [MemoryPackOrder(2)]
        public string UnitName { get; set; }

        [MemoryPackOrder(3)]
        public int SkillId { get; set; }

        [MemoryPackOrder(4)]
        public long DamageValue { get; set; }

        [MemoryPackOrder(5)]
        public long Time { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.UnitType = default;
            this.ConfigId = default;
            this.UnitName = default;
            this.SkillId = default;
            this.DamageValue = default;
            this.Time = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 玩家收到的伤害列表
    [MemoryPackable]
    [Message(OuterMessage.C2M_DamageValueListRequest)]
    [ResponseType(nameof(M2C_DamageValueListResponse))]
    public partial class C2M_DamageValueListRequest : MessageObject, ILocationRequest
    {
        public static C2M_DamageValueListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_DamageValueListRequest), isFromPool) as C2M_DamageValueListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Id { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Id = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_DamageValueListResponse)]
    public partial class M2C_DamageValueListResponse : MessageObject, ILocationResponse
    {
        public static M2C_DamageValueListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_DamageValueListResponse), isFromPool) as M2C_DamageValueListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(1)]
        public List<DamageValueInfo> DamageValueList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.DamageValueList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.C2M_PetMatchRequest)]
    [ResponseType(nameof(M2C_PetMatchResponse))]
    public partial class C2M_PetMatchRequest : MessageObject, ILocationRequest
    {
        public static C2M_PetMatchRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_PetMatchRequest), isFromPool) as C2M_PetMatchRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMatchResponse)]
    public partial class M2C_PetMatchResponse : MessageObject, ILocationResponse
    {
        public static M2C_PetMatchResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMatchResponse), isFromPool) as M2C_PetMatchResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMatchPlayerInfo)]
    public partial class PetMatchPlayerInfo : MessageObject
    {
        public static PetMatchPlayerInfo Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMatchPlayerInfo), isFromPool) as PetMatchPlayerInfo;
        }

        [MemoryPackOrder(0)]
        public long MatchTime { get; set; }

        [MemoryPackOrder(1)]
        public long UnitId { get; set; }

        /// <summary>
        /// 积分
        /// </summary>
        [MemoryPackOrder(2)]
        public long Score { get; set; }

        /// <summary>
        /// 名字
        /// </summary>
        [MemoryPackOrder(3)]
        public string Name { get; set; }

        /// <summary>
        /// 排名
        /// </summary>
        [MemoryPackOrder(4)]
        public int RankId { get; set; }

        /// <summary>
        /// 职业
        /// </summary>
        [MemoryPackOrder(5)]
        public int Occ { get; set; }

        [MemoryPackOrder(6)]
        public int RobotId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.MatchTime = default;
            this.UnitId = default;
            this.Score = default;
            this.Name = default;
            this.RankId = default;
            this.Occ = default;
            this.RobotId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_PetMatchResult)]
    public partial class M2C_PetMatchResult : MessageObject, IMessage
    {
        public static M2C_PetMatchResult Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_PetMatchResult), isFromPool) as M2C_PetMatchResult;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        [MemoryPackOrder(0)]
        public int Result { get; set; }

        [MemoryPackOrder(1)]
        public long FubenId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.Result = default;
            this.FubenId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    // PetMatch战绩
    [MemoryPackable]
    [Message(OuterMessage.C2PetMatch_RankListRequest)]
    [ResponseType(nameof(PetMatch2C_RankListResponse))]
    public partial class C2PetMatch_RankListRequest : MessageObject, IPetMatchActorRequest
    {
        public static C2PetMatch_RankListRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2PetMatch_RankListRequest), isFromPool) as C2PetMatch_RankListRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.PetMatch2C_RankListResponse)]
    public partial class PetMatch2C_RankListResponse : MessageObject, IPetMatchActorResponse
    {
        public static PetMatch2C_RankListResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(PetMatch2C_RankListResponse), isFromPool) as PetMatch2C_RankListResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        [MemoryPackOrder(0)]
        public long MathTime { get; set; }

        [MemoryPackOrder(1)]
        public int WinTime { get; set; }

        [MemoryPackOrder(2)]
        public int FailTime { get; set; }

        [MemoryPackOrder(3)]
        public List<PetMatchPlayerInfo> PetMatchPlayerInfoList { get; set; } = new();

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;
            this.MathTime = default;
            this.WinTime = default;
            this.FailTime = default;
            this.PetMatchPlayerInfoList.Clear();

            ObjectPool.Instance.Recycle(this);
        }
    }

    // 喜从天降刷新
    [MemoryPackable]
    [Message(OuterMessage.C2M_SingleHappyOperateRequest)]
    [ResponseType(nameof(M2C_SingleHappyOperateResponse))]
    public partial class C2M_SingleHappyOperateRequest : MessageObject, ILocationRequest
    {
        public static C2M_SingleHappyOperateRequest Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(C2M_SingleHappyOperateRequest), isFromPool) as C2M_SingleHappyOperateRequest;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(92)]
        public long ActorId { get; set; }

        /// <summary>
        /// 1免费移动 2刷新奖励 3购买次数
        /// </summary>
        [MemoryPackOrder(0)]
        public int OperatateType { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.ActorId = default;
            this.OperatateType = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    [MemoryPackable]
    [Message(OuterMessage.M2C_SingleHappyOperateResponse)]
    public partial class M2C_SingleHappyOperateResponse : MessageObject, ILocationResponse
    {
        public static M2C_SingleHappyOperateResponse Create(bool isFromPool = false)
        {
            return ObjectPool.Instance.Fetch(typeof(M2C_SingleHappyOperateResponse), isFromPool) as M2C_SingleHappyOperateResponse;
        }

        [MemoryPackOrder(89)]
        public int RpcId { get; set; }

        [MemoryPackOrder(90)]
        public int Error { get; set; }

        [MemoryPackOrder(91)]
        public string Message { get; set; }

        public override void Dispose()
        {
            if (!this.IsFromPool)
            {
                return;
            }

            this.RpcId = default;
            this.Error = default;
            this.Message = default;

            ObjectPool.Instance.Recycle(this);
        }
    }

    public static class OuterMessage
    {
        public const ushort HttpGetRouterResponse = 10002;
        public const ushort RouterSync = 10003;
        public const ushort C2M_TestRequest = 10004;
        public const ushort M2C_TestResponse = 10005;
        public const ushort C2C_SendBroadcastRequest = 10006;
        public const ushort C2C_SendBroadcastResponse = 10007;
        public const ushort C2E_GMEMailRequest = 10008;
        public const ushort E2C_GMEMailResponse = 10009;
        public const ushort C2M_GMCommand = 10010;
        public const ushort C2M_GM2InfoRequest = 10011;
        public const ushort M2C_GM2InfoResponse = 10012;
        public const ushort C2M_GM2CommonRequest = 10013;
        public const ushort M2C_GM2CommonResponse = 10014;
        public const ushort C2G_EnterGame = 10015;
        public const ushort G2C_EnterGame = 10016;
        public const ushort MoveInfo = 10017;
        public const ushort UnitInfo = 10018;
        public const ushort M2C_CreateUnits = 10019;
        public const ushort M2C_CreateMyUnit = 10020;
        public const ushort M2C_StartSceneChange = 10021;
        public const ushort M2C_CellDungeonInfo = 10022;
        public const ushort M2C_CellSonDungeonInfo = 10023;
        public const ushort M2C_RemoveUnits = 10024;
        public const ushort C2M_PathfindingRequest = 10025;
        public const ushort C2M_PathfindingResult = 10026;
        public const ushort C2M_Stop = 10027;
        public const ushort M2C_Stop = 10028;
        public const ushort C2M_StopResult = 10029;
        public const ushort M2C_StopResult = 10030;
        public const ushort M2C_PathfindingResult = 10031;
        public const ushort C2G_Ping = 10032;
        public const ushort G2C_Ping = 10033;
        public const ushort C2R_Ping = 10034;
        public const ushort R2C_Ping = 10035;
        public const ushort G2C_Test = 10036;
        public const ushort C2M_Reload = 10037;
        public const ushort M2C_Reload = 10038;
        public const ushort ServerItem = 10039;
        public const ushort C2R_DeleteAccountRequest = 10040;
        public const ushort R2C_DeleteAccountResponse = 10041;
        public const ushort C2R_ServerList = 10042;
        public const ushort R2C_ServerList = 10043;
        public const ushort C2R_LoginAccount = 10044;
        public const ushort R2C_LoginAccount = 10045;
        public const ushort C2R_RealNameRequest = 10046;
        public const ushort R2C_RealNameResponse = 10047;
        public const ushort C2M_RealNameRequest = 10048;
        public const ushort M2C_RealNameResponse = 10049;
        public const ushort RechargeInfo = 10050;
        public const ushort PlayerInfo = 10051;
        public const ushort CreateRoleInfo = 10052;
        public const ushort C2G_LoginGameGate = 10053;
        public const ushort G2C_LoginGameGate = 10054;
        public const ushort C2R_CreateRoleData = 10055;
        public const ushort R2C_CreateRoleData = 10056;
        public const ushort C2R_DeleteRoleData = 10057;
        public const ushort R2C_DeleteRoleData = 10058;
        public const ushort C2Q_EnterQueue = 10059;
        public const ushort Q2C_EnterQueue = 10060;
        public const ushort C2R_GetRealmKey = 10061;
        public const ushort R2C_GetRealmKey = 10062;
        public const ushort G2C_TestHotfixMessage = 10063;
        public const ushort C2M_TestRobotCase = 10064;
        public const ushort M2C_TestRobotCase = 10065;
        public const ushort C2M_TestRobotCase2 = 10066;
        public const ushort M2C_TestRobotCase2 = 10067;
        public const ushort C2M_TransferMap = 10068;
        public const ushort M2C_TransferMap = 10069;
        public const ushort C2M_FlyToPosition = 10070;
        public const ushort M2C_FlyToPosition = 10071;
        public const ushort C2G_Benchmark = 10072;
        public const ushort G2C_Benchmark = 10073;
        public const ushort BagInfo = 10074;
        public const ushort MysteryItemInfo = 10075;
        public const ushort ZhanQuReceiveNumber = 10076;
        public const ushort FirstWinInfo = 10077;
        public const ushort PetMingPlayerInfo = 10078;
        public const ushort ChatInfo = 10079;
        public const ushort MailInfo = 10080;
        public const ushort PaiMaiItemInfo = 10081;
        public const ushort PaiMaiShopItemInfo = 10082;
        public const ushort PopularizeInfo = 10083;
        public const ushort RankingInfo = 10084;
        public const ushort RankShouLieInfo = 10085;
        public const ushort RankPetInfo = 10086;
        public const ushort ServerInfo = 10087;
        public const ushort ServerMailItem = 10088;
        public const ushort UnionInfo = 10089;
        public const ushort UnionPlayerInfo = 10090;
        public const ushort DonationRecord = 10091;
        public const ushort A2C_Disconnect = 10092;
        public const ushort G2C_SecondLogin = 10093;
        public const ushort UserInfoProto = 10094;
        public const ushort M2C_RoleDataUpdate = 10095;
        public const ushort M2C_RoleDataBroadcast = 10096;
        public const ushort SkillPro = 10097;
        public const ushort FubenPassInfo = 10098;
        public const ushort C2A_ActivityInfoRequest = 10099;
        public const ushort A2C_ActivityInfoResponse = 10100;
        public const ushort C2A_CommonSeasonBossInfoRequest = 10101;
        public const ushort A2C_CommonSeasonBossInfoResponse = 10102;
        public const ushort C2A_FirstWinInfoRequest = 10103;
        public const ushort A2C_FirstWinInfoResponse = 10104;
        public const ushort C2A_MysteryListRequest = 10105;
        public const ushort A2C_MysteryListResponse = 10106;
        public const ushort C2A_PetMingChanChuRequest = 10107;
        public const ushort A2C_PetMingChanChuResponse = 10108;
        public const ushort C2A_PetMingListRequest = 10109;
        public const ushort A2C_PetMingListResponse = 10110;
        public const ushort RolePetInfo = 10111;
        public const ushort PetFubenInfo = 10112;
        public const ushort PetMingRecord = 10113;
        public const ushort M2C_RolePetBagUpdate = 10114;
        public const ushort M2C_PetListMessage = 10115;
        public const ushort M2C_RolePetUpdate = 10116;
        public const ushort M2C_PetDataUpdate = 10117;
        public const ushort M2C_PetDataBroadcast = 10118;
        public const ushort M2C_RoleBagUpdate = 10119;
        public const ushort C2M_BagInitRequest = 10120;
        public const ushort M2C_BagInitResponse = 10121;
        public const ushort C2M_OpenBoxRequest = 10122;
        public const ushort M2C_OpenBoxResponse = 10123;
        public const ushort C2M_PickItemRequest = 10124;
        public const ushort M2C_PickItemResponse = 10125;
        public const ushort C2M_EquipmentIncreaseRequest = 10126;
        public const ushort M2C_EquipmentIncreaseResponse = 10127;
        public const ushort C2M_FashionActiveRequest = 10128;
        public const ushort M2C_FashionActiveResponse = 10129;
        public const ushort C2M_FashionWearRequest = 10130;
        public const ushort M2C_FashionWearResponse = 10131;
        public const ushort C2M_GemHeChengQuickRequest = 10132;
        public const ushort M2C_GemHeChengQuickResponse = 10133;
        public const ushort C2M_ItemBuyCellRequest = 10134;
        public const ushort M2C_ItemBuyCellResponse = 10135;
        public const ushort C2M_RoleOpenCangKuRequest = 10136;
        public const ushort M2C_RoleOpenCangKuResponse = 10137;
        public const ushort C2M_ItemDestoryRequest = 10138;
        public const ushort M2C_ItemDestoryResponse = 10139;
        public const ushort C2M_ItemEquipIndexRequest = 10140;
        public const ushort M2C_ItemEquipIndexResponse = 10141;
        public const ushort C2M_ItemFumoProRequest = 10142;
        public const ushort M2C_ItemFumoProResponse = 10143;
        public const ushort C2M_ItemFumoUseRequest = 10144;
        public const ushort M2C_ItemFumoUseResponse = 10145;
        public const ushort C2M_ItemHuiShouRequest = 10146;
        public const ushort M2C_ItemHuiShouResponse = 10147;
        public const ushort C2M_ItemIncreaseTransferRequest = 10148;
        public const ushort M2C_ItemIncreaseTransferResponse = 10149;
        public const ushort C2M_ItemInheritRequest = 10150;
        public const ushort M2C_ItemInheritResponse = 10151;
        public const ushort C2M_ItemInheritSelectRequest = 10152;
        public const ushort M2C_ItemInheritSelectResponse = 10153;
        public const ushort C2M_ItemMeltingRequest = 10154;
        public const ushort M2C_ItemMeltingResponse = 10155;
        public const ushort C2M_ItemOneSellRequest = 10156;
        public const ushort M2C_ItemOneSellResponse = 10157;
        public const ushort C2M_ItemOperateGemRequest = 10158;
        public const ushort M2C_ItemOperateGemResponse = 10159;
        public const ushort C2M_ItemOperateRequest = 10160;
        public const ushort M2C_ItemOperateResponse = 10161;
        public const ushort C2M_ItemOperateWearRequest = 10162;
        public const ushort M2C_ItemOperateWearResponse = 10163;
        public const ushort C2M_ItemProtectRequest = 10164;
        public const ushort M2C_ItemProtectResponse = 10165;
        public const ushort C2M_ItemQiangHuaRequest = 10166;
        public const ushort M2C_ItemQiangHuaResponse = 10167;
        public const ushort C2M_ItemQuickPutRequest = 10168;
        public const ushort M2C_ItemQuickPutResponse = 10169;
        public const ushort C2M_ItemSortRequest = 10170;
        public const ushort C2M_ItemSplitRequest = 10171;
        public const ushort M2C_ItemSplitResponse = 10172;
        public const ushort C2M_ItemTreasureOpenRequest = 10173;
        public const ushort M2C_ItemTreasureOpenResponse = 10174;
        public const ushort SkillInfo = 10175;
        public const ushort M2C_UnitNumericListUpdate = 10176;
        public const ushort C2M_UserInfoInitRequest = 10177;
        public const ushort M2C_UserInfoInitResponse = 10178;
        public const ushort FriendInfo = 10179;
        public const ushort C2F_FriendApplyReplyRequest = 10180;
        public const ushort F2C_FriendApplyReplyResponse = 10181;
        public const ushort C2F_FriendBlacklistRequest = 10182;
        public const ushort F2C_FriendBlacklistResponse = 10183;
        public const ushort C2F_FriendApplyRequest = 10184;
        public const ushort F2C_FriendApplyResponse = 10185;
        public const ushort C2F_FriendChatRead = 10186;
        public const ushort F2C_FriendChatRead = 10187;
        public const ushort C2F_FriendDeleteRequest = 10188;
        public const ushort F2C_FriendDeleteResponse = 10189;
        public const ushort C2F_FriendInfoRequest = 10190;
        public const ushort F2C_FriendInfoResponse = 10191;
        public const ushort C2F_WatchPlayerRequest = 10192;
        public const ushort F2C_WatchPlayerResponse = 10193;
        public const ushort ItemXiLianResult = 10194;
        public const ushort M2C_FashionUpdate = 10195;
        public const ushort C2M_SkillCmd = 10196;
        public const ushort M2C_SkillCmd = 10197;
        public const ushort M2C_UnitUseSkill = 10198;
        public const ushort LifeShieldInfo = 10199;
        public const ushort SkillSetInfo = 10200;
        public const ushort M2C_SkillSetMessage = 10201;
        public const ushort C2M_ChangeOccTwoRequest = 10202;
        public const ushort M2C_ChangeOccTwoResponse = 10203;
        public const ushort C2Chat_GetChatRequest = 10204;
        public const ushort Chat2C_GetChatResponse = 10205;
        public const ushort C2C_SendChatRequest = 10206;
        public const ushort C2C_SendChatResponse = 10207;
        public const ushort M2C_SyncChatInfo = 10208;
        public const ushort JingLingInfo = 10209;
        public const ushort ChengJiuInfo = 10210;
        public const ushort M2C_ChengJiuActiveMessage = 10211;
        public const ushort C2M_JingLingActiveRequest = 10212;
        public const ushort M2C_JingLingActiveResponse = 10213;
        public const ushort M2C_JingLingActiveMessage = 10214;
        public const ushort M2C_PetTuJianActiveMessage = 10215;
        public const ushort TaskPro = 10216;
        public const ushort M2C_TaskUpdate = 10217;
        public const ushort C2M_TalentActiveRequest = 10218;
        public const ushort M2C_TalentActiveResponse = 10219;
        public const ushort C2M_TalentReSetRequest = 10220;
        public const ushort M2C_TalentReSetResponse = 10221;
        public const ushort C2M_TianFuActiveRequest = 10222;
        public const ushort M2C_TianFuActiveResponse = 10223;
        public const ushort C2M_SkillSet = 10224;
        public const ushort M2C_SkillSet = 10225;
        public const ushort C2M_TaskCommitRequest = 10226;
        public const ushort M2C_TaskCommitResponse = 10227;
        public const ushort C2M_TaskGetRequest = 10228;
        public const ushort M2C_TaskGetResponse = 10229;
        public const ushort C2M_TaskGiveUpRequest = 10230;
        public const ushort M2C_TaskGiveUpResponse = 10231;
        public const ushort C2M_TaskHuoYueRewardRequest = 10232;
        public const ushort M2C_TaskHuoYueRewardResponse = 10233;
        public const ushort C2M_TaskGrowUpRewardRequest = 10234;
        public const ushort M2C_TaskGrowUpRewardResponse = 10235;
        public const ushort C2M_TaskInitRequest = 10236;
        public const ushort M2C_TaskInitResponse = 10237;
        public const ushort C2M_TaskNoticeRequest = 10238;
        public const ushort M2C_TaskNoticeResponse = 10239;
        public const ushort C2M_TaskOnLoginRequest = 10240;
        public const ushort M2C_TaskOnLoginResponse = 10241;
        public const ushort C2M_TaskTrackRequest = 10242;
        public const ushort M2C_TaskTrackResponse = 10243;
        public const ushort C2M_SkillInitRequest = 10244;
        public const ushort M2C_SkillInitResponse = 10245;
        public const ushort C2M_SkillInterruptRequest = 10246;
        public const ushort M2C_SkillInterruptResult = 10247;
        public const ushort C2M_SkillJueXingRequest = 10248;
        public const ushort M2C_SkillJueXingResponse = 10249;
        public const ushort C2M_SkillXuanZhuanRequest = 10250;
        public const ushort M2C_SkillXuanZhuanResponse = 10251;
        public const ushort M2C_SkillXuanZhuanMessage = 10252;
        public const ushort C2M_SkillOperation = 10253;
        public const ushort M2C_SkillOperation = 10254;
        public const ushort C2M_SkillUp = 10255;
        public const ushort M2C_SkillUp = 10256;
        public const ushort C2M_LifeShieldCostRequest = 10257;
        public const ushort M2C_LifeShieldCostResponse = 10258;
        public const ushort C2M_TianFuPlanRequest = 10259;
        public const ushort M2C_TianFuPlanResponse = 10260;
        public const ushort M2C_UnitFinishSkill = 10261;
        public const ushort C2M_RoleAddPointRequest = 10262;
        public const ushort M2C_RoleAddPointResponse = 10263;
        public const ushort M2C_UnitNumericUpdate = 10264;
        public const ushort ShouJiChapterInfo = 10265;
        public const ushort JiaYuanRecord = 10266;
        public const ushort JiaYuanOperate = 10267;
        public const ushort JiaYuanPurchaseItem = 10268;
        public const ushort JiaYuanPlant = 10269;
        public const ushort JiaYuanPastures = 10270;
        public const ushort JiaYuanMonster = 10271;
        public const ushort JiaYuanPet = 10272;
        public const ushort PetBarInfo = 10273;
        public const ushort C2M_RolePetList = 10274;
        public const ushort M2C_RolePetList = 10275;
        public const ushort C2M_PetFightPlanRequest = 10276;
        public const ushort M2C_PetFightPlanResponse = 10277;
        public const ushort C2M_PetBarSetRequest = 10278;
        public const ushort M2C_PetBarSetResponse = 10279;
        public const ushort C2M_PetBarUpgradeRequest = 10280;
        public const ushort M2C_PetBarUpgradeResponse = 10281;
        public const ushort C2M_RolePetFormationSet = 10282;
        public const ushort M2C_RolePetFormationSet = 10283;
        public const ushort C2M_RolePetFight = 10284;
        public const ushort M2C_RolePetFight = 10285;
        public const ushort C2M_PetFightSwitch = 10286;
        public const ushort M2C_PetFightSwitch = 10287;
        public const ushort M2C_PetFightSwitchMessage = 10288;
        public const ushort C2M_RolePetSkillCD = 10289;
        public const ushort M2C_RolePetSkillCD = 10290;
        public const ushort C2M_RolePetUpStar = 10291;
        public const ushort M2C_RolePetUpStar = 10292;
        public const ushort C2M_RolePetFenjie = 10293;
        public const ushort M2C_RolePetFenjie = 10294;
        public const ushort C2M_RolePetXiLian = 10295;
        public const ushort M2C_RolePetXiLian = 10296;
        public const ushort C2M_RolePetHeCheng = 10297;
        public const ushort M2C_RolePetHeCheng = 10298;
        public const ushort C2M_PetChangePosRequest = 10299;
        public const ushort M2C_PetChangePosResponse = 10300;
        public const ushort C2M_PetDuiHuanRequest = 10301;
        public const ushort M2C_PetDuiHuanResponse = 10302;
        public const ushort C2M_PetEggChouKaRequest = 10303;
        public const ushort M2C_PetEggChouKaResponse = 10304;
        public const ushort C2M_PetChouKaStartRequest = 10305;
        public const ushort M2C_PetChouKaStartResponse = 10306;
        public const ushort C2M_PetChouKaEndRequest = 10307;
        public const ushort M2C_PetChouKaEndResponse = 10308;
        public const ushort C2M_PetEggDuiHuanRequest = 10309;
        public const ushort M2C_PetEggDuiHuanResponse = 10310;
        public const ushort C2M_PetEquipRequest = 10311;
        public const ushort M2C_PetEquipResponse = 10312;
        public const ushort C2M_PetExploreReward = 10313;
        public const ushort M2C_PetExploreReward = 10314;
        public const ushort C2M_PetFragmentDuiHuan = 10315;
        public const ushort M2C_PetFragmentDuiHuan = 10316;
        public const ushort C2M_PetFubenBeginRequest = 10317;
        public const ushort M2C_PetFubenBeginResponse = 10318;
        public const ushort C2M_PetFubenOverRequest = 10319;
        public const ushort C2M_PetFubenRewardRequest = 10320;
        public const ushort M2C_PetFubenRewardResponse = 10321;
        public const ushort C2M_PetHeXinChouKaRequest = 10322;
        public const ushort M2C_PetHeXinChouKaResponse = 10323;
        public const ushort C2M_PetHeXinExploreReward = 10324;
        public const ushort M2C_PetHeXinExploreReward = 10325;
        public const ushort C2M_PetHeXinHeChengRequest = 10326;
        public const ushort M2C_PetHeXinHeChengResponse = 10327;
        public const ushort C2M_PetHeXinHeChengQuickRequest = 10328;
        public const ushort M2C_PetHeXinHeChengQuickResponse = 10329;
        public const ushort C2M_PetMingOccupyRequest = 10330;
        public const ushort M2C_PetMingOccupyResponse = 10331;
        public const ushort C2M_PetMingRecordRequest = 10332;
        public const ushort M2C_PetMingRecordResponse = 10333;
        public const ushort C2M_PetMingResetRequest = 10334;
        public const ushort M2C_PetMingResetResponse = 10335;
        public const ushort C2M_PetMingRewardRequest = 10336;
        public const ushort M2C_PetMingRewardResponse = 10337;
        public const ushort C2M_PetOpenCangKu = 10338;
        public const ushort M2C_PetOpenCangKu = 10339;
        public const ushort C2M_PetPutCangKu = 10340;
        public const ushort M2C_PetPutCangKu = 10341;
        public const ushort C2M_PetShouHuActiveRequest = 10342;
        public const ushort M2C_PetShouHuActiveResponse = 10343;
        public const ushort C2M_PetShouHuRequest = 10344;
        public const ushort M2C_PetShouHuResponse = 10345;
        public const ushort C2M_PetEchoOperateRequest = 10346;
        public const ushort M2C_PetEchoOperateResponse = 10347;
        public const ushort C2M_PetTakeOutBag = 10348;
        public const ushort M2C_PetTakeOutBag = 10349;
        public const ushort C2M_PetTargetLockRequest = 10350;
        public const ushort M2C_PetTargetLockResponse = 10351;
        public const ushort C2M_PetZhuangJiaUpRequest = 10352;
        public const ushort M2C_PetZhuangJiaUpResponse = 10353;
        public const ushort C2M_RolePetEggOpenSlot = 10354;
        public const ushort M2C_RolePetEggOpenSlot = 10355;
        public const ushort C2M_RolePetEggHatch = 10356;
        public const ushort M2C_RolePetEggHatch = 10357;
        public const ushort C2M_RolePetEggOpen = 10358;
        public const ushort M2C_RolePetEggOpen = 10359;
        public const ushort C2M_RolePetEggPutOut = 10360;
        public const ushort M2C_RolePetEggPutOut = 10361;
        public const ushort C2M_RolePetHeXin = 10362;
        public const ushort M2C_RolePetHeXin = 10363;
        public const ushort C2M_RolePetJiadian = 10364;
        public const ushort M2C_RolePetJiadian = 10365;
        public const ushort C2M_RolePetProtect = 10366;
        public const ushort M2C_RolePetProtect = 10367;
        public const ushort C2M_RolePetRName = 10368;
        public const ushort M2C_RolePetRName = 10369;
        public const ushort C2M_RolePetSkinSet = 10370;
        public const ushort M2C_RolePetSkinSet = 10371;
        public const ushort C2M_RolePetUpStage = 10372;
        public const ushort M2C_RolePetUpStage = 10373;
        public const ushort C2M_RolePetXiuLian = 10374;
        public const ushort M2C_RolePetXiuLian = 10375;
        public const ushort C2M_RolePetEggPut = 10376;
        public const ushort M2C_RolePetEggPut = 10377;
        public const ushort BattleSummonInfo = 10378;
        public const ushort M2C_FubenSettlement = 10379;
        public const ushort M2C_JiaYuanUpdate = 10380;
        public const ushort M2C_FriendApplyResult = 10381;
        public const ushort C2M_ChengJiuListRequest = 10382;
        public const ushort M2C_ChengJiuListResponse = 10383;
        public const ushort C2M_ChengJiuRewardRequest = 10384;
        public const ushort M2C_ChengJiuRewardResponse = 10385;
        public const ushort C2M_ZhuaBuType1Request = 10386;
        public const ushort M2C_ZhuaBuType1Response = 10387;
        public const ushort C2M_ZhuaBuType2Request = 10388;
        public const ushort M2C_ZhuaBuType2Response = 10389;
        public const ushort C2M_JingLingDropRequest = 10390;
        public const ushort M2C_JingLingDropResponse = 10391;
        public const ushort C2M_JingLingUseRequest = 10392;
        public const ushort M2C_JingLingUseResponse = 10393;
        public const ushort C2M_UnitStateUpdate = 10394;
        public const ushort M2C_UnitStateUpdate = 10395;
        public const ushort M2C_UnitBuffUpdate = 10396;
        public const ushort M2C_UnitBuffRemove = 10397;
        public const ushort M2C_UnitBuffStatus = 10398;
        public const ushort M2C_SkillSecondResult = 10399;
        public const ushort TokenRecvive = 10400;
        public const ushort ActivityV1InfoProto = 10401;
        public const ushort M2C_ChainLightning = 10402;
        public const ushort C2M_StoreBuyRequest = 10403;
        public const ushort M2C_StoreBuyResponse = 10404;
        public const ushort C2M_AccountWarehousOperateRequest = 10405;
        public const ushort M2C_AccountWarehousOperateResponse = 10406;
        public const ushort C2M_ItemXiLianRequest = 10407;
        public const ushort M2C_ItemXiLianResponse = 10408;
        public const ushort C2M_ItemXiLianNumReward = 10409;
        public const ushort M2C_ItemXiLianNumReward = 10410;
        public const ushort C2M_ItemXiLianRewardRequest = 10411;
        public const ushort M2C_ItemXiLianRewardResponse = 10412;
        public const ushort C2M_ItemXiLianSelectRequest = 10413;
        public const ushort M2C_ItemXiLianSelectResponse = 10414;
        public const ushort C2M_ItemXiLianTransferRequest = 10415;
        public const ushort M2C_ItemXiLianTransferResponse = 10416;
        public const ushort C2M_MakeSelectRequest = 10417;
        public const ushort M2C_MakeSelectResponse = 10418;
        public const ushort C2M_MakeResetRequest = 10419;
        public const ushort M2C_MakeResetResponse = 10420;
        public const ushort C2M_MakeEquipRequest = 10421;
        public const ushort M2C_MakeEquipResponse = 10422;
        public const ushort M2C_TurtleRewardMessage = 10423;
        public const ushort C2M_BloodstoneQiangHuaRequest = 10424;
        public const ushort M2C_BloodstoneQiangHuaResponse = 10425;
        public const ushort C2M_DonationRequest = 10426;
        public const ushort M2C_DonationResponse = 10427;
        public const ushort C2M_UnionCreateRequest = 10428;
        public const ushort M2C_UnionCreateResponse = 10429;
        public const ushort C2M_UnionDonationRequest = 10430;
        public const ushort M2C_UnionDonationResponse = 10431;
        public const ushort C2M_UnionWishGetRequest = 10432;
        public const ushort M2C_UnionWishGetResponse = 10433;
        public const ushort C2M_UnionWishSendRequest = 10434;
        public const ushort M2C_UnionWishSendResponse = 10435;
        public const ushort C2M_UnionInviteRequest = 10436;
        public const ushort M2C_UnionInviteMessage = 10437;
        public const ushort C2M_UnionInviteReplyRequest = 10438;
        public const ushort C2M_UnionKeJiLearnRequest = 10439;
        public const ushort M2C_UnionKeJiLearnResponse = 10440;
        public const ushort C2M_UnionLeaveRequest = 10441;
        public const ushort M2C_UnionLeaveResponse = 10442;
        public const ushort C2M_UnionMysteryBuyRequest = 10443;
        public const ushort M2C_UnionMysteryBuyResponse = 10444;
        public const ushort C2M_UnionTransferRequest = 10445;
        public const ushort M2C_UnionTransferResponse = 10446;
        public const ushort C2M_UnionXiuLianRequest = 10447;
        public const ushort M2C_UnionXiuLianResponse = 10448;
        public const ushort C2U_DonationRankListRequest = 10449;
        public const ushort U2C_DonationRankListResponse = 10450;
        public const ushort M2C_UnionRaceInfoResult = 10451;
        public const ushort Actor_TransferRequest = 10452;
        public const ushort Actor_TransferResponse = 10453;
        public const ushort M2C_HorseNoticeInfo = 10454;
        public const ushort M2C_ZeroClock = 10455;
        public const ushort UnionListItem = 10456;
        public const ushort C2U_UnionListRequest = 10457;
        public const ushort U2C_UnionListResponse = 10458;
        public const ushort C2U_UnionApplyRequest = 10459;
        public const ushort U2C_UnionApplyResponse = 10460;
        public const ushort M2C_UnionApplyResult = 10461;
        public const ushort C2U_UnionApplyListRequest = 10462;
        public const ushort U2C_UnionApplyListResponse = 10463;
        public const ushort C2U_UnionApplyReplyRequest = 10464;
        public const ushort U2C_UnionApplyReplyResponse = 10465;
        public const ushort C2U_UnionJingXuanRequest = 10466;
        public const ushort U2C_UnionJingXuanResponse = 10467;
        public const ushort C2U_UnionKeJiActiteRequest = 10468;
        public const ushort U2C_UnionKeJiActiteResponse = 10469;
        public const ushort C2M_UnionKeJiQuickRequest = 10470;
        public const ushort M2C_UnionKeJiQuickResponse = 10471;
        public const ushort C2M_UnionOrderOperateRequest = 10472;
        public const ushort M2C_UnionOrderOperateResponse = 10473;
        public const ushort C2U_UnionKickOutRequest = 10474;
        public const ushort U2C_UnionKickOutResponse = 10475;
        public const ushort C2U_UnionUpgradeRequest = 10476;
        public const ushort U2C_UnionUpgradeResponse = 10477;
        public const ushort C2U_UnionMyInfoRequest = 10478;
        public const ushort U2C_UnionMyInfoResponse = 10479;
        public const ushort C2U_UnionMysteryListRequest = 10480;
        public const ushort U2C_UnionMysteryListResponse = 10481;
        public const ushort C2U_UnionOperatateRequest = 10482;
        public const ushort U2C_UnionOperatateResponse = 10483;
        public const ushort C2U_UnionRaceInfoRequest = 10484;
        public const ushort U2C_UnionRaceInfoResponse = 10485;
        public const ushort C2U_UnionRecordRequest = 10486;
        public const ushort U2C_UnionRecordResponse = 10487;
        public const ushort C2U_UnionSignUpRequest = 10488;
        public const ushort U2C_UnionSignUpResponse = 10489;
        public const ushort RankingTrialInfo = 10490;
        public const ushort RankSeasonTowerInfo = 10491;
        public const ushort M2C_AreneInfoResult = 10492;
        public const ushort M2C_BattleInfoResult = 10493;
        public const ushort PaiMaiAuctionRecord = 10494;
        public const ushort SoloPlayerInfo = 10495;
        public const ushort SoloResultInfo = 10496;
        public const ushort SoloMatchInfo = 10497;
        public const ushort M2C_SoloMatchResult = 10498;
        public const ushort SoloPlayerResultInfo = 10499;
        public const ushort M2C_SoloDungeon = 10500;
        public const ushort TeamPlayerInfo = 10501;
        public const ushort M2C_SyncMiJingDamage = 10502;
        public const ushort M2C_RunRaceBattleInfo = 10503;
        public const ushort M2C_RankRunRaceMessage = 10504;
        public const ushort M2C_RankRunRaceReward = 10505;
        public const ushort M2C_RankDemonMessage = 10506;
        public const ushort TeamInfo = 10507;
        public const ushort M2C_TeamUpdateResult = 10508;
        public const ushort M2C_TeamPickMessage = 10509;
        public const ushort M2C_CreateDropItems = 10510;
        public const ushort M2C_TeamDungeonSettlement = 10511;
        public const ushort C2M_PhoneBinging = 10512;
        public const ushort M2C_PhoneBinging = 10513;
        public const ushort C2M_BlackAccountRequest = 10514;
        public const ushort M2C_BlackAccountResponse = 10515;
        public const ushort C2C_ChatJinYanRequest = 10516;
        public const ushort C2C_ChatJinYanResponse = 10517;
        public const ushort C2M_ReceiveMailRequest = 10518;
        public const ushort M2C_ReceiveMailResponse = 10519;
        public const ushort C2E_ReceiveMailRequest = 10520;
        public const ushort E2C_ReceiveMailResponse = 10521;
        public const ushort C2E_GetAllMailRequest = 10522;
        public const ushort E2C_GetAllMailResponse = 10523;
        public const ushort C2F_WatchPetRequest = 10524;
        public const ushort F2C_WatchPetResponse = 10525;
        public const ushort M2C_HappyInfoResult = 10526;
        public const ushort M2C_UpdateMailInfo = 10527;
        public const ushort C2M_HappyMoveRequest = 10528;
        public const ushort M2C_HappyMoveResponse = 10529;
        public const ushort C2M_HongBaoOpenRequest = 10530;
        public const ushort M2C_HongBaoOpenResponse = 10531;
        public const ushort C2M_PaiMaiAuctionJoinRequest = 10532;
        public const ushort M2C_PaiMaiAuctionJoinResponse = 10533;
        public const ushort C2M_PaiMaiAuctionPriceRequest = 10534;
        public const ushort M2C_PaiMaiAuctionPriceResponse = 10535;
        public const ushort C2M_PaiMaiBuyNewRequest = 10536;
        public const ushort M2C_PaiMaiBuyNewResponse = 10537;
        public const ushort C2M_PaiMaiDuiHuanRequest = 10538;
        public const ushort M2C_PaiMaiDuiHuanResponse = 10539;
        public const ushort C2M_PaiMaiSellRequest = 10540;
        public const ushort M2C_PaiMaiSellResponse = 10541;
        public const ushort C2M_PaiMaiShopRequest = 10542;
        public const ushort M2C_PaiMaiShopResponse = 10543;
        public const ushort C2M_PaiMaiXiaJiaRequest = 10544;
        public const ushort M2C_PaiMaiXiaJiaResponse = 10545;
        public const ushort C2M_StallBuyRequest = 10546;
        public const ushort M2C_StallBuyResponse = 10547;
        public const ushort C2M_StallOperationRequest = 10548;
        public const ushort M2C_StallOperationResponse = 10549;
        public const ushort C2M_StallSellRequest = 10550;
        public const ushort M2C_StallSellResponse = 10551;
        public const ushort C2M_StallXiaJiaRequest = 10552;
        public const ushort M2C_StallXiaJiaResponse = 10553;
        public const ushort C2P_PaiMaiAuctionInfoRequest = 10554;
        public const ushort P2C_PaiMaiAuctionInfoResponse = 10555;
        public const ushort C2P_PaiMaiAuctionRecordRequest = 10556;
        public const ushort P2C_PaiMaiAuctionRecordResponse = 10557;
        public const ushort C2P_PaiMaiFindRequest = 10558;
        public const ushort P2C_PaiMaiFindResponse = 10559;
        public const ushort C2P_PaiMaiListRequest = 10560;
        public const ushort P2C_PaiMaiListResponse = 10561;
        public const ushort C2P_PaiMaiSearchRequest = 10562;
        public const ushort P2C_PaiMaiSearchResponse = 10563;
        public const ushort C2P_PaiMaiShopShowListRequest = 10564;
        public const ushort P2C_PaiMaiShopShowListResponse = 10565;
        public const ushort C2P_StallListRequest = 10566;
        public const ushort P2C_StallListResponse = 10567;
        public const ushort C2M_BuChangeRequest = 10568;
        public const ushort M2C_BuChangeResponse = 10569;
        public const ushort C2M_CreateSpiling = 10570;
        public const ushort C2M_DungeonHappyMoveRequest = 10571;
        public const ushort M2C_DungeonHappyMoveResponse = 10572;
        public const ushort C2M_FindJingLingRequest = 10573;
        public const ushort M2C_FindJingLingResponse = 10574;
        public const ushort C2M_FindNearMonsterRequest = 10575;
        public const ushort M2C_FindNearMonsterResponse = 10576;
        public const ushort C2M_FirstWinSelfRewardRequest = 10577;
        public const ushort M2C_FirstWinSelfRewardResponse = 10578;
        public const ushort C2M_FubenMessageRequest = 10579;
        public const ushort M2C_FubenMessageResponse = 10580;
        public const ushort C2M_FubenTimesResetRequest = 10581;
        public const ushort M2C_FubenTimesResetResponse = 10582;
        public const ushort C2M_GameSettingRequest = 10583;
        public const ushort M2C_GameSettingResponse = 10584;
        public const ushort C2M_GMCustomRequest = 10585;
        public const ushort M2C_GMCustomResponse = 10586;
        public const ushort C2M_GuideUpdateRequest = 10587;
        public const ushort M2C_GuideUpdateResponse = 10588;
        public const ushort C2M_KillMonsterRewardRequest = 10589;
        public const ushort M2C_KillMonsterRewardResponse = 10590;
        public const ushort C2M_LeavlRewardRequest = 10591;
        public const ushort M2C_LeavlRewardResponse = 10592;
        public const ushort C2M_ModifyNameRequest = 10593;
        public const ushort M2C_ModifyNameResponse = 10594;
        public const ushort C2M_MysteryBuyRequest = 10595;
        public const ushort M2C_MysteryBuyResponse = 10596;
        public const ushort C2M_OneChallengeRequest = 10597;
        public const ushort M2C_OneChallengeResponse = 10598;
        public const ushort M2C_OneChallenge = 10599;
        public const ushort C2M_ReddotReadRequest = 10600;
        public const ushort M2C_ReddotReadResponse = 10601;
        public const ushort C2M_RefreshUnitRequest = 10602;
        public const ushort C2M_SerialReardRequest = 10603;
        public const ushort M2C_SerialReardResponse = 10604;
        public const ushort C2M_ShareSucessRequest = 10605;
        public const ushort M2C_ShareSucessResponse = 10606;
        public const ushort C2M_UnitInfoRequest = 10607;
        public const ushort M2C_UnitInfoResponse = 10608;
        public const ushort C2M_XiuLianCenterRequest = 10609;
        public const ushort M2C_XiuLianCenterResponse = 10610;
        public const ushort C2Popularize_ListRequest = 10611;
        public const ushort Popularize2C_ListResponse = 10612;
        public const ushort C2Popularize_PlayerRequest = 10613;
        public const ushort Popularize2C_PlayerResponse = 10614;
        public const ushort C2R_CampRankListRequest = 10615;
        public const ushort R2C_CampRankListResponse = 10616;
        public const ushort C2R_DBServerInfoRequest = 10617;
        public const ushort R2C_DBServerInfoResponse = 10618;
        public const ushort C2R_RankDemonRequest = 10619;
        public const ushort R2C_RankDemonResponse = 10620;
        public const ushort C2R_RankListRequest = 10621;
        public const ushort R2C_RankListResponse = 10622;
        public const ushort C2R_RankLastRewardRequest = 10623;
        public const ushort R2C_RankLastRewardResponse = 10624;
        public const ushort C2R_RankPetListRequest = 10625;
        public const ushort R2C_RankPetListResponse = 10626;
        public const ushort C2R_RankRunRaceRequest = 10627;
        public const ushort R2C_RankRunRaceResponse = 10628;
        public const ushort C2R_RankSeasonTowerRequest = 10629;
        public const ushort R2C_RankSeasonTowerResponse = 10630;
        public const ushort C2R_RankShowLieRequest = 10631;
        public const ushort R2C_RankShowLieResponse = 10632;
        public const ushort C2R_RankTrialListRequest = 10633;
        public const ushort R2C_RankTrialListResponse = 10634;
        public const ushort C2R_RankUnionRaceRequest = 10635;
        public const ushort R2C_RankUnionRaceResponse = 10636;
        public const ushort C2R_WorldLvRequest = 10637;
        public const ushort R2C_WorldLvResponse = 10638;
        public const ushort C2M_SoloMatchRequest = 10639;
        public const ushort M2C_SoloMatchResponse = 10640;
        public const ushort C2S_SoloMyInfoRequest = 10641;
        public const ushort S2C_SoloMyInfoResponse = 10642;
        public const ushort C2M_TeamDungeonBoxRewardRequest = 10643;
        public const ushort M2C_TeamDungeonBoxRewardResponse = 10644;
        public const ushort C2M_TeamDungeonCreateRequest = 10645;
        public const ushort M2C_TeamDungeonCreateResponse = 10646;
        public const ushort C2M_TeamDungeonOpenRequest = 10647;
        public const ushort M2C_TeamDungeonOpenResponse = 10648;
        public const ushort C2M_TeamDungeonPrepareRequest = 10649;
        public const ushort M2C_TeamDungeonPrepareResponse = 10650;
        public const ushort C2M_TeamerPositionRequest = 10651;
        public const ushort M2C_TeamerPositionResponse = 10652;
        public const ushort C2M_TeamPickRequest = 10653;
        public const ushort M2C_TeamDungeonBoxRewardResult = 10654;
        public const ushort C2T_TeamAgreeRequest = 10655;
        public const ushort T2C_TeamAgreeResponse = 10656;
        public const ushort C2T_TeamDungeonAgreeRequest = 10657;
        public const ushort T2C_TeamDungeonAgreeResponse = 10658;
        public const ushort C2T_TeamDungeonApplyRequest = 10659;
        public const ushort T2C_TeamDungeonApplyResponse = 10660;
        public const ushort M2C_TeamDungeonApplyResult = 10661;
        public const ushort C2T_TeamDungeonInfoRequest = 10662;
        public const ushort T2C_TeamDungeonInfoResponse = 10663;
        public const ushort C2T_TeamInviteRequest = 10664;
        public const ushort T2C_TeamInviteResponse = 10665;
        public const ushort M2C_TeamInviteResult = 10666;
        public const ushort C2T_TeamKickOutRequest = 10667;
        public const ushort T2C_TeamKickOutResponse = 10668;
        public const ushort C2T_TeamLeaveRequest = 10669;
        public const ushort T2C_TeamLeaveResponse = 10670;
        public const ushort C2T_TeamRobotRequest = 10671;
        public const ushort T2C_TeamRobotResponse = 10672;
        public const ushort M2C_TeamDungeonOpenResult = 10673;
        public const ushort M2C_TeamDungeonPrepareResult = 10674;
        public const ushort M2C_DragonSonDungeonInfo = 10675;
        public const ushort C2M_ActivityChouKaRequest = 10676;
        public const ushort M2C_ActivityChouKaResponse = 10677;
        public const ushort C2M_ActivityFeedRequest = 10678;
        public const ushort M2C_ActivityFeedResponse = 10679;
        public const ushort C2M_ActivityGuessRequest = 10680;
        public const ushort M2C_ActivityGuessResponse = 10681;
        public const ushort C2M_ActivityInfoRequest = 10682;
        public const ushort M2C_ActivityInfoResponse = 10683;
        public const ushort C2M_ActivityReceiveRequest = 10684;
        public const ushort M2C_ActivityReceiveResponse = 10685;
        public const ushort C2M_ActivityRechargeSignRequest = 10686;
        public const ushort M2C_ActivityRechargeSignResponse = 10687;
        public const ushort C2M_ActivityRewardRequest = 10688;
        public const ushort M2C_ActivityRewardResponse = 10689;
        public const ushort C2M_ChouKa2RefreshRequest = 10690;
        public const ushort M2C_ChouKa2RefreshResponse = 10691;
        public const ushort C2M_SingleRechargeRewardRequest = 10692;
        public const ushort M2C_SingleRechargeRewardResponse = 10693;
        public const ushort C2M_ZhanQuInfoRequest = 10694;
        public const ushort M2C_ZhanQuInfoResponse = 10695;
        public const ushort C2M_ZhanQuReceiveRequest = 10696;
        public const ushort M2C_ZhanQuReceiveResponse = 10697;
        public const ushort C2M_JingHeActivateRequest = 10698;
        public const ushort M2C_JingHeActivateResponse = 10699;
        public const ushort C2M_JingHePlanRequest = 10700;
        public const ushort M2C_JingHePlanResponse = 10701;
        public const ushort M2C_UpdateUserInfoMessage = 10702;
        public const ushort C2M_JingHeWearRequest = 10703;
        public const ushort M2C_JingHeWearResponse = 10704;
        public const ushort C2M_JingHeZhuruRequest = 10705;
        public const ushort M2C_JingHeZhuruResponse = 10706;
        public const ushort C2M_MakeLearnRequest = 10707;
        public const ushort M2C_MakeLearnResponse = 10708;
        public const ushort C2E_AccountWarehousInfoRequest = 10709;
        public const ushort E2C_AccountWarehousInfoResponse = 10710;
        public const ushort C2M_BattleSummonRecord = 10711;
        public const ushort M2C_BattleSummonRecord = 10712;
        public const ushort C2M_BattleSummonRequest = 10713;
        public const ushort M2C_BattleSummonResponse = 10714;
        public const ushort C2M_CampRankSelectRequest = 10715;
        public const ushort M2C_CampRankSelectResponse = 10716;
        public const ushort Actor_FubenEnergySkillRequest = 10717;
        public const ushort Actor_FubenEnergySkillResponse = 10718;
        public const ushort FubenInfo = 10719;
        public const ushort SonFubenInfo = 10720;
        public const ushort Actor_EnterFubenRequest = 10721;
        public const ushort Actor_EnterFubenResponse = 10722;
        public const ushort Actor_EnterSonFubenRequest = 10723;
        public const ushort Actor_EnterSonFubenResponse = 10724;
        public const ushort Actor_GetFubenInfoRequest = 10725;
        public const ushort Actor_GetFubenInfoResponse = 10726;
        public const ushort Actor_GetFubenRewardRequest = 10727;
        public const ushort Actor_GetFubenRewardReponse = 10728;
        public const ushort Actor_FubenMoNengRequest = 10729;
        public const ushort Actor_FubenMoNengResponse = 10730;
        public const ushort Actor_SendReviveRequest = 10731;
        public const ushort Actor_SendReviveResponse = 10732;
        public const ushort C2M_ChouKaRequest = 10733;
        public const ushort M2C_ChouKaResponse = 10734;
        public const ushort C2M_ChouKaRewardRequest = 10735;
        public const ushort M2C_ChouKaRewardResponse = 10736;
        public const ushort C2M_EnergyAnswerRequest = 10737;
        public const ushort M2C_EnergyAnswerResponse = 10738;
        public const ushort C2M_EnergyInfoRequest = 10739;
        public const ushort M2C_EnergyInfoResponse = 10740;
        public const ushort C2M_EnergyReceiveRequest = 10741;
        public const ushort M2C_EnergyReceiveResponse = 10742;
        public const ushort C2M_HorseRideRequest = 10743;
        public const ushort M2C_HorseRideResponse = 10744;
        public const ushort C2M_HorseFightRequest = 10745;
        public const ushort M2C_HorseFightResponse = 10746;
        public const ushort C2M_JiaYuanPickRequest = 10747;
        public const ushort M2C_JiaYuanPickResponse = 10748;
        public const ushort C2M_JiaYuanCangKuOpenRequest = 10749;
        public const ushort M2C_JiaYuanCangKuOpenResponse = 10750;
        public const ushort C2M_JiaYuanCookBookOpen = 10751;
        public const ushort M2C_JiaYuanCookBookOpen = 10752;
        public const ushort C2M_JiaYuanCookRequest = 10753;
        public const ushort M2C_JiaYuanCookResponse = 10754;
        public const ushort C2M_JiaYuanDaShiRequest = 10755;
        public const ushort M2C_JiaYuanDaShiResponse = 10756;
        public const ushort C2M_JiaYuanExchangeRequest = 10757;
        public const ushort M2C_JiaYuanExchangeResponse = 10758;
        public const ushort C2M_JiaYuanGatherRequest = 10759;
        public const ushort M2C_JiaYuanGatherResponse = 10760;
        public const ushort C2M_JiaYuanGatherOtherRequest = 10761;
        public const ushort M2C_JiaYuanGatherOtherResponse = 10762;
        public const ushort C2M_JiaYuanInitRequest = 10763;
        public const ushort M2C_JiaYuanInitResponse = 10764;
        public const ushort C2M_JiaYuanMysteryBuyRequest = 10765;
        public const ushort M2C_JiaYuanMysteryBuyResponse = 10766;
        public const ushort C2M_JiaYuanMysteryListRequest = 10767;
        public const ushort M2C_JiaYuanMysteryListResponse = 10768;
        public const ushort C2M_JiaYuanPastureBuyRequest = 10769;
        public const ushort M2C_JiaYuanPastureBuyResponse = 10770;
        public const ushort C2M_JiaYuanPastureListRequest = 10771;
        public const ushort M2C_JiaYuanPastureListResponse = 10772;
        public const ushort C2M_JiaYuanPetFeedRequest = 10773;
        public const ushort M2C_JiaYuanPetFeedResponse = 10774;
        public const ushort C2M_JiaYuanPetOperateRequest = 10775;
        public const ushort M2C_JiaYuanPetOperateResponse = 10776;
        public const ushort C2M_JiaYuanPetPositionRequest = 10777;
        public const ushort M2C_JiaYuanPetPositionResponse = 10778;
        public const ushort C2M_JiaYuanPetWalkRequest = 10779;
        public const ushort M2C_JiaYuanPetWalkResponse = 10780;
        public const ushort C2M_JiaYuanPlanOpenRequest = 10781;
        public const ushort M2C_JiaYuanPlanOpenResponse = 10782;
        public const ushort C2M_JiaYuanPlantRequest = 10783;
        public const ushort M2C_JiaYuanPlantResponse = 10784;
        public const ushort C2M_JiaYuanPurchaseRequest = 10785;
        public const ushort M2C_JiaYuanPurchaseResponse = 10786;
        public const ushort C2M_JiaYuanPurchaseRefresh = 10787;
        public const ushort M2C_JiaYuanPurchaseRefresh = 10788;
        public const ushort C2M_JiaYuanRecordListRequest = 10789;
        public const ushort M2C_JiaYuanRecordListResponse = 10790;
        public const ushort C2M_JiaYuanStoreRequest = 10791;
        public const ushort M2C_JiaYuanStoreResponse = 10792;
        public const ushort C2M_JiaYuanUpLvRequest = 10793;
        public const ushort M2C_JiaYuanUpLvResponse = 10794;
        public const ushort C2M_JiaYuanUprootRequest = 10795;
        public const ushort M2C_JiaYuanUprootResponse = 10796;
        public const ushort C2M_JiaYuanVisitListRequest = 10797;
        public const ushort JiaYuanVisit = 10798;
        public const ushort M2C_JiaYuanVisitListResponse = 10799;
        public const ushort C2M_JiaYuanWatchRequest = 10800;
        public const ushort M2C_JiaYuanWatchResponse = 10801;
        public const ushort C2M_TakeOutAllRequest = 10802;
        public const ushort M2C_TakeOutAllResponse = 10803;
        public const ushort C2M_LingDiRewardRequest = 10804;
        public const ushort M2C_LingDiRewardResponse = 10805;
        public const ushort C2M_LingDiUpRequest = 10806;
        public const ushort M2C_LingDiUpResponse = 10807;
        public const ushort C2M_RandomTowerBeginRequest = 10808;
        public const ushort M2C_RandomTowerBeginResponse = 10809;
        public const ushort C2M_RandomTowerRewardRequest = 10810;
        public const ushort M2C_RandomTowerRewardResponse = 10811;
        public const ushort C2M_IOSPayVerifyRequest = 10812;
        public const ushort M2C_IOSPayVerifyResponse = 10813;
        public const ushort C2M_RechargeRequest = 10814;
        public const ushort M2C_RechargeResponse = 10815;
        public const ushort C2M_RechargeRewardRequest = 10816;
        public const ushort M2C_RechargeRewardResponse = 10817;
        public const ushort C2M_ExpToGoldRequest = 10818;
        public const ushort M2C_ExpToGoldResponse = 10819;
        public const ushort C2M_RealNameRewardRequest = 10820;
        public const ushort M2C_RealNameRewardResponse = 10821;
        public const ushort C2M_RolePetChouKaRequest = 10822;
        public const ushort M2C_RolePetChouKaResponse = 10823;
        public const ushort C2M_SeasonLevelRewardRequest = 10824;
        public const ushort M2C_SeasonLevelRewardResponse = 10825;
        public const ushort C2M_SeasonDonateRequest = 10826;
        public const ushort M2C_SeasonDonateResponse = 10827;
        public const ushort C2M_SeasonDonateRewardRequest = 10828;
        public const ushort M2C_SeasonDonateRewardResponse = 10829;
        public const ushort C2M_SeasonOpenJingHeRequest = 10830;
        public const ushort M2C_SeasonOpenJingHeResponse = 10831;
        public const ushort C2M_SeasonUseFruitRequest = 10832;
        public const ushort M2C_SeasonUseFruitResponse = 10833;
        public const ushort C2M_ShoujiRewardRequest = 10834;
        public const ushort M2C_ShoujiRewardResponse = 10835;
        public const ushort C2M_ShouJiTreasureRequest = 10836;
        public const ushort M2C_ShouJiTreasureResponse = 10837;
        public const ushort C2M_TitleUseRequest = 10838;
        public const ushort M2C_TitleUseResponse = 10839;
        public const ushort M2C_TitleUpdateResult = 10840;
        public const ushort C2M_TowerFightBeginRequest = 10841;
        public const ushort M2C_TowerFightBeginResponse = 10842;
        public const ushort C2M_TowerExitRequest = 10843;
        public const ushort M2C_TowerExitResponse = 10844;
        public const ushort C2M_TowerOfSealNextRequest = 10845;
        public const ushort M2C_TowerOfSealNextResponse = 10846;
        public const ushort C2M_TrialDungeonBeginRequest = 10847;
        public const ushort M2C_TrialDungeonBeginResponse = 10848;
        public const ushort C2M_TrialDungeonFinishRequest = 10849;
        public const ushort M2C_TrialDungeonFinishResponse = 10850;
        public const ushort M2C_TrialDungeonDamage = 10851;
        public const ushort C2M_TurtleRecordRequest = 10852;
        public const ushort M2C_TurtleRecordResponse = 10853;
        public const ushort C2M_TurtleSupportRequest = 10854;
        public const ushort M2C_TurtleSupportResponse = 10855;
        public const ushort C2M_WelfareDraw2Request = 10856;
        public const ushort M2C_WelfareDraw2Response = 10857;
        public const ushort C2M_WelfareDraw2RewardRequest = 10858;
        public const ushort M2C_WelfareDraw2RewardResponse = 10859;
        public const ushort C2M_WelfareDrawRequest = 10860;
        public const ushort M2C_WelfareDrawResponse = 10861;
        public const ushort C2M_WelfareDrawRewardRequest = 10862;
        public const ushort M2C_WelfareDrawRewardResponse = 10863;
        public const ushort C2M_WelfareInvestRequest = 10864;
        public const ushort M2C_WelfareInvestResponse = 10865;
        public const ushort C2M_WelfareInvestRewardRequest = 10866;
        public const ushort M2C_WelfareInvestRewardResponse = 10867;
        public const ushort C2M_WelfareTaskRewardRequest = 10868;
        public const ushort M2C_WelfareTaskRewardResponse = 10869;
        public const ushort C2M_YueKaOpenRequest = 10870;
        public const ushort M2C_YueKaOpenResponse = 10871;
        public const ushort C2M_YueKaRewardRequest = 10872;
        public const ushort M2C_YueKaRewardResponse = 10873;
        public const ushort C2Popularize_UploadRequest = 10874;
        public const ushort Popularize2C_UploadResponse = 10875;
        public const ushort C2Popularize_RewardRequest = 10876;
        public const ushort Popularize2C_RewardResponse = 10877;
        public const ushort TestServerInfoProto = 10878;
        public const ushort ItemInfoProto = 10879;
        public const ushort PetMeleeInfo = 10880;
        public const ushort PetMeleeCardInfo = 10881;
        public const ushort PetMeleeFubenInfo = 10882;
        public const ushort C2M_PetMeleePlanRequest = 10883;
        public const ushort M2C_PetMeleePlanResponse = 10884;
        public const ushort C2M_PetMeleeSetRequest = 10885;
        public const ushort M2C_PetMeleeSetResponse = 10886;
        public const ushort C2M_PetMeleeGetMyCards = 10887;
        public const ushort M2C_PetMeleeGetMyCards = 10888;
        public const ushort M2C_PetMeleeDealCards = 10889;
        public const ushort C2M_PetMeleePlace = 10890;
        public const ushort M2C_PetMeleePlace = 10891;
        public const ushort C2M_PetMeleeDisposeCard = 10892;
        public const ushort M2C_PetMeleeDisposeCard = 10893;
        public const ushort C2M_PetMeleeBegin = 10894;
        public const ushort M2C_PetMeleeBegin = 10895;
        public const ushort C2M_PetMeleeRewardRequest = 10896;
        public const ushort M2C_PetMeleeRewardResponse = 10897;
        public const ushort C2M_PetMeleeFubenRewardRequest = 10898;
        public const ushort M2C_PetMeleeFubenRewardResponse = 10899;
        public const ushort DamageValueInfo = 10900;
        public const ushort C2M_DamageValueListRequest = 10901;
        public const ushort M2C_DamageValueListResponse = 10902;
        public const ushort C2M_PetMatchRequest = 10903;
        public const ushort M2C_PetMatchResponse = 10904;
        public const ushort PetMatchPlayerInfo = 10905;
        public const ushort M2C_PetMatchResult = 10906;
        public const ushort C2PetMatch_RankListRequest = 10907;
        public const ushort PetMatch2C_RankListResponse = 10908;
        public const ushort C2M_SingleHappyOperateRequest = 10909;
        public const ushort M2C_SingleHappyOperateResponse = 10910;
    }
}